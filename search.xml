<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NCF Data Processing</title>
      <link href="/Skr-king.github.io/NCF-Data-Processing.html/"/>
      <url>/Skr-king.github.io/NCF-Data-Processing.html/</url>
      
        <content type="html"><![CDATA[<p>  左眼永远见不到右眼，只能陪她一起哭泣。<a id="more"></a></p><p>NCF数据处理是对论文neural_collaborative_filtering作者所提出的神经网络协同过滤源代码的运行结果，不过在源代码的基础上做了一些更改，运行环境是 python3.6，keras1.2.2，tensorflow1.3.0  ，电脑本地运行约7个小时。</p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p><strong>前言</strong></p><p><strong>GMF</strong> batch_size=256, dataset=’ml-1m’, epochs=100, learner=’adam’, lr=0.001, num_factors=8, num_neg=4, out=1, path=’Data/‘, regs=’[0,0]’, verbose=1</p><p><strong>MLP</strong> batch_size=256, dataset=’ml-1m’, epochs=100, layers=’[64,32,16,8]’, learner=’adam’, lr=0.001, num_neg=4, out=1, path=’Data/‘, reg_layers=’[0,0,0,0]’, verbose=1</p><p><strong>NeuMF</strong> batch_size=256, dataset=’ml-1m’, epochs=100, layers=’[64,32,16,8]’, learner=’adam’, lr=0.001, mf_pretrain=’’, mlp_pretrain=’’, num_factors=8, num_neg=4, out=1, path=’Data/‘, reg_layers=’[0,0,0,0]’, reg_mf=0, verbose=1</p><p>#user=6040, #item=3706, #train=994169, #test=6040</p><p><strong>评估 leave-one-out</strong></p><ol><li>命中率（HR）</li><li>归一化折扣累积增益（NDCG）</li></ol><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">GMF = pd.read_table(&apos;GMF.txt&apos;,header=None, encoding=&apos;gb2312&apos;, sep=&apos;,&apos;)</span><br><span class="line">MLP = pd.read_table(&apos;MLP.txt&apos;,header=None, encoding=&apos;gb2312&apos;, sep=&apos;,&apos;)</span><br><span class="line">NeuMF = pd.read_table(&apos;NEUMF.txt&apos;,header=None, encoding=&apos;gb2312&apos;, sep=&apos;,&apos;)</span><br></pre></td></tr></table></figure><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><img src="https://s2.ax1x.com/2019/08/03/eskaTI.png" alt border="0"><img src="https://s2.ax1x.com/2019/08/03/eskU0A.png" alt border="0"><img src="https://s2.ax1x.com/2019/08/03/eskBff.png" alt border="0"><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><h3 id="获取HR数据"><a href="#获取HR数据" class="headerlink" title="获取HR数据"></a>获取HR数据</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GMF_HR = []</span><br><span class="line">MLP_HR = []</span><br><span class="line">NeuMF_HR = []</span><br><span class="line">for i in GMF[0]:</span><br><span class="line">    GMF_HR.append(eval(i[-6:]))</span><br><span class="line">for i in  MLP[0]:</span><br><span class="line">    MLP_HR.append(eval(i[-6:]))</span><br><span class="line">for i in NeuMF[0]:</span><br><span class="line">    NeuMF_HR.append(eval(i[-6:]))</span><br></pre></td></tr></table></figure><h3 id="获取NDGC"><a href="#获取NDGC" class="headerlink" title="获取NDGC"></a>获取NDGC</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GMF_NDGC= []</span><br><span class="line">MLP_NDGC = []</span><br><span class="line">NeuMF_NDGC = []</span><br><span class="line">for i in GMF[1]:</span><br><span class="line">    GMF_NDGC.append(eval(i[-6:]))</span><br><span class="line">for i in  MLP[1]:</span><br><span class="line">    MLP_NDGC.append(eval(i[-6:]))</span><br><span class="line">for i in NeuMF[1]:</span><br><span class="line">    NeuMF_NDGC.append(eval(i[-6:]))</span><br></pre></td></tr></table></figure><h3 id="获取loss"><a href="#获取loss" class="headerlink" title="获取loss"></a>获取loss</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GMF_loss= []</span><br><span class="line">MLP_loss = []</span><br><span class="line">NeuMF_loss = []</span><br><span class="line">for i in GMF[2]:</span><br><span class="line">    GMF_loss.append(eval(i[-14:-8]))</span><br><span class="line">for i in  MLP[2]:</span><br><span class="line">    MLP_loss.append(eval(i[-14:-8]))</span><br><span class="line">for i in NeuMF[2]:</span><br><span class="line">    NeuMF_loss.append(eval(i[-14:-8]))</span><br></pre></td></tr></table></figure><h2 id="图表表示"><a href="#图表表示" class="headerlink" title="图表表示"></a>图表表示</h2><h3 id="HR对比"><a href="#HR对比" class="headerlink" title="HR对比"></a>HR对比</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f=plt.figure(figsize=(12,10))</span><br><span class="line">plt.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]</span><br><span class="line">plt.title(&quot;GMF-MLP-NeuMF  HR 对比图&quot;,fontsize = 20)</span><br><span class="line">plt.xlabel(&quot;Iteration&quot;,fontsize = 20)</span><br><span class="line">plt.ylabel(&quot;HR&quot;,fontsize = 20)</span><br><span class="line">plt.plot(range(100),GMF_HR,label = &quot;GMF&quot;)#,linestyle=&apos;--&apos;)</span><br><span class="line">plt.plot(range(100),MLP_HR,label = &quot;MLP&quot;)#,linestyle=&apos;-.&apos;)</span><br><span class="line">plt.plot(range(100),NeuMF_HR,label =&quot;NeuMF&quot;)</span><br><span class="line">plt.scatter(98,0.6437,marker=&apos;^&apos;,color = &apos;black&apos;)</span><br><span class="line">plt.scatter(29,0.6763,marker=&apos;^&apos;,color = &apos;black&apos;)</span><br><span class="line">plt.scatter(35,0.6848,marker=&apos;^&apos;,color = &apos;black&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.grid(c=&quot;w&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/03/eskwkt.png" alt border="0"><h3 id="NDGC-对比"><a href="#NDGC-对比" class="headerlink" title="NDGC 对比"></a>NDGC 对比</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f=plt.figure(figsize=(12,10))</span><br><span class="line">plt.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]</span><br><span class="line">plt.title(&quot;GMF-MLP-NeuMF NDGC 对比图&quot;,fontsize = 20)</span><br><span class="line">plt.xlabel(&quot;Iteration&quot;,fontsize = 20)</span><br><span class="line">plt.ylabel(&quot;NDGC&quot;,fontsize = 20)</span><br><span class="line">plt.plot(range(100),GMF_NDGC,label = &quot;GMF&quot;)</span><br><span class="line">plt.plot(range(100),MLP_NDGC,label = &quot;MLP&quot;)</span><br><span class="line">plt.plot(range(100),NeuMF_NDGC,label =&quot;NeuMF&quot;)</span><br><span class="line">plt.scatter(98,0.3749,marker=&apos;^&apos;,color = &apos;black&apos;)</span><br><span class="line">plt.scatter(29,0.3988,marker=&apos;^&apos;,color = &apos;black&apos;)</span><br><span class="line">plt.scatter(35,0.4095,marker=&apos;^&apos;,color = &apos;black&apos;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(c=&quot;w&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/03/eskNmd.png" alt border="0"></p><h3 id="LOSS-对比"><a href="#LOSS-对比" class="headerlink" title="LOSS 对比"></a>LOSS 对比</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f=plt.figure(figsize=(12,10))</span><br><span class="line">plt.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]</span><br><span class="line">plt.title(&quot;GMF-MLP-NeuMF  loss 对比图&quot;,fontsize = 20)</span><br><span class="line">plt.xlabel(&quot;Iteration&quot;,fontsize = 20)</span><br><span class="line">plt.ylabel(&quot;Loss&quot;,fontsize = 20)</span><br><span class="line">plt.plot(range(100),GMF_loss,label = &quot;GMF&quot;)</span><br><span class="line">plt.plot(range(100),MLP_loss,label = &quot;MLP&quot;)</span><br><span class="line">plt.plot(range(100),NeuMF_loss,label =&quot;NeuMF&quot;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(c =&quot;w&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/03/esk0tP.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradient Descent</title>
      <link href="/Skr-king.github.io/Gradient-Descent.html/"/>
      <url>/Skr-king.github.io/Gradient-Descent.html/</url>
      
        <content type="html"><![CDATA[<p>  最美的等待是，我们——未来可期。<a id="more"></a></p><h1 id="场景引入"><a href="#场景引入" class="headerlink" title="场景引入"></a>场景引入</h1><p>梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。</p><img src="https://s2.ax1x.com/2019/08/03/es9pc9.png" alt border="0"><p>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p><h1 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>1.步长或学习效率(learning rare)：步长决定在梯度下降过程中，每一步沿梯度负方向前进的距离。</p><p>2.假设函数(hppothesis function)：也就是我们的模型学习到的函数 记为 h_θ(x) = θ<em>0x</em>0+θ<em>1+x</em>1+θ<em>2x</em>2+…=θTX</p><p>3.损失函数(loss function): 损失函数是用来评估模型h_θ(x)的好坏，通常用损失函数来度量拟合的程度，线性回归中损失函数通常为label和假设函数输出的差的平方。自己理解为（实际值-真实值）的平方。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>梯度下降的基本过程就和下山的场景很类似。</p><p>首先，我们有一个可微分的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的梯度 ，然后朝着梯度相反的方向，就能让函数值下降的最快！因为梯度的方向就是函数之变化最快的方向(在后面会详细解释) 所以，我们重复利用这个方法，反复求取梯度，最后就能到达局部的最小值，这就类似于我们下山的过程。而求取梯度就确定了最陡峭的方向，也就是场景中测量方向的手段。那么为什么梯度的方向就是最陡峭的方向呢？接下来，我们从微分开始讲起</p><h3 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h3><p>看待微分的意义，可以有不同的角度，最常用的两种是：</p><ul><li>函数图像中，某点的切线的斜率</li><li>函数的变化率</li><li>几个微分的例子：</li></ul><img src="https://s2.ax1x.com/2019/08/03/es9i0x.png" alt border="0"><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>梯度实际上就是多变量微分的一般化。 下面这个例子：</p><img src="https://s2.ax1x.com/2019/08/03/espvhF.png" alt border="0"><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h3><p>1.先决条件：确认优化模型的假设函数h_θ(x)和损失函数J_(θ)</p><img src="https://s2.ax1x.com/2019/08/03/es99XR.png" alt border="0"><p>2.参数的初始化: 初始化假设函数的参数θ(注：θ是一个向量），算法中止距离ϵ以及步长α</p><p>3.确定当前位置的损失函数的梯度，对于θ_j,梯度如下</p><img src="https://s2.ax1x.com/2019/08/03/es9S1J.png" alt border="0"><p>4.确定是否所有的θ_j,梯度下降的距离都小于ϵ，如果小于则算法中止，当前为最后结果，否则，则重复步骤（3）</p><p>5.更新所有的θ，对于θ_j（其更新的表达式如下</p><img src="https://s2.ax1x.com/2019/08/03/espjtU.png" alt border="0"><h2 id="梯度下降的形式BGD、SGD、以及MBGD"><a href="#梯度下降的形式BGD、SGD、以及MBGD" class="headerlink" title="梯度下降的形式BGD、SGD、以及MBGD"></a>梯度下降的形式BGD、SGD、以及MBGD</h2><p>三种算法中文名分别为</p><ul><li>批量梯度下降（Batch gradient descent）</li></ul><p>批量梯度下降法（Batch Gradient Descent，简称BGD）是梯度下降法最原始的形式，它的具体思路是在更新每一参数时都使用所有的样本来进行更新 优点：全局最优解；易于并行实现； 缺点：当样本数目很多时，训练过程会很慢。</p><ul><li>随机梯度下降（Stochastic gradient descent）</li></ul><p>随机梯度下降是通过每个样本来迭代更新一次， 如果样本量很大的情况（例如几十万），那么可能只用其中几万条或者几千条的样本，就已经将theta迭代到最优解了，对比上面的批量梯度下降，迭代一次需要用到十几万训练样本，一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。但是，SGD伴随的一个问题是噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。 优点：训练速度快； 缺点：准确度下降，并不是全局最优；不易于并行实现。</p><ul><li>小批量梯度下降（Mini-batch gradient descent）</li></ul><p>有上述的两种梯度下降法可以看出，其各自均有优缺点，那么能不能在两种方法的性能之间取得一个折衷呢？即，算法的训练过程比较快，而且也要保证最终参数训练的准确率，而这正是小批量梯度下降法（Mini-batch Gradient Descent，简称MBGD）的初衷。MBGD在每次更新参数时使用b个样本（b一般为10） 不过都叫梯度下降算法，可见他们的核心是没有变的，变化的只是取训练集的方式，而梯度下降最核心的就是对函数求偏导，这个是在高等数学里有的。</p><h1 id="Gractice"><a href="#Gractice" class="headerlink" title="Gractice"></a>Gractice</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-comment">#构造训练数据 h（x）</span></span><br><span class="line">x = np.arange(<span class="hljs-number">0.</span>,<span class="hljs-number">10.</span>,<span class="hljs-number">0.2</span>)</span><br><span class="line">m = len(x)</span><br><span class="line">x0=np.full(m,<span class="hljs-number">1.0</span>)</span><br><span class="line">train_data = np.vstack([x0,x]).T  <span class="hljs-comment">#通过矩阵变化得到测试集【x0，x1】</span></span><br><span class="line">y = <span class="hljs-number">4</span>*x+<span class="hljs-number">1</span>+np.random.randn(m)<span class="hljs-comment">#构造“标准”答案</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">BGD</span><span class="hljs-params">(alpha,loops,epsilon)</span>:</span></span><br><span class="line">    <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">    alpha:步长</span></span><br><span class="line"><span class="hljs-string">    loops:循环次数</span></span><br><span class="line"><span class="hljs-string">    epsilon:收敛精度</span></span><br><span class="line"><span class="hljs-string">    '''</span></span><br><span class="line">    count=<span class="hljs-number">0</span><span class="hljs-comment">#loop次数</span></span><br><span class="line">    thata = np.random.randn(<span class="hljs-number">2</span>)<span class="hljs-comment">#随机thata向量初始的值也就是起点位置</span></span><br><span class="line">    err = np.zeros(<span class="hljs-number">2</span>)<span class="hljs-comment">#上次thata的值，初始化为0的向量</span></span><br><span class="line">    finish=<span class="hljs-number">0</span><span class="hljs-comment">#完成标志位</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="hljs-keyword">while</span> count&lt;loops:</span><br><span class="line">        count+=<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-comment">#所有训练数据的期望更新一次thata</span></span><br><span class="line">        sum = np.zeros(<span class="hljs-number">2</span>)<span class="hljs-comment">#初始化thata更次年总和</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):</span><br><span class="line">            cost = (np.dot(thata,train_data[i])-y[i])*train_data[i]</span><br><span class="line">            sum+=cost</span><br><span class="line">        thata = thata-alpha*sum</span><br><span class="line">        result.append(np.linalg.norm(thata-err))</span><br><span class="line">        <span class="hljs-keyword">if</span> np.linalg.norm(thata-err)&lt;epsilon:<span class="hljs-comment">#判断是否收敛</span></span><br><span class="line">            finish = <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            err=thata<span class="hljs-comment">#没有则将当前thata向量赋值给err，作为下次判断参数</span></span><br><span class="line">    <span class="hljs-keyword">print</span> (<span class="hljs-string">f'SGD结果:\tloop——counts： [%d]\tthata[%f,%f]'</span>%(count,thata[<span class="hljs-number">0</span>],thata[<span class="hljs-number">1</span>]))</span><br><span class="line">    <span class="hljs-keyword">return</span> thata,result</span><br><span class="line"><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">'__main__'</span>:</span><br><span class="line">    result=[]</span><br><span class="line">    thata,result=BGD(<span class="hljs-number">0.00009</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">1e-4</span>)</span><br><span class="line">    slope,intercept,r_value,p_value,slope_std_error=stats.linregress(x,y)</span><br><span class="line">    print(<span class="hljs-string">f'Stata结果:\tintercept(截距)：[%s]\tslope(斜率)：[%s]'</span>%(intercept,slope))</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(result)):</span><br><span class="line">        plt.scatter(i,result[i])</span><br><span class="line">    <span class="hljs-comment">#plt.plot(x,y,'k+')</span></span><br><span class="line">    <span class="hljs-comment">#plt.plot(x,thata[1]*x+thata[0],'r')</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>  <strong>结果如下</strong></p><img src="https://s2.ax1x.com/2019/08/03/esCm5T.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradient Descent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-means</title>
      <link href="/Skr-king.github.io/K-means.html/"/>
      <url>/Skr-king.github.io/K-means.html/</url>
      
        <content type="html"><![CDATA[<p> 天空在高又怎样，抬起脚尖就可以离太阳就更近一点。<a id="more"></a></p><h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><p>对于”监督学习”(supervised learning)，其训练样本是带有标记信息的，并且监督学习的目的是：对带有标记的数据集进行模型学习，从而便于对新的样本进行分类。而在“无监督学习”(unsupervised learning)中，训练样本的标记信息是未知的，目标是通过对无标记训练样本的学习来揭示数据的内在性质及规律，为进一步的数据分析提供基础。对于无监督学习，应用最广的便是”聚类”(clustering)。</p><p>聚类是一种无监督的学习，它将相似的对象归到同一簇中。聚类的方法几乎可以应用所有对象，簇内的对象越相似，聚类的效果就越好。K-means算法中的k表示的是聚类为k个簇，means代表取每一个聚类中数据值的均值作为该簇的中心，或者称为质心，即用每一个的类的质心对该簇进行描述。</p><p>　　聚类和分类最大的不同在于，分类的目标是事先已知的，而聚类则不一样，聚类事先不知道目标变量是什么，类别没有像分类那样被预先定义出来，所以，聚类有时也叫无监督学习。</p><p>　　聚类分析试图将相似的对象归入同一簇，将不相似的对象归为不同簇，那么，显然需要一种合适的相似度计算方法，我们已知的有很多相似度的计算方法，比如欧氏距离，余弦距离，汉明距离等。事实上，我们应该根据具体的应用来选取合适的相似度计算方法。</p><p>“聚类算法”试图将数据集中的样本划分为若干个通常是不相交的子集，每个子集称为一个“簇”(cluster)，通过这样的划分，每个簇可能对应于一些潜在的概念或类别。</p><p>图解</p><p><a href="https://imgchr.com/i/e8BKPI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/29/e8BKPI.png" alt="e8BKPI.png" border="0"></a></p><p>上图是未做标记的样本集，通过他们的分布，我们很容易对上图中的样本做出以下几种划分。</p><p>当需要将其划分为两个簇时，即 k=2 时：</p><img src="https://s2.ax1x.com/2019/07/29/e8Btaj.png" alt="e8Btaj.png" border="0"><p>当需要将其划分为四个簇时，即 k=4 时：</p><img src="https://s2.ax1x.com/2019/07/29/e8Bain.png" alt="e8Bain.png" border="0"><p>聚类方法</p><p>1.K-means</p><p>2.DBSCAN聚类</p><p>3.DBSCAN笑脸聚类</p><h1 id="k-means-无监督"><a href="#k-means-无监督" class="headerlink" title="k-means (无监督)"></a>k-means (无监督)</h1><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p>kmeans算法又名k均值算法。其算法思想大致为：先从样本集中随机选取 k 个样本作为簇中心，并计算所有样本与这 k 个“簇中心”的距离，对于每一个样本，将其划分到与其距离最近的“簇中心”所在的簇中，对于新的簇计算各个簇的新的“簇中心”。</p><p>根据以上描述，我们大致可以猜测到实现kmeans算法的主要三点：   </p><p>（1）簇个数 k 的选择   </p><p>（2）各个样本点到“簇中心”的距离   </p><p>（3）根据新划分的簇，更新“簇中心”</p><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>（1）K值的选择</p><p>k 的选择一般是按照实际需求进行决定，或在实现算法时直接给定 k 值。</p><p>（2）距离的度量</p><img src="https://s2.ax1x.com/2019/07/29/e8BMGt.png" alt="e8BMGt.png" border="0"><p>距离的度量的方法有以下几种</p><p>1.有序性距离度量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）闵科夫斯基距离</span><br><span class="line">（2）欧式距离</span><br><span class="line">（3）曼哈顿距离</span><br><span class="line">（4）皮尔逊系数</span><br></pre></td></tr></table></figure><p>2.无序属性距离度量</p><p>3.混合属性距离度量</p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>1、为中心向量c1, c2, …, ck初始化k个种子</p><p>2、分组:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）将样本分配给距离其最近的中心向量</span><br><span class="line">（2）由这些样本构造不相交（ non-overlapping ）的聚类</span><br></pre></td></tr></table></figure><p>3、确定中心:</p><p>用各个聚类的中心向量作为新的中心</p><p>4、重复分组和确定中心的步骤，直至算法收敛。</p><p>3、算法 k-means算法</p><p>输入：簇的数目k和包含n个对象的数据库。</p><p>输出：k个簇，使平方误差准则最小。</p><p>算法步骤：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.为每个聚类确定一个初始聚类中心，这样就有K 个初始聚类中心。</span><br><span class="line">2.将样本集中的样本按照最小距离原则分配到最邻近聚类</span><br><span class="line">3.使用每个聚类中的样本均值作为新的聚类中心。</span><br><span class="line">4.重复步骤2.3直到聚类中心不再变化。</span><br><span class="line">5.结束，得到K个聚类</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/07/29/e8BNIs.png" alt="e8BNIs.png" border="0"><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><img src="https://s2.ax1x.com/2019/07/29/e8B3M8.png" alt="e8B3M8.png" border="0"><p>为避免运行时间过长，通常设置一个最大运行轮数或最小调整幅度阈值，若达到最大轮数或调整幅度小于阈值，则停止运行。</p><h3 id="K-means算法分析"><a href="#K-means算法分析" class="headerlink" title="K-means算法分析"></a>K-means算法分析</h3><p><strong>1、k-means算法的性能分析</strong></p><p>主要优点：</p><p>是解决聚类问题的一种经典算法，简单、快速。</p><p>对处理大数据集，该算法是相对可伸缩和高效率的。因为它的复杂度是0 (n k t ) , 其中, n 是所有对象的数目, k 是簇的数目, t 是迭代的次数。通常k &lt; &lt;n 且t &lt; &lt;n 。</p><p>当结果簇是密集的，而簇与簇之间区别明显时, 它的效果较好。</p><p><strong>主要缺点</strong></p><p>(1)、在簇的平均值可被定义的情况下才能使用，这对于处理符号属性的数据不适用。</p><p>(2)、在 K-means 算法中 K 是事先给定的，这个 K 值的选定是非常难以估计的。很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适；</p><p>(3)、在 K-means 算法中，首先需要根据初始聚类中心来确定一个初始划分，然后对初始划分进行优化。这个初始聚类中心的选择对聚类结果有较大的影响，一旦初始值选择的不好，可能无法得到有效的聚类结果；</p><p>(4)、该算法需要不断地进行样本分类调整，不断地计算调整后的新的聚类中心，因此当数据量非常大时，算法的时间开销是非常大的；</p><p>(5)、若簇中含有异常点，将导致均值偏离严重（即:对噪声和孤立点数据敏感）；</p><p>(6)、不适用于发现非凸形状的簇或者大小差别很大的簇。</p><p><strong>K-Means算法对于不同的初始值，可能会导致不同结果。解决方法：</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.多设置一些不同的初值，对比最后的运算结果）一直到结果趋于稳定结束，比较耗时和浪费资源</span><br><span class="line">2.很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适。这也是 K-means 算法的一个不足。有的算法是通过类的自动合并和分裂，得到较为合理的类型数目 K.</span><br></pre></td></tr></table></figure><p><strong>2、k-means算法的改进方法——k-prototype算法</strong></p><p>k-Prototype算法：可以对离散与数值属性两种混合的数据进行聚类，在k-prototype中定义了一个对数值与离散属性都计算的相异性度量标准。</p><p>K-Prototype算法是结合K-Means与K-modes算法，针对混合属性的，解决2个核心问题如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.度量具有混合属性的方法是，数值属性采用K-means方法得到P1，分类属性采用K-modes方法P2，那么D=P1+a*P2，a是权重，如果觉得分类属性重要，则增加a，否则减少a，a=0时即只有数值属性</span><br><span class="line"></span><br><span class="line">2.更新一个簇的中心的方法，方法是结合K-Means与K-modes的更新方法。</span><br><span class="line"></span><br><span class="line">3、k-means算法的改进方法——k-中心点算法</span><br></pre></td></tr></table></figure><p>k-中心点算法：k -means算法对于孤立点是敏感的。为了解决这个问题，不采用簇中的平均值作为参照点，可以选用簇中位置最中心的对象，即中心点作为参照点。这样划分方法仍然是基于最小化所有对象与其参照点之间的相异度之和的原则来执行的。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://s2.ax1x.com/2019/07/29/e8BdGq.jpg" alt="e8BdGq.jpg" border="0"><img src="https://s2.ax1x.com/2019/07/29/e8BYZQ.jpg" alt border="0"></p><img src="https://s2.ax1x.com/2019/07/29/e8BQRP.jpg" alt="e8BQRP.jpg" border="0"><p>由上可以看出，第一次迭代后，总体平均误差值52.25~25.65，显著减小。由于在两次迭代中，簇中心不变，所以停止迭代过程，算法停止。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">5</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]</span><br><span class="line">]</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(data)):</span><br><span class="line">    plt.scatter(data[i][<span class="hljs-number">0</span>],data[i][<span class="hljs-number">1</span>],color=<span class="hljs-string">'r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/07/29/e8B8sS.png" alt="e8B8sS.png" border="0"><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">data_n= np.mat(data)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">center</span><span class="hljs-params">(data ,k)</span>:</span></span><br><span class="line">    dim = np.shape(data)[<span class="hljs-number">1</span>]</span><br><span class="line">    cen_M = np.mat(np.zeros((k,dim)))</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(dim):</span><br><span class="line">        minJ = min(data[:,i])</span><br><span class="line">        rangeJ = float(max(data[:,i])-minJ)</span><br><span class="line">        <span class="hljs-comment">#print()</span></span><br><span class="line">        <span class="hljs-comment">#print('\n')</span></span><br><span class="line">        <span class="hljs-comment">#print(minJ)</span></span><br><span class="line">        cen_M[:,i] = np.mat(minJ + rangeJ * np.random.rand(k,<span class="hljs-number">1</span>))</span><br><span class="line">    <span class="hljs-comment">#print(data)   </span></span><br><span class="line">    <span class="hljs-keyword">return</span> cen_M</span><br><span class="line"><span class="hljs-comment">#center(data_n,k)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kmeans</span><span class="hljs-params">(data,k)</span>:</span></span><br><span class="line">    m = np.shape(data)[<span class="hljs-number">0</span>]<span class="hljs-comment">#列的大小</span></span><br><span class="line">    classassment = np.mat(np.zeros((m,<span class="hljs-number">2</span>)))</span><br><span class="line">    centerpoint = center(data,k)</span><br><span class="line">    Flag = <span class="hljs-literal">True</span></span><br><span class="line">    conut = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> Flag:</span><br><span class="line">        Flag = <span class="hljs-literal">False</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):</span><br><span class="line">            mindis=np.inf ; minindex=<span class="hljs-number">-1</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">                disJ = np.linalg.norm(np.array(centerpoint[j,:])-np.array(data[i,:]))</span><br><span class="line">                </span><br><span class="line">                <span class="hljs-keyword">if</span> disJ &lt; mindis:</span><br><span class="line">                    mindis = disJ; minindex = j;</span><br><span class="line">            <span class="hljs-keyword">if</span> classassment[i,<span class="hljs-number">0</span>] !=minindex:</span><br><span class="line">                Flag = <span class="hljs-literal">True</span></span><br><span class="line">            classassment[i,:] = minindex,mindis**<span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-comment">#print(classassment)</span></span><br><span class="line">            <span class="hljs-keyword">for</span> cent <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">                ptsInClust = data[np.nonzero(classassment[:,<span class="hljs-number">0</span>].A==cent)[<span class="hljs-number">0</span>]]<span class="hljs-comment">#get all the point in this cluster</span></span><br><span class="line">                centerpoint[cent,:] = np.mean(ptsInClust, axis=<span class="hljs-number">0</span>)<span class="hljs-comment">#get all the point in this cluster</span></span><br><span class="line">                  </span><br><span class="line">             </span><br><span class="line">    <span class="hljs-keyword">return</span> centerpoint,classassment</span><br><span class="line">            </span><br><span class="line">centerpoint,classassment=kmeans(data_n,k)            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showCluster</span><span class="hljs-params">(dataSet, k, centroids, clusterAssment)</span>:</span></span><br><span class="line">    <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">    数据可视化,只能画二维的图（若是三维的坐标图则直接返回1）</span></span><br><span class="line"><span class="hljs-string">    '''</span></span><br><span class="line">    numSamples, dim = dataSet.shape</span><br><span class="line">    mark = [<span class="hljs-string">'or'</span>, <span class="hljs-string">'ob'</span>, <span class="hljs-string">'og'</span>, <span class="hljs-string">'ok'</span>,<span class="hljs-string">'oy'</span>,<span class="hljs-string">'om'</span>,<span class="hljs-string">'oc'</span>, <span class="hljs-string">'^r'</span>, <span class="hljs-string">'+r'</span>, <span class="hljs-string">'sr'</span>, <span class="hljs-string">'dr'</span>, <span class="hljs-string">'&lt;r'</span>, <span class="hljs-string">'pr'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># draw all samples</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(numSamples):</span><br><span class="line">        markIndex = int(clusterAssment[i, <span class="hljs-number">0</span>])</span><br><span class="line">        plt.plot(dataSet[i, <span class="hljs-number">0</span>], dataSet[i, <span class="hljs-number">1</span>], mark[markIndex])</span><br><span class="line"></span><br><span class="line">    mark = [<span class="hljs-string">'Pr'</span>, <span class="hljs-string">'Pb'</span>, <span class="hljs-string">'Pg'</span>, <span class="hljs-string">'Pk'</span>,<span class="hljs-string">'Py'</span>,<span class="hljs-string">'Pm'</span>,<span class="hljs-string">'Pc'</span>,<span class="hljs-string">'^b'</span>, <span class="hljs-string">'+b'</span>, <span class="hljs-string">'sb'</span>, <span class="hljs-string">'db'</span>, <span class="hljs-string">'&lt;b'</span>, <span class="hljs-string">'pb'</span>]</span><br><span class="line">    <span class="hljs-comment"># draw the centroids</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">        plt.plot(centroids[i, <span class="hljs-number">0</span>], centroids[i, <span class="hljs-number">1</span>], mark[i], markersize = <span class="hljs-number">12</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">showCluster(data_n,<span class="hljs-number">2</span>,centerpoint,classassment)</span><br><span class="line">print(data_n)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/07/29/e8BnIA.png" alt="e8BnIA.png" border="0"><h3 id="knn-k-means-对比"><a href="#knn-k-means-对比" class="headerlink" title="knn k-means 对比"></a>knn k-means 对比</h3><img src="https://s2.ax1x.com/2019/07/29/e8BGqg.png" alt="e8BGqg.png" border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K-means </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matrix Factorization For Recommendation System</title>
      <link href="/Skr-king.github.io/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.html/"/>
      <url>/Skr-king.github.io/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E4%B9%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.html/</url>
      
        <content type="html"><![CDATA[<p> 云是雨的梦，雨是云的前生。<a id="more"></a></p><h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><p>矩阵分解是将矩阵分解为数个矩阵的乘积，用矩阵分解做协同过滤是广泛使用的方法</p><p>常见的有三种：</p><p>1.三角分解法</p><p>2.QR分解法</p><p>3.奇异值分解法</p><h1 id="Matrix-Decomposition-Method"><a href="#Matrix-Decomposition-Method" class="headerlink" title="Matrix Decomposition Method"></a>Matrix Decomposition Method</h1><h2 id="奇异值分解SVD"><a href="#奇异值分解SVD" class="headerlink" title="奇异值分解SVD"></a>奇异值分解SVD</h2><p>原始的SVD又名奇异值分解，如果是用户评分矩阵，首先需要对缺失值进行简单的不全，比如用全局平均，然后用SVD进行分解</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/1.png" alt></p><p>其中，R为原始的评分矩阵，维度是mn，U和V分贝是一个km和kn的正交矩阵，S为kk的对角矩阵，对角线上的每一个元素都是矩阵的奇异值。这种纯数学的方法计算量特别大，实际应用中的数据根本处理不了。Simon Funk的Funk-SVD方法解决了这个问题，思想很简单：直接通过训练集的观察值利用最小化RMSE学习P、Q矩阵，这就是机器学习的思想了。</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/2.png" alt></p><h2 id="SVD"><a href="#SVD" class="headerlink" title="SVD++"></a>SVD++</h2><p>SVD矩阵分解非常成功，有很多的迭代的方法，最有名的就是SVD++了。提SVD++之前，我们先看一个简单的BiasSVD：</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/3.png" alt></p><ul><li>u 为训练集中所有记录的平均全局数</li><li>b_u 为用户的偏置项，表示用户的评分偏好</li><li>b_i 为物品的偏置项，表示物品的本身质量</li></ul><p>如果将用户历史行为对用户评分预测影响考虑进来就是SVD++算法：</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/4.png" alt></p><p>SVD++的核心思想是把基于领域的itemCF算法用矩阵分解的方法实现，转换的方法是这样的：</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/5.png" alt></p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>1.FM</p><p>2.隐式反馈矩阵分解</p><p>3.基于特征的矩阵分解</p><h1 id="MF-For-Recommendation-System"><a href="#MF-For-Recommendation-System" class="headerlink" title="MF For Recommendation System"></a>MF For Recommendation System</h1><p>对于推荐系统来说存在两大场景即评分预测（rating prediction）与Top-N推荐（item recommendation，item ranking）。评分预测场景主要用于评价网站，比如用户给自己看过的电影评多少分（MovieLens），或者用户给自己看过的书籍评价多少分（Douban）。其中矩阵分解技术主要应用于该场景。Top-N推荐场景主要用于购物网站或者一般拿不到显式评分信息的网站，即通过用户的隐式反馈信息来给用户推荐一个可能感兴趣的列表以供其参考。</p><p>有如下R（5，4）的打分矩阵：（“-”表示用户没有打分），其中打分矩阵R（n，m）是n行和m列，n表示user个数，m表示iten个数</p><p>  <img src="/Skr-king.github.io/矩阵分解之推荐系统.html/6.png" alt></p><p>那么，如何根据目前的矩阵R（5,4）如何对未打分的商品进行评分的预测（如何得到分值为0的用户的打分值）？</p><p>——矩阵分解的思想可以解决这个问题，其实这种思想可以看作是有监督的机器学习问题（回归问题）。</p><p>矩阵R可以近似表示为P与Q的乘积：R（n,m）≈ P(n,K)*Q(K,m)</p><p>矩阵分解的过程中，将原始的评分矩阵分解成两个矩阵和的乘积：</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/16.jpg" alt></p><p>矩阵P(n,K)表示n个user和K个特征之间的关系矩阵，这K个特征是一个中间变量，矩阵Q(K,m)的转置是矩阵Q(m,K)，矩阵Q(m,K)表示m个item和K个特征之间的关系矩阵，这里的K值是自己控制的，可以使用交叉验证的方法获得最佳的K值。为了得到近似的R(n,m)，必须求出矩阵P和Q，如何求它们呢？</p><p><strong>步骤</strong></p><p>1.首先令</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/7.jpg" alt></p><p>2.损失函数： 使用原始的评分矩阵与重新构建的评分矩阵之间的误差的平方作为损失函数。</p><p>如果R（i，j）已知，则R（i，j）的误差平方和为</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/8.jpg" alt></p><p>最终，需要求解所有的非“-”项的损失之和最小值：</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/9.jpg" alt></p><p>3.使用梯度下降法获得修正的p和q分量：</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/10.jpg" alt></p><p>根据梯度方向更新变量</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/11.jpg" alt></p><p>4.不停迭代直至算法最终收敛（直到sum（e^2）&lt;=阈值</p><p><strong>加入正则项</strong></p><p>1.第一步同上</p><p>2.在通常求解过程中，为了能够有较好的泛化能力，会在损失函数中加入正则项对参数进行约束</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/12.png" alt></p><p>也就是</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/13.png" alt></p><p>3.使用梯度下降法获得修正的p和q</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/14.png" alt></p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/15.png" alt></p><p>4.不停迭代直至算法最终收敛（直到sum（e^2）&lt;=阈值</p><p>【预测】利用上述的过程，我们可以得到矩阵，这样便可以为用户 i 对商品 j 进行打分</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#导包</span></span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-comment">#参数设置</span></span><br><span class="line">alph = <span class="hljs-number">0.00049</span></span><br><span class="line">step = <span class="hljs-number">9000</span></span><br><span class="line">beta = <span class="hljs-number">0.05</span></span><br><span class="line">K = <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-comment">#   MF</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">MF</span><span class="hljs-params">(r,p,q,alph,step,beta)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    count = <span class="hljs-number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span>(count&lt;step):</span><br><span class="line">        count+=<span class="hljs-number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">                <span class="hljs-comment">#构建损失函数</span></span><br><span class="line">                <span class="hljs-keyword">if</span> r[i][j]&gt;<span class="hljs-number">0</span>:</span><br><span class="line">                    eij = r[i][j] - np.dot(p[i,:],q[:,j])</span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(K):</span><br><span class="line">                        pd_p = <span class="hljs-number">-2</span>*eij*q[k][j]+beta * p[i][k]</span><br><span class="line">                        pd_q = <span class="hljs-number">-2</span>*eij*p[i][k]+beta * q[k][j]</span><br><span class="line">                        p[i][k] -=  alph*pd_p</span><br><span class="line">                        q[k][j] -=  alph*pd_q</span><br><span class="line">       </span><br><span class="line">        e  = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">                 <span class="hljs-keyword">if</span> r[i][j]&gt;<span class="hljs-number">0</span> :</span><br><span class="line">                    eij = r[i][j] - np.dot(p[i,:],q[:,j])</span><br><span class="line">                    e += eij**<span class="hljs-number">2</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(K):</span><br><span class="line">                        e += (beta/<span class="hljs-number">2</span>)*(p[i][k]**<span class="hljs-number">2</span>+q[k][j]**<span class="hljs-number">2</span>)</span><br><span class="line">        result.append(e)</span><br><span class="line">       <span class="hljs-comment"># print(e)</span></span><br><span class="line">        </span><br><span class="line">    <span class="hljs-keyword">return</span> p , q , result</span><br><span class="line">   <span class="hljs-comment">#原始矩阵</span></span><br><span class="line">r = [</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],</span><br><span class="line">    [<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]</span><br><span class="line">]</span><br><span class="line">r = np.array(r)</span><br><span class="line">print(<span class="hljs-string">f"输入矩阵为\n<span class="hljs-subst">&#123;r&#125;</span>"</span>)</span><br><span class="line">p = np.random.rand(<span class="hljs-number">5</span>,K)</span><br><span class="line">q = np.random.rand(K,<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">new_p,new_q,result = MF(r,p,q,alph,step,beta)</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">f'输出矩阵为\n<span class="hljs-subst">&#123;np.dot(new_p,new_q)&#125;</span>'</span> )</span><br><span class="line">plt.plot(range(len(result)),result)</span><br></pre></td></tr></table></figure><p>最后结果如图</p><p><img src="/Skr-king.github.io/矩阵分解之推荐系统.html/17.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gobang？</title>
      <link href="/Skr-king.github.io/%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%9F.html/"/>
      <url>/Skr-king.github.io/%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%9F.html/</url>
      
        <content type="html"><![CDATA[<p> 时间带着明显的恶意，缓缓在我的身上流逝</p><a id="more"></a><p>向大家介绍一款游戏，就是五子棋。</p><p>什么，五子棋？？？</p><p>没错，就是高大上的五子棋，这是一个基于神经网络用Python写的小游戏五子棋，经过大量的训练，已经很优秀了呢！！！不知道你敢不敢与他战斗啊.</p><p>Introduce to you a game, that is gobang.<br>What, Gobang???<br>Yes, it’s Gobang in Gaoda. It’s a small game written by Python based on neural network. After a lot of training, it’s already excellent!!! I wonder if you dare to fight him.</p><p><a href="https://github.com/AngelNI/AlphaZero_Gomoku" target="_blank" rel="noopener">Github项目地址</a></p><p><img src="/Skr-king.github.io/五子棋？.html/2.gif" alt></p><p><img src="/Skr-king.github.io/五子棋？.html/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN--tensorflow--代码学习</title>
      <link href="/Skr-king.github.io/CNN--tensorflow-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0.html/"/>
      <url>/Skr-king.github.io/CNN--tensorflow-%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0.html/</url>
      
        <content type="html"><![CDATA[<p> 不知道未来如何变化，总有人相信童话。</p><a id="more"></a><p>这是以tensorflow为框架，写的关于MNIST数据识别的卷积神经网络的python代码，这个代码是自己一点一点把别人的代码打印到Calab，修改，运行，再修改，再运行，我是代码的生产者，也是代码的搬运工，哈哈~</p><p>发到博客上，也很方便看，啊哈哈哈。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf </span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow.examples.tutorials.mnist.input_data <span class="hljs-keyword">as</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="hljs-string">"MNIST_data/"</span>, one_hot=<span class="hljs-literal">True</span>)     <span class="hljs-comment">#下载并加载mnist数据</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, <span class="hljs-number">784</span>])                        <span class="hljs-comment">#输入的数据占位符</span></span><br><span class="line">y_actual = tf.placeholder(tf.float32, shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">10</span>])            <span class="hljs-comment">#输入的标签占位符</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的权值 W</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weight_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.truncated_normal(shape, stddev=<span class="hljs-number">0.1</span>)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的偏置项 b</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bias_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.constant(<span class="hljs-number">0.1</span>, shape=shape)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建卷积层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span><span class="hljs-params">(x, W)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建池化层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_pool</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],strides=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的权值 W</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weight_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.truncated_normal(shape, stddev=<span class="hljs-number">0.1</span>)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的偏置项 b</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bias_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.constant(<span class="hljs-number">0.1</span>, shape=shape)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建卷积层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span><span class="hljs-params">(x, W)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建池化层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_pool</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],strides=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#构建网络</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">1</span>])         <span class="hljs-comment">#转换输入数据shape,以便于用于网络中</span></span><br><span class="line">W_conv1 = weight_variable([<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>])      </span><br><span class="line">b_conv1 = bias_variable([<span class="hljs-number">32</span>])       </span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)     <span class="hljs-comment">#第一个卷积层</span></span><br><span class="line">h_pool1 = max_pool(h_conv1)                                  <span class="hljs-comment">#第一个池化层</span></span><br><span class="line"></span><br><span class="line">W_conv2 = weight_variable([<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="hljs-number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)      <span class="hljs-comment">#第二个卷积层</span></span><br><span class="line">h_pool2 = max_pool(h_conv2)                                   <span class="hljs-comment">#第二个池化层</span></span><br><span class="line"></span><br><span class="line">W_fc1 = weight_variable([<span class="hljs-number">7</span> * <span class="hljs-number">7</span> * <span class="hljs-number">64</span>, <span class="hljs-number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="hljs-number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="hljs-number">-1</span>, <span class="hljs-number">7</span>*<span class="hljs-number">7</span>*<span class="hljs-number">64</span>])              <span class="hljs-comment">#reshape成向量</span></span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)    <span class="hljs-comment">#第一个全连接层</span></span><br><span class="line"></span><br><span class="line">keep_prob = tf.placeholder(<span class="hljs-string">"float"</span>) </span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)                  <span class="hljs-comment">#dropout层</span></span><br><span class="line"></span><br><span class="line">W_fc2 = weight_variable([<span class="hljs-number">1024</span>, <span class="hljs-number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="hljs-number">10</span>])</span><br><span class="line">y_predict=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)   <span class="hljs-comment">#softmax层</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_actual*tf.log(y_predict))     <span class="hljs-comment">#交叉熵</span></span><br><span class="line"></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="hljs-number">1e-3</span>).minimize(cross_entropy)    <span class="hljs-comment">#梯度下降法</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_predict,<span class="hljs-number">1</span>), tf.argmax(y_actual,<span class="hljs-number">1</span>))    </span><br><span class="line"></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="hljs-string">"float"</span>))                 <span class="hljs-comment">#精确度计算</span></span><br><span class="line">sess=tf.InteractiveSession()                          </span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20000</span>):</span><br><span class="line">  batch = mnist.train.next_batch(<span class="hljs-number">50</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> i%<span class="hljs-number">100</span> == <span class="hljs-number">0</span>:                  <span class="hljs-comment">#训练100次，验证一次</span></span><br><span class="line">    train_acc = accuracy.eval(feed_dict=&#123;x:batch[<span class="hljs-number">0</span>], y_actual: batch[<span class="hljs-number">1</span>], keep_prob: <span class="hljs-number">1.0</span>&#125;)</span><br><span class="line">    print(<span class="hljs-string">'step %d, training accuracy %g'</span>%(i,train_acc))</span><br><span class="line">    train_step.run(feed_dict=&#123;x: batch[<span class="hljs-number">0</span>], y_actual: batch[<span class="hljs-number">1</span>], keep_prob: <span class="hljs-number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line">test_acc=accuracy.eval(feed_dict=&#123;x: mnist.test.images, y_actual: mnist.test.labels, keep_prob: <span class="hljs-number">1.0</span>&#125;)</span><br><span class="line">print(<span class="hljs-string">"test accuracy %g"</span>%test_acc)</span><br></pre></td></tr></table></figure><p><img src="/Skr-king.github.io/CNN--tensorflow-代码学习.html/1.png" alt></p><p>博文参考：<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/5-03-CNN1/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/5-03-CNN1/</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN-Self-practice</title>
      <link href="/Skr-king.github.io/KNN-%E8%87%AA%E6%88%91%E7%BB%83%E4%B9%A0.html/"/>
      <url>/Skr-king.github.io/KNN-%E8%87%AA%E6%88%91%E7%BB%83%E4%B9%A0.html/</url>
      
        <content type="html"><![CDATA[<p> 有一天我结婚了，你一定要来哦，因为没有新娘，那该有多尴尬.</p><a id="more"></a><p>  这是我的自己写的第一个KNN比较简单的练习案例，有关于KNN的介绍请参考我的上篇博文</p><p>This is my first simple exercise case of KNN written by myself. For an introduction to KNN, please refer to my last blog post.</p><p> <a href="https://skr-king.github.io/Skr-king.github.io/KNN%E2%80%94%E2%80%94K%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95.html/#more">我在这里</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#导包</span></span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">import</span> operator</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-comment">#自我创建数据集</span></span><br><span class="line">data=[</span><br><span class="line">    [<span class="hljs-number">0.8</span>,<span class="hljs-number">1.8</span>],</span><br><span class="line">    [<span class="hljs-number">0.9</span>,<span class="hljs-number">2.1</span>],</span><br><span class="line">    [<span class="hljs-number">1.0</span>,<span class="hljs-number">1.5</span>],</span><br><span class="line">    [<span class="hljs-number">1.2</span>,<span class="hljs-number">1.9</span>],</span><br><span class="line">    [<span class="hljs-number">1.3</span>,<span class="hljs-number">2.0</span>],</span><br><span class="line">    [<span class="hljs-number">2.5</span>,<span class="hljs-number">1.7</span>],</span><br><span class="line">    [<span class="hljs-number">2.8</span>,<span class="hljs-number">1.5</span>],</span><br><span class="line">    [<span class="hljs-number">2.5</span>,<span class="hljs-number">1.4</span>],</span><br><span class="line">    [<span class="hljs-number">2.7</span>,<span class="hljs-number">1.9</span>],</span><br><span class="line">    [<span class="hljs-number">2.6</span>,<span class="hljs-number">1.8</span>],</span><br><span class="line">    [<span class="hljs-number">1.9</span>,<span class="hljs-number">3.3</span>],</span><br><span class="line">    [<span class="hljs-number">2.0</span>,<span class="hljs-number">2.9</span>],</span><br><span class="line">    [<span class="hljs-number">2.2</span>,<span class="hljs-number">2.8</span>],</span><br><span class="line">    [<span class="hljs-number">2.1</span>,<span class="hljs-number">2.9</span>],</span><br><span class="line">    [<span class="hljs-number">1.8</span>,<span class="hljs-number">3.0</span>],</span><br><span class="line">]</span><br><span class="line">label=[<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>]</span><br><span class="line">print(label)</span><br><span class="line">train_data = np.array(data)</span><br><span class="line">print(train_data)</span><br></pre></td></tr></table></figure><p><img src="/Skr-king.github.io/KNN-自我练习.html/10.png" alt></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">x_1=[]</span><br><span class="line">y_1=[]</span><br><span class="line">x_2=[]</span><br><span class="line">y_2=[]</span><br><span class="line">x_3=[]</span><br><span class="line">y_3=[]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):</span><br><span class="line">        x_1.append(data[i][<span class="hljs-number">0</span>])</span><br><span class="line">        y_1.append(data[i][<span class="hljs-number">1</span>])</span><br><span class="line">        x_2.append(data[i+<span class="hljs-number">5</span>][<span class="hljs-number">0</span>])</span><br><span class="line">        y_2.append(data[i+<span class="hljs-number">5</span>][<span class="hljs-number">1</span>])</span><br><span class="line">        x_3.append(data[i+<span class="hljs-number">10</span>][<span class="hljs-number">0</span>])</span><br><span class="line">        y_3.append(data[i+<span class="hljs-number">10</span>][<span class="hljs-number">1</span>])</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">15</span>):</span><br><span class="line">    x.append(data[j][<span class="hljs-number">0</span>])</span><br><span class="line">    y.append(data[j][<span class="hljs-number">1</span>])</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">print(<span class="hljs-string">f'<span class="hljs-subst">&#123;x_1&#125;</span> \n <span class="hljs-subst">&#123;y_1&#125;</span>\n<span class="hljs-subst">&#123;x_2&#125;</span> \n  <span class="hljs-subst">&#123;y_2&#125;</span>\n<span class="hljs-subst">&#123;x_3&#125;</span>\n <span class="hljs-subst">&#123;y_3&#125;</span> '</span>)</span><br><span class="line">f,ax=plt.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range (<span class="hljs-number">5</span>):</span><br><span class="line">        ax.scatter(x_1[i],y_1[i],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'r'</span>,marker=<span class="hljs-string">'o'</span>)</span><br><span class="line">        ax.scatter(x_2[i],y_2[i],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'b'</span>,marker=<span class="hljs-string">'o'</span>)</span><br><span class="line">        ax.scatter(x_3[i],y_3[i],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'g'</span>,marker=<span class="hljs-string">'o'</span>)</span><br><span class="line">test = [[<span class="hljs-number">1.5</span>,<span class="hljs-number">2.85</span>]]<span class="hljs-comment">##自定义点，从图中可以看出，很明显属于第三类</span></span><br><span class="line">x_test=<span class="hljs-number">1.5</span></span><br><span class="line">y_test=<span class="hljs-number">2.85</span></span><br><span class="line">ax.scatter(test[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],test[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'m'</span>,marker = <span class="hljs-string">'x'</span>)</span><br><span class="line">test = np.array(test)</span><br></pre></td></tr></table></figure><p><img src="/Skr-king.github.io/KNN-自我练习.html/11.png" alt></p><p><img src="/Skr-king.github.io/KNN-自我练习.html/12.png" alt></p><p><strong>从图中可以看出，很明显属于第三类</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#定义距离公式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">d_euc</span><span class="hljs-params">(x, y)</span>:</span><span class="hljs-comment">#欧式距离</span></span><br><span class="line">    d = np.sqrt(np.sum(np.square(x- y)))</span><br><span class="line">    <span class="hljs-keyword">return</span> d</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">KNN</span><span class="hljs-params">(train_data,test,label,k)</span>:</span></span><br><span class="line">    distance=[]</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> train_data:</span><br><span class="line">        distance.append(d_euc(i,train_data))</span><br><span class="line">    distance = np.array(distance)</span><br><span class="line">    index = distance.argsort()  <span class="hljs-comment"># 获取按距离大小排序后的索引</span></span><br><span class="line">    <span class="hljs-comment">#print(index)</span></span><br><span class="line">    sort_dis = np.sort(distance)</span><br><span class="line">    count=&#123;&#125;</span><br><span class="line">o=<span class="hljs-number">0</span></span><br><span class="line">print(label)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index:</span><br><span class="line">   o=o+<span class="hljs-number">1</span></span><br><span class="line">    label_vote=label[i]</span><br><span class="line">    count[label_vote] = count.get(label_vote,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>   <span class="hljs-comment">##返回特定的键值，否则返回 0</span></span><br><span class="line">    <span class="hljs-keyword">if</span> o&gt;k:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line">    print(label_vote)</span><br><span class="line">print(count)</span><br><span class="line">final_outcome=majory_vote(count)</span><br><span class="line"><span class="hljs-keyword">return</span> final_outcome</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#定义决策方案——多数表决法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">majory_vote</span><span class="hljs-params">(count)</span>:</span></span><br><span class="line">    sorted_class_count = sorted(</span><br><span class="line">        count.items(), key=operator.itemgetter(<span class="hljs-number">1</span>), reverse=<span class="hljs-literal">True</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> sorted_class_count</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label=[<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>]</span><br><span class="line">test=[<span class="hljs-number">3.0</span>,<span class="hljs-number">2.0</span>]</span><br><span class="line">test = np.array(test)</span><br><span class="line">final_label = KNN(train_data,test,label, <span class="hljs-number">6</span>)</span><br><span class="line">final_label</span><br></pre></td></tr></table></figure><p>最后结果</p><p><img src="/Skr-king.github.io/KNN-自我练习.html/13.png" alt>)</p><p>可以发现最初我们看到的真实结果一样属于c类。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN——k-Nearest Neighbor</title>
      <link href="/Skr-king.github.io/KNN%E2%80%94%E2%80%94K%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95.html/"/>
      <url>/Skr-king.github.io/KNN%E2%80%94%E2%80%94K%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95.html/</url>
      
        <content type="html"><![CDATA[<p> 海绵宝宝：“派大星，你为什么叫派大星”</p><p>派大星：“因为我是上帝拍下来保护你的大星星” </p><a id="more"></a><h1 id="一、Concept"><a href="#一、Concept" class="headerlink" title="一、Concept"></a>一、Concept</h1><h2 id="1-1Language-Description"><a href="#1-1Language-Description" class="headerlink" title="1.1Language Description"></a>1.1Language Description</h2><p>K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。即是给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例（也就是所说的K个邻居）， 这K个实例的多数属于某个类，就把该输入实例分类到这个类中。</p><p>KNN 算法的核心思想和最近邻算法思想相似，都是通过寻找和未知样本相似的类别进行分类。但 NN 算法中只依赖 1 个样本进行决策，在分类时过于绝对，会造成分类效果差的情况，为解决 NN 算法的缺陷，KNN 算法采用 K 个相邻样本的方式共同决策未知样本的类别,这样在决策中容错率相对于 NN 算法就要高很多，分类效果也会更好。</p><h2 id="1-2-graphic"><a href="#1-2-graphic" class="headerlink" title="1.2 graphic"></a>1.2 graphic</h2><p>例子：要区分“猫”和“狗”，通过“claws”和“sound”两个feature来判断的话，圆形和三角形是已知分类的了，那么这个“star”代表的是哪一类呢？</p><p><img src="/Skr-king.github.io/KNN——K临近算法.html/1.png" alt></p><p>k＝3时，这三条线链接的点就是最近的三个点，那么圆形多一些，所以这个star就是属于猫。</p><p><img src="/Skr-king.github.io/KNN——K临近算法.html/2.png" alt></p><h1 id="二、Algorithmic-Description"><a href="#二、Algorithmic-Description" class="headerlink" title="二、Algorithmic Description"></a>二、Algorithmic Description</h1><h2 id="1-pseudo-code"><a href="#1-pseudo-code" class="headerlink" title="1.pseudo code"></a>1.pseudo code</h2><p><img src="/Skr-king.github.io/KNN——K临近算法.html/3.png" alt></p><h2 id="2-steps"><a href="#2-steps" class="headerlink" title="2.steps"></a>2.steps</h2><ol><li><p>初始化距离为最大值</p></li><li><p>计算未知样本和每个训练样本的距离dist</p></li><li><p>得到目前K个最邻近样本中的最大距离maxdist</p></li><li><p>如果dist小于maxdist，则将该训练样本作为K-最近邻样本</p></li><li><p>重复步骤2,3,4，直到未知样本和所有训练样本的距离都算完</p></li><li><p>统计K个最近邻样本中每个类别出现的次数</p></li><li><p>选择出现频率最大的类别作为未知样本的类别</p></li></ol><p><img src="/Skr-king.github.io/KNN——K临近算法.html/5.png" alt></p><p><img src="/Skr-king.github.io/KNN——K临近算法.html/4.png" alt></p><h1 id="三、KNN‘s-three-elements-of-model"><a href="#三、KNN‘s-three-elements-of-model" class="headerlink" title="三、KNN‘s three elements of model"></a>三、KNN‘s three elements of model</h1><h2 id="1-Distance-measure"><a href="#1-Distance-measure" class="headerlink" title="1.Distance measure"></a>1.Distance measure</h2><p>距离度量，说白了就是距离计算公式。</p><p>常见的距离计算公式有如下：</p><pre><code>1.欧氏距离2.曼哈顿距离3.余弦距离4.皮尔逊系数5.杰卡德距离6.闵可夫斯基距离7.切比雪夫距离8.汉明距离9.莱文斯坦距离</code></pre><h3 id="1-1Euclidean-distance"><a href="#1-1Euclidean-distance" class="headerlink" title="1.1Euclidean distance"></a>1.1Euclidean distance</h3><p>欧氏距离是最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，是闵可夫斯基距离=2特殊情形.</p><p><img src="/Skr-king.github.io/KNN——K临近算法.html/6.png" alt></p><pre><code>def d_euc(x, y):    d = np.sqrt(np.sum(square(x - y)))    return d</code></pre><h3 id="1-2Manhattan-Distance"><a href="#1-2Manhattan-Distance" class="headerlink" title="1.2Manhattan Distance"></a>1.2Manhattan Distance</h3><p><img src="/Skr-king.github.io/KNN——K临近算法.html/7.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def d_man(x, y):</span><br><span class="line">    </span><br><span class="line">    d = np.sum(abs(x - y))</span><br><span class="line">    </span><br><span class="line">    return d</span><br></pre></td></tr></table></figure><h2 id="2-Selection-of-K-Value"><a href="#2-Selection-of-K-Value" class="headerlink" title="2.Selection of K Value"></a>2.Selection of K Value</h2><p>不要小看了这个K值选择问题，因为它对K近邻算法的结果会产生重大影响。</p><p>1.</p><p>如果选择较小的K值，就相当于用较小的领域中的训练实例进行预测，“学习”近似误差会减小，只有与输入实例较近或相似的训练实例才会对预测结果起作用，与此同时带来的问题是“学习”的估计误差会增大，换句话说，K值的减小就意味着整体模型变得复杂，容易发生过拟合；</p><p>2.</p><p>如果选择较大的K值，就相当于用较大领域中的训练实例进行预测，其优点是可以减少学习的估计误差，但缺点是学习的近似误差会增大。这时候，与输入实例较远（不相似的）训练实例也会对预测器作用，使预测发生错误，且K值的增大就意味着整体的模型变得简单。</p><p>3.</p><p>K=N，则完全不足取，因为此时无论输入实例是什么，都只是简单的预测它属于在训练实例中最多的累，模型过于简单，忽略了训练实例中大量有用信息。</p><h2 id="3-Classification-Decision-Rules"><a href="#3-Classification-Decision-Rules" class="headerlink" title="3.Classification Decision Rules"></a>3.Classification Decision Rules</h2><p>1.多数表决法</p><p>多数表决法类似于投票的过程，也就是在 K 个邻居中选择类别最多的种类作为测试样本的类别。</p><p>2.加权表决法</p><p>根据距离的远近，对近邻的投票进行加权，距离越近则权重越大，通过权重计算结果最大值的类为测试样本的类别。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map函数的简单用法</title>
      <link href="/Skr-king.github.io/map%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95.html/"/>
      <url>/Skr-king.github.io/map%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95.html/</url>
      
        <content type="html"><![CDATA[<p> 你要开心，你要快乐，因为你是大哥，不可以难过。<a id="more"></a></p><script src="//lib.baomitu.com/jquery/3.3.1/jquery.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Neural Network Construction</title>
      <link href="/Skr-king.github.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA.html/"/>
      <url>/Skr-king.github.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA.html/</url>
      
        <content type="html"><![CDATA[<p> 啊啊啊Ｏ(≧口≦)Ｏ！！！我的第一个神经网络竟然是算出来的。<a id="more"></a></p><p>学习了简单的神经网络模型，今天出于兴趣，自己搭个神经网络的巨简单的模型，不不不，是算出来的。</p><p>这篇代码是根据我的上一篇博客<a href="https://skr-king.github.io/Skr-king.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%AE%80%E5%8D%95%E6%8E%A8%E5%AF%BC.html/#more">点我吧</a>根据推导公式写的，小白技能有限，大佬不要嘲笑啊。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#激活函数及导数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">d_sigmoid</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">1</span> - x)</span><br><span class="line">    </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> np.tanh(x)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">d_tanh</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> - np.tanh(x) * np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">##参数设置</span></span><br><span class="line">alph = <span class="hljs-number">0.5</span></span><br><span class="line">esp = <span class="hljs-number">0.01</span></span><br><span class="line">step = <span class="hljs-number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#前向传播</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">qianxiangchuanbo</span><span class="hljs-params">(init,weight,b)</span>:</span></span><br><span class="line">    <span class="hljs-comment">#输入层——&gt;隐含层</span></span><br><span class="line">    neth=[]<span class="hljs-comment">#神经元输入加权和</span></span><br><span class="line">    outh=[]<span class="hljs-comment">#神经元输出</span></span><br><span class="line">    <span class="hljs-comment">#隐含层---&gt;输出层</span></span><br><span class="line">    neto=[]<span class="hljs-comment">#输出神经元</span></span><br><span class="line">    outo=[]<span class="hljs-comment">#神经元输出</span></span><br><span class="line">    neth.append(weight[<span class="hljs-number">0</span>]*init[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">1</span>]*init[<span class="hljs-number">1</span>]+b[<span class="hljs-number">0</span>])</span><br><span class="line">    neth.append(weight[<span class="hljs-number">2</span>]*init[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">3</span>]*init[<span class="hljs-number">1</span>]+b[<span class="hljs-number">0</span>])</span><br><span class="line">    outh.append(sigmoid(neth[<span class="hljs-number">0</span>]))</span><br><span class="line">    outh.append(sigmoid(neth[<span class="hljs-number">1</span>]))</span><br><span class="line">    neto.append(weight[<span class="hljs-number">4</span>]*outh[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">5</span>]*outh[<span class="hljs-number">1</span>]+b[<span class="hljs-number">1</span>])</span><br><span class="line">    neto.append(weight[<span class="hljs-number">6</span>]*outh[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">7</span>]*outh[<span class="hljs-number">1</span>]+b[<span class="hljs-number">1</span>])</span><br><span class="line">    outo.append(sigmoid(neto[<span class="hljs-number">0</span>]))</span><br><span class="line">    outo.append(sigmoid(neto[<span class="hljs-number">1</span>]))</span><br><span class="line">    <span class="hljs-keyword">return</span> neth,outh,neto,outo</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fanxiangchuanbo</span><span class="hljs-params">(out,outo,outh)</span>:</span></span><br><span class="line">    </span><br><span class="line">    new_weight=[]</span><br><span class="line">    q=[]</span><br><span class="line">    <span class="hljs-comment">#输如层——&gt;隐藏层</span></span><br><span class="line">    a1=(-(init[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])*outo[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">0</span>]))</span><br><span class="line">    a2=(-(init[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>])*outo[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">1</span>]))</span><br><span class="line">    q.append(a1)</span><br><span class="line">    q.append(a2)</span><br><span class="line">    w1 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">4</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">6</span>]*outh[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">0</span>])*init[<span class="hljs-number">0</span>]</span><br><span class="line">    w2 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">4</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">6</span>]*outh[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">0</span>])*init[<span class="hljs-number">1</span>]</span><br><span class="line">    w3 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">5</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">7</span>]*outh[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">1</span>])*init[<span class="hljs-number">0</span>]</span><br><span class="line">    w4 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">5</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">7</span>]*outh[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">1</span>])*init[<span class="hljs-number">1</span>]</span><br><span class="line">    new_weight.append(w1)</span><br><span class="line">    new_weight.append(w2)</span><br><span class="line">    new_weight.append(w3)</span><br><span class="line">    new_weight.append(w4)</span><br><span class="line">    <span class="hljs-comment">#输出层——&gt;隐藏层</span></span><br><span class="line">    w5 = -(out[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])*outo[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">0</span>])*outh[<span class="hljs-number">0</span>]</span><br><span class="line">    w6 = -(out[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])*outo[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">0</span>])*outh[<span class="hljs-number">1</span>]</span><br><span class="line">    w7 = -(out[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>])*outo[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">1</span>])*outh[<span class="hljs-number">0</span>]</span><br><span class="line">    w8 = -(out[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>])*outo[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">1</span>])*outh[<span class="hljs-number">1</span>]</span><br><span class="line">    new_weight.append(w5)</span><br><span class="line">    new_weight.append(w6)</span><br><span class="line">    new_weight.append(w7)</span><br><span class="line">    new_weight.append(w8)</span><br><span class="line">    <span class="hljs-keyword">return</span> new_weight</span><br><span class="line"><span class="hljs-comment">#输入集</span></span><br><span class="line">init = [<span class="hljs-number">0.05</span>,<span class="hljs-number">0.10</span>]</span><br><span class="line"><span class="hljs-comment">#真实输出集</span></span><br><span class="line">out = [<span class="hljs-number">0.01</span>,<span class="hljs-number">0.99</span>]</span><br><span class="line"><span class="hljs-comment">#权重</span></span><br><span class="line">weight = [<span class="hljs-number">0.15</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">0.40</span>,<span class="hljs-number">0.45</span>,<span class="hljs-number">0.50</span>,<span class="hljs-number">0.55</span>]</span><br><span class="line"><span class="hljs-comment">#偏置项</span></span><br><span class="line">b=[<span class="hljs-number">0.35</span>,<span class="hljs-number">0.60</span>]</span><br><span class="line"></span><br><span class="line">count=<span class="hljs-number">0</span></span><br><span class="line">result = []</span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">    count=count+<span class="hljs-number">1</span></span><br><span class="line">    </span><br><span class="line">    neth,outh,neto,outo = qianxiangchuanbo(init,weight,b)</span><br><span class="line">    e=(abs(out[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])+abs(out[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>]))</span><br><span class="line">    result.append(e)</span><br><span class="line">    gd_weight = fanxiangchuanbo(out,outo,outh)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(weight)):</span><br><span class="line">        weight[i]=weight[i]-alph*gd_weight[i]</span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment"># if e&lt;esp:</span></span><br><span class="line">    <span class="hljs-comment">#    break</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> count &gt; step:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(len(result)):</span><br><span class="line">  plt.scatter(k,result[k])</span><br><span class="line">plt.show()</span><br><span class="line">print(weight)</span><br><span class="line">print(out)</span><br><span class="line">print(outo)</span><br></pre></td></tr></table></figure><p>最后的运行结果如图</p><p><img src="/Skr-king.github.io/我的第一个神经网络搭建.html/1.png" alt></p><p>由于此代码只运行了5000次，可以看出与实际的差距还是很大的，如果感兴趣，你可以试试增大迭代次数，或者控制精度。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial Neural Networks——Activation Funcation</title>
      <link href="/Skr-king.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.html/"/>
      <url>/Skr-king.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.html/</url>
      
        <content type="html"><![CDATA[<p> 有时候不敢去拥有，因为害怕失去，所以非常努力地去奋斗，让自己累，让自己不去想。<a id="more"></a></p><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><p><strong>定义</strong></p><p>所谓激活函数（Activation Function），就是在人工神经网络的神经元上运行的函数，负责将神经元的输入映射到输出端。</p><p>判定每个神经元的输出</p><p>通俗来说，激活函数一般是非线性函数，其作用是能够给神经网络加入一些非线性因素，使得神经网络可以更好地解决较为复杂的问题。</p><p><strong>常见的激活函数</strong></p><p>1.sigmoid</p><p>2.tanh</p><p>3.ReLu</p><p>4.ELU</p><p>5.PReLU</p><p>这里简单的对前三个进行介绍</p><h2 id="1-sigmoid"><a href="#1-sigmoid" class="headerlink" title="1.sigmoid"></a>1.sigmoid</h2><p><img src="/Skr-king.github.io/神经网络之激活函数.html/1.png" alt></p><p>Sigmoid 函数的取值范围在 (0,1) 之间，单调连续，求导容易，一般用于二分类神经网络的输出层。</p><p>sigmoid函数图像如图</p><p><img src="/Skr-king.github.io/神经网络之激活函数.html/9.png" alt></p><p>sigmoid函数求导</p><p><img src="/Skr-king.github.io/神经网络之激活函数.html/2.jpg" alt></p><p>缺点：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Sigmoid 函数饱和区范围广，容易造成梯度消失</span><br><span class="line"></span><br><span class="line">2.参数矩阵 W 的每个元素都会朝着同一个方向变化，同为正或同为负。这对于神经网络训练是不利的，所有的 W 都朝着同一符号方向变化会减小训练速度，增加模型训练时间。</span><br><span class="line"></span><br><span class="line">3.Sigmoid 函数包含 exp 指数运算，运算成本也比较大</span><br></pre></td></tr></table></figure><h2 id="2-tanh"><a href="#2-tanh" class="headerlink" title="2.tanh"></a>2.tanh</h2><p><img src="/Skr-king.github.io/神经网络之激活函数.html/3.png" alt></p><p>图像如图</p><p><img src="/Skr-king.github.io/神经网络之激活函数.html/4.png" alt></p><p>tanh 函数的取值范围在 (-1,1) 之间，单调连续，求导容易。</p><p>相比于 Sigmoid 函数，tanh 函数的优点主要有两个：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.其一，收敛速度更快，如下图所示，tanh 函数线性区斜率较 Sigmoid 更大一些。在此区域内训练速度会更快。</span><br><span class="line">2.其二，tanh 函数输出均值为零，也就不存在 Sigmoid 函数中 dW 恒为正或者恒为负，从而影响训练速度的问题。</span><br></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tanh 函数与 Sigmoid 函数一样，也存在饱和区梯度消失问题。其饱和区甚至比 Sigmoid 还要大一些，但不明显。</span><br></pre></td></tr></table></figure><h2 id="3-ReLu"><a href="#3-ReLu" class="headerlink" title="3.ReLu"></a>3.ReLu</h2><p><img src="/Skr-king.github.io/神经网络之激活函数.html/5.png" alt></p><p><img src="/Skr-king.github.io/神经网络之激活函数.html/6.png" alt></p><p>优点：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.没有饱和区，不存在梯度消失问题。</span><br><span class="line"></span><br><span class="line">2.没有复杂的指数运算，计算简单、效率提高。</span><br><span class="line"></span><br><span class="line">3.实际收敛速度较快，大约是 Sigmoid/tanh 的 6 倍。</span><br><span class="line"></span><br><span class="line">4.比 Sigmoid 更符合生物学神经激活机制。</span><br></pre></td></tr></table></figure><p>缺点： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. ReLU 的输出仍然是非零对称的，可能出现 dW 恒为正或者恒为负，从而影响训练速度。</span><br><span class="line">2. 当 x&lt;0 时，ReLU 输出总为零。该神经元输出为零，则反向传播时，权重、参数的梯度横为零，造成权重、参数永远不会更新，即造成神经元失效，形成了“死神经元”。</span><br></pre></td></tr></table></figure><h2 id="如何选择激活函数"><a href="#如何选择激活函数" class="headerlink" title="如何选择激活函数"></a><strong>如何选择激活函数</strong></h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.首选 ReLU，速度快，但是要注意学习速率的调整，</span><br><span class="line"></span><br><span class="line">2.如果 ReLU 效果欠佳,尝试使用 Leaky ReLU、ELU 或 Maxout 等变种。</span><br><span class="line"></span><br><span class="line">3.可以尝试使用 tanh。</span><br><span class="line"></span><br><span class="line">4.Sigmoid 和 tanh 在 RNN（LSTM、注意力机制等）结构中有所应用，作为门控或者概率值。其它情况下，减少 Sigmoid 的使用。</span><br><span class="line"></span><br><span class="line">5.在浅层神经网络中，选择使用哪种激励函数影响不大。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial Neural Networks</title>
      <link href="/Skr-king.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%AE%80%E5%8D%95%E6%8E%A8%E5%AF%BC.html/"/>
      <url>/Skr-king.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%AE%80%E5%8D%95%E6%8E%A8%E5%AF%BC.html/</url>
      
        <content type="html"><![CDATA[<p>   现在终于理解我们高中数学老师说的话了，计算不行，说明数学不行，数学不行能力不行，数学好才是真正的好！！！哈哈哈。</p><a id="more"></a><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/2.png" alt></p><p>　这是典型的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层，Layer L3是隐含层，我们现在手里有一堆数据{x1,x2,x3,…,xn},输出也是一堆数据{y1,y2,y3,…,yn},现在要他们在隐含层做某种变换，让你把数据灌进去后得到你期望的输出。</p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/1.png" alt></p><p>　　在这里，通过对上图简单的案例进行数学推导,激活函数默认为sigmoid函数（注：神经网络的基础知识可以参考Poll的笔记：<a href="http://www.cnblogs.com/maybe2030/p/5597716.html" target="_blank" rel="noopener">[Mechine Learning &amp; Algorithm] 神经网络基础</a>）</p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/3.png" alt></p><h1 id="一、前向传播"><a href="#一、前向传播" class="headerlink" title="一、前向传播"></a>一、前向传播</h1><h2 id="1-输入层—-gt-隐含层"><a href="#1-输入层—-gt-隐含层" class="headerlink" title="1.输入层—-&gt;隐含层"></a>1.输入层—-&gt;隐含层</h2><p><strong>计算神经元的输入加权和</strong></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/4.png" alt></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/5.png" alt></p><p><strong>计算神经元 h1、h2 的输出</strong></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/6.png" alt></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/7.png" alt></p><h2 id="2-隐含层—-gt-输出层"><a href="#2-隐含层—-gt-输出层" class="headerlink" title="2.隐含层—-&gt;输出层"></a>2.隐含层—-&gt;输出层</h2><p><strong>计算输出神经元o1、o2的值</strong></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/8.png" alt></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/9.png" alt></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/10.png" alt></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/11.png" alt></p><p>至此，前向传导传播结束。</p><h1 id="二、反向传播"><a href="#二、反向传播" class="headerlink" title="二、反向传播"></a>二、反向传播</h1><h2 id="1-计算总误差"><a href="#1-计算总误差" class="headerlink" title="1.计算总误差"></a>1.计算总误差</h2><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/0.JPG" alt></p><h2 id="2-隐藏层—–-gt-输出层权值更新"><a href="#2-隐藏层—–-gt-输出层权值更新" class="headerlink" title="2.隐藏层—–&gt;输出层权值更新"></a>2.隐藏层—–&gt;输出层权值更新</h2><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/1.jpg" alt></p><p>同理可求</p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/3.jpg" alt></p><p>权值跟新</p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/4.jpg" alt></p><h2 id="3-隐藏层—-gt-输出层权值更新"><a href="#3-隐藏层—-gt-输出层权值更新" class="headerlink" title="3.隐藏层—-&gt;输出层权值更新"></a>3.隐藏层—-&gt;输出层权值更新</h2><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/5.jpg" alt></p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/6.jpg" alt><img src="/Skr-king.github.io/神经网络——案例简单推导.html/7.jpg" alt></p><p>权值跟新</p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/8.jpg" alt></p><p>权值更新后测试数据，会发现数据误差变小许多</p><h1 id="三、栗子"><a href="#三、栗子" class="headerlink" title="三、栗子"></a>三、栗子</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-comment">#激励函数与其偏导数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh_derivative</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> - np.tanh(x) * np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic_derivative</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> logistic(x) * (<span class="hljs-number">1</span> - logistic(x) )</span><br><span class="line"><span class="hljs-comment">#神经网络模型</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, layers, activation=<span class="hljs-string">'tanh'</span>)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> activation == <span class="hljs-string">'Logistic'</span>:</span><br><span class="line">            self.activation = logistic</span><br><span class="line">            self.activation_deriv = logistic_derivative</span><br><span class="line">        <span class="hljs-keyword">elif</span> activation == <span class="hljs-string">'tanh'</span>:</span><br><span class="line">            self.activation = tanh</span><br><span class="line">            self.activation_deriv = tanh_derivative</span><br><span class="line"></span><br><span class="line">        self.weights = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(layers)<span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-comment"># [0,1) * 2 - 1 =&gt; [-1,1) =&gt; * 0.25 =&gt; [-0.25,0.25)  随机权值</span></span><br><span class="line">            self.weights.append( (<span class="hljs-number">2</span>*np.random.random((layers[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>, layers[i] + <span class="hljs-number">1</span> ))<span class="hljs-number">-1</span> ) * <span class="hljs-number">0.25</span> )</span><br><span class="line">            self.weights.append( (<span class="hljs-number">2</span>*np.random.random((layers[i] + <span class="hljs-number">1</span>, layers[i+<span class="hljs-number">1</span>] ))<span class="hljs-number">-1</span> ) * <span class="hljs-number">0.25</span> )</span><br><span class="line">        <span class="hljs-comment"># for i in range(0, len(layers)-1):</span></span><br><span class="line">        <span class="hljs-comment">#     m = layers[i]  # 第i层节点数</span></span><br><span class="line">        <span class="hljs-comment">#     n = layers[i+1]  # 第i+1层节点数</span></span><br><span class="line">        <span class="hljs-comment">#     wm = m + 1</span></span><br><span class="line">        <span class="hljs-comment">#     wn = n + 1</span></span><br><span class="line">        <span class="hljs-comment">#     if i == len(layers)-2:</span></span><br><span class="line">        <span class="hljs-comment">#         wn = n</span></span><br><span class="line">        <span class="hljs-comment">#     weight = np.random.random((wm, wn)) * 2 - 1</span></span><br><span class="line">        <span class="hljs-comment">#     self.weights.append(0.25 * weight)</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#类比梯度下降</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, X, y, learning_rate=<span class="hljs-number">0.2</span>, epochs = <span class="hljs-number">10000</span>)</span>:</span></span><br><span class="line">        X = np.atleast_2d(X)</span><br><span class="line">        <span class="hljs-comment"># temp = np.ones([X.shape[0], X.shape[1]+1])</span></span><br><span class="line">        <span class="hljs-comment"># temp[:,0:-1] = X</span></span><br><span class="line">        <span class="hljs-comment"># X = temp</span></span><br><span class="line">        X = np.column_stack((X, np.ones(len(X))))</span><br><span class="line">        y = np.array(y)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(epochs):</span><br><span class="line">            i = np.random.randint(X.shape[<span class="hljs-number">0</span>])</span><br><span class="line">            a = [X[i]]</span><br><span class="line">            <span class="hljs-comment"># 正向计算</span></span><br><span class="line">            <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> range(len(self.weights)):</span><br><span class="line">                a.append(self.activation( np.dot(a[l], self.weights[l])) )</span><br><span class="line">            <span class="hljs-comment"># 反向传播</span></span><br><span class="line">            error = y[i] - a[<span class="hljs-number">-1</span>]</span><br><span class="line">            deltas = [error * self.activation_deriv(a[<span class="hljs-number">-1</span>])]</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># starting backprobagation</span></span><br><span class="line">            layerNum = len(a) - <span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(layerNum, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>): <span class="hljs-comment"># 倒数第二层开始</span></span><br><span class="line">                deltas.append(deltas[<span class="hljs-number">-1</span>].dot(self.weights[j].T) * self.activation_deriv(a[j]))</span><br><span class="line">                <span class="hljs-comment"># deltas.append(deltas[-(layerNum+1-j)].dot(self.weights[j].T) * self.activation_deriv(a[j]))</span></span><br><span class="line">            deltas.reverse()</span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(self.weights)):</span><br><span class="line">                layer = np.atleast_2d(a[i])</span><br><span class="line">                delta = np.atleast_2d(deltas[i])</span><br><span class="line">                self.weights[i] += learning_rate * layer.T.dot(delta)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        x = np.array(x)</span><br><span class="line">        temp = np.ones(x.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)</span><br><span class="line">        temp[<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>] = x</span><br><span class="line">        a = temp</span><br><span class="line">        <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(self.weights)):</span><br><span class="line">            a = self.activation(np.dot(a, self.weights[l]))</span><br><span class="line">        <span class="hljs-keyword">return</span> a</span><br><span class="line">nn = NeuralNetwork([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], <span class="hljs-string">'tanh'</span>)</span><br><span class="line">x = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])</span><br><span class="line">y = np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])</span><br><span class="line">nn.fit(x, y)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]:</span><br><span class="line">    <span class="hljs-keyword">print</span> (i, nn.predict(i))</span><br></pre></td></tr></table></figure><p>这是我的运行结果</p><p><img src="/Skr-king.github.io/神经网络——案例简单推导.html/0.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordCloud——A Beautiful Cloud of Words</title>
      <link href="/Skr-king.github.io/WordCloud%E2%80%94%E2%80%94%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%AF%8D%E4%BA%91%E5%9B%BE.html/"/>
      <url>/Skr-king.github.io/WordCloud%E2%80%94%E2%80%94%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%AF%8D%E4%BA%91%E5%9B%BE.html/</url>
      
        <content type="html"><![CDATA[<p>I  miss  you。</p><a id="more"></a><h1 id="词云图-Word-nephogram"><a href="#词云图-Word-nephogram" class="headerlink" title="词云图 Word nephogram"></a>词云图 Word nephogram</h1><p>Wordcloud 是Python第三方库中用于制作简单分词云图的第三方库，可以根据自己喜欢的颜色，喜欢的形状制作出美丽的词云图。</p><p>所谓的词云图，也叫文字云，是对文本中出现频率较高的“关键词”予以视觉化的展现，词云图过滤掉大量的低频低质的文本信息，使得浏览者只要一眼扫过文本就可领略文本的主旨。可以在每次的报告中迅速的找到核心词汇，掌握接下来发展的目的，方向。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="快速生成词云图"><a href="#快速生成词云图" class="headerlink" title="快速生成词云图"></a>快速生成词云图</h2><p>建立一个file.txt的文本文件，把你要统计的文章保存的这个文件中，运行如下的代码就可以看到词云图啦</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path</span><br><span class="line"><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Read the whole text.</span></span><br><span class="line">text = open(<span class="hljs-string">'file.txt'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Generate a word cloud image</span></span><br><span class="line">wordcloud = WordCloud().generate(text)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Display the generated image:</span></span><br><span class="line"><span class="hljs-comment"># the matplotlib way:</span></span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="hljs-string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="hljs-string">"off"</span>)</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="/Skr-king.github.io/WordCloud——美丽的词云图.html/1.png" alt></p><h2 id="自定义形状"><a href="#自定义形状" class="headerlink" title="自定义形状"></a>自定义形状</h2><p>上面的词云图又丑有难看对不对，不要着急，这里可以自定义词云图的形状，自定义颜色。</p><p>在这里我的图片是一张心形</p><p><img src="/Skr-king.github.io/WordCloud——美丽的词云图.html/2.jpg" alt></p><figure class="highlight py hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path</span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">d=path.dirname(<span class="hljs-string">'E:\\study\\jupyter notebook'</span>)</span><br><span class="line">text=open(path.join(d,<span class="hljs-string">"constitution.txt"</span>)).read()</span><br><span class="line">alice_mask = np.array(Image.open(path.join(d, <span class="hljs-string">"2.jpg"</span>)))</span><br><span class="line"></span><br><span class="line">wordcloud=WordCloud(background_color=<span class="hljs-string">"white"</span>,max_words=<span class="hljs-number">2000</span>,mask=alice_mask)</span><br><span class="line">wordcloud.generate(text)</span><br><span class="line"></span><br><span class="line">wordcloud.to_file(path.join(d,<span class="hljs-string">"3.jpg"</span>))</span><br><span class="line"><span class="hljs-comment"># 步骤4-1：创建一个图表画布</span></span><br><span class="line">plt.figure(<span class="hljs-number">10</span>)</span><br><span class="line"><span class="hljs-comment"># 步骤4-2：设置图片</span></span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="hljs-string">"bilinear"</span>)</span><br><span class="line"><span class="hljs-comment"># 步骤4-3：取消图表x、y轴</span></span><br><span class="line">plt.axis(<span class="hljs-string">"off"</span>)</span><br><span class="line"><span class="hljs-comment"># 显示图片</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/Skr-king.github.io/WordCloud——美丽的词云图.html/3.jpg" alt></p><p>是不是很有趣呀！</p><p>还有很多有趣的东西等你发现呢</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Just do it!</title>
      <link href="/Skr-king.github.io/Just-do-it.html/"/>
      <url>/Skr-king.github.io/Just-do-it.html/</url>
      
        <content type="html"><![CDATA[<p>放假了哈，啊哈哈哈啊哈哈~🤣🤣</p><a id="more"></a><p>今天，7月11日，考完了最后一科大学物理，结束了大一一年的学习生活，话说匆匆，也来不及挥手。</p><p>大一这一年，自我感觉收获还是蛮多的，参加过青年志愿者志愿活动❤️，去支过教❤️，参加过社团学习，学过硬件的一些东西，在宿舍焊过电路板😱，做过变压器（这个是基础，没啥高大上的），只是，后来没坚持下来，自我解释到毕竟不是学电气专业的😑😑。作为一个计算机专业的，学好编程才对嘛，现在简单的掌握了C语言和Python，入门级别，还有许多要深入。其实，在这个学期，一直想进算法协会ACM，第一次选拔也没如愿，还好在第二次选拔靠运气进了。兴致冲冲的准备好好学习算法，好好打比赛，拿个奖还能炫耀一下（白日做梦中ing🙃🙃），临期末的突转，跑去学AI😵，还好有数据挖掘的基础，入门的机器学习的算法还是能理解，能简单用Python实现 （学习笔记在GitHub我的仓库中有😎）。希望在这个暑期培训中，能有收获🙏🙏，之后的一年中好好学习AI，希望能有个比较好的成果。当然，算法也要学的，AI的老师也是我们下学期的数据结构的老师😮😮，算法，灵魂啊，除了书本知识，会实际实践才是最重要的。大学，自我学习才是最重要的。比如博客我真是一点不懂，只是按照百度上的教程，查找教程，向同学问，开始搭建，一开始，折腾了三四天，才看起来比较像样。还是比较有感触的，从没有到有，今天，我才能在这里 b b😂😂。</p><p>大一的一年至此结束了，还有两个月就大二了，好慌好慌真的好慌。</p><p>没有暑假，有了第一次，还差第二次吗？</p><p><img src="/Skr-king.github.io/Just-do-it.html/1.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New blog</title>
      <link href="/Skr-king.github.io/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86/amazing.html/"/>
      <url>/Skr-king.github.io/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86/amazing.html/</url>
      
        <content type="html"><![CDATA[<p>This  a  sad  story！！  😐😐😐 </p><a id="more"></a><p>因为好奇，想为自己的电脑安装个双系统，也就是Windows  和  Linux 双系统并存，在安装过程中，误把Linux安装在D盘，导致D盘中之前所有保存的文件清空（原来想安装在F盘）呜呜~，想想也没什么可以丢弃了，就坚持把乌班图安装完毕，安装完还是有点成就感的，啊哈哈，尽管对Linux一点不懂，没事，自学大法好，都是小问题，💪💪。</p><p>祸兮，福之所倚，福兮，祸之所伏。虽然博客根目录也被删了，我又找到一个新的博客框架，简单，整洁，还是比较喜欢的一款，没错就是这个—— <a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">icarus</a>。我又重头开始装饰博客，特别添加了Music这个一个页面，听听音乐放松心情，这还得多谢好兄弟王同学❤️，博客奉上🔊 <a href="http://www.sqdxwz.com/" target="_blank" rel="noopener">赴京书生</a>。一开始调用的网易云的音乐外链，因为版权的问题（没钱没版权🙃）有些音乐播放不了，很是难受，只好找不收费的。现在这个是QQ音乐的，有好多好听的歌而且还会自动更新音乐列表，优秀👍👍👍 。</p><p><img src="/Skr-king.github.io/约数个数定理/amazing.html/2.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning makes me happy</title>
      <link href="/Skr-king.github.io/Learning-makes-me-happy.html/"/>
      <url>/Skr-king.github.io/Learning-makes-me-happy.html/</url>
      
        <content type="html"><![CDATA[<h2 id="Sharing"><a href="#Sharing" class="headerlink" title="Sharing"></a>Sharing</h2><p>There are many interesting things waiting to be discovered by us . It’s never too late to learn.</p><p>Don’t indulge yourself , don’t let yourself regret .</p><a id="more"></a><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/1.jpg" alt></p><h2 id="图灵机器人在线聊天"><a href="#图灵机器人在线聊天" class="headerlink" title="图灵机器人在线聊天"></a>图灵机器人在线聊天</h2><p>这是一个基于图灵机器人和微信公众号相结合推出的微信在线聊天系统。</p><p>如果你对这个感兴趣这里有实现的操作 –&gt;&gt; <a href="https://github.com/AngelNI/weChatRobot" target="_blank" rel="noopener">It’s me</a></p><p>百度云下载 <a href="https://pan.baidu.com/s/18w0yZiVdw1Comqx3pwt4yg" target="_blank" rel="noopener">It’s me</a></p><p>提取码: ejuh</p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/3.png" alt></p><h2 id="程序员的暖心话-to-who"><a href="#程序员的暖心话-to-who" class="headerlink" title="程序员的暖心话 to who?"></a>程序员的暖心话 to who?</h2><p>我们虽然不是浪漫的产生者，但我们可以做浪漫的搬运工。</p><p>项目：everywechat</p><p>功能：定时给朋友发送天气，提醒，每日一句，也可以智能自动回复好友，基于图灵机器人</p><p>项目地址：<a href="https://github.com/AngelNI/EverydayWechat" target="_blank" rel="noopener">who is me</a></p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/7.jpg" alt></p><h2 id="QQ木马的简单实现，核心编程"><a href="#QQ木马的简单实现，核心编程" class="headerlink" title="QQ木马的简单实现，核心编程"></a>QQ木马的简单实现，核心编程</h2><p>Finding from <a href="https://88250.b3log.org/articles/2006/12/02/1165071600000.html" target="_blank" rel="noopener">D的个人博客</a></p><p>QQ总是被盗怎么办？ 作为一个程序猿，对底层的代码还是了解一下子。只供参考，技术交流，后果自负。</p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/2.png" alt></p><h2 id="百度云不限速下载器"><a href="#百度云不限速下载器" class="headerlink" title="百度云不限速下载器"></a>百度云不限速下载器</h2><p>Baidu Netdisk Downloader是一款图形界面的百度网盘不限速下载器，支持 Windows、Linux、Mac。</p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/8.jpg" alt></p><h2 id="在线工具，程序员的工具箱"><a href="#在线工具，程序员的工具箱" class="headerlink" title="在线工具，程序员的工具箱"></a>在线工具，程序员的工具箱</h2><p>光说不能表达，附图一张</p><p><a href="https://tool.lu/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">我在这呢！</a></p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/4.png" alt></p><h2 id="python3-教程"><a href="#python3-教程" class="headerlink" title="python3 教程"></a>python3 教程</h2><p>这个是最近发现的，里面有很多有关python的教程，还有一些实战项目。</p><p><a href="https://www.w3cschool.cn/python3/?" target="_blank" rel="noopener">没错又是我</a></p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/5.png" alt></p><h2 id="经典技术书籍分享"><a href="#经典技术书籍分享" class="headerlink" title="经典技术书籍分享"></a>经典技术书籍分享</h2><p><a href="https://github.com/AngelNI/awesome-programming-books" target="_blank" rel="noopener">我又来喽</a></p><p><img src="/Skr-king.github.io/Learning-makes-me-happy.html/6.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CET4</title>
      <link href="/Skr-king.github.io/CET4.html/"/>
      <url>/Skr-king.github.io/CET4.html/</url>
      
        <content type="html"><![CDATA[<p>COME ON !!!</p><a id="more"></a><p>很高兴有这次机会提前考四级，希望要过呀，好好学英语，下学期六级要过啊。</p><p>在这里简单介绍一下四级。</p><h2 id="一-、四级题型"><a href="#一-、四级题型" class="headerlink" title="一 、四级题型"></a>一 、四级题型</h2><p>1.作文（15%）</p><p>2.听力（35%）</p><p>（1）听力对话（15%）</p><p>（2）听力短文（20%）</p><p>3.阅读理解（35%）</p><p>（1）词汇理解（5%）</p><p>（2）长篇阅读（10%）</p><p>（3）仔细阅读（20%）</p><p>4.汉译英（15%）</p><p>总分 ：710，及格线：425</p><h2 id="二、考前准备"><a href="#二、考前准备" class="headerlink" title="二、考前准备"></a>二、考前准备</h2><h3 id="1-词汇"><a href="#1-词汇" class="headerlink" title="1.词汇"></a>1.词汇</h3><p>英语单词是学习英语的基础，基础不牢，地动山摇，好好买一本英语四级的词汇书很重要（我买的是新东方的），要背单词哦。现在有很多背单词的APP，比如百词斩，有道词典，我认为不靠谱，看着看着，就看别的了（都懂的吧），还有个人认为纸质的书拿起来有感觉。</p><h3 id="2-听力"><a href="#2-听力" class="headerlink" title="2.听力"></a>2.听力</h3><p>最头疼的就是听力了，占了很大的分值，听力就多听吧。还有就是要知道他可能会考什么，猜。</p><h3 id="3-阅读理解"><a href="#3-阅读理解" class="headerlink" title="3.阅读理解"></a>3.阅读理解</h3><p>做阅读理解，一定要多做题，买一本近几年的四级考试卷子每周一套（整个上半年我们老师是这样要求的），找到自己的做题感觉和方法很重要。</p><h3 id="4-翻译"><a href="#4-翻译" class="headerlink" title="4.翻译"></a>4.翻译</h3><p>多背一些固定搭配，多背一些词组，还有就是单词~</p><h2 id="三、考试时间安排"><a href="#三、考试时间安排" class="headerlink" title="三、考试时间安排"></a>三、考试时间安排</h2><p><img src="/Skr-king.github.io/CET4.html/1.png" alt></p><p><img src="/Skr-king.github.io/CET4.html/2.png" alt></p><p>注意：答题卡分为两张1和2，先写作文，听力，听力结束后开始收答题卡1。</p><p>最后要预祝考四级的小伙伴，考的全会，蒙的全对。</p><p><a href="https://imgchr.com/i/ZRBC8K" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/11/ZRBC8K.jpg" alt border="0" height="250" width="250"></a><a href="https://imgchr.com/i/ZRBivD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/11/ZRBivD.jpg" alt border="0" height="250" width="250"></a><img src="https://s2.ax1x.com/2019/07/11/ZRBPgO.jpg" alt border="0" height="250" width="250"><img src="https://s2.ax1x.com/2019/07/11/ZRBwxU.jpg" alt border="0" height="250" width="250/"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俄罗斯方块</title>
      <link href="/Skr-king.github.io/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97.html/"/>
      <url>/Skr-king.github.io/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97.html/</url>
      
        <content type="html"><![CDATA[<p>嘿！小伙伴们，还记得俄罗斯方块吗？想必每个人都玩过这个简单刺激的小游戏吧！</p><p>在这里分享给大家一个在线的俄罗斯方块——&gt;&gt; <a href="https://chvin.github.io/react-tetris/" target="_blank" rel="noopener">大爷！来玩呦</a></p><p>github项目地址 <a href="https://github.com/AngelNI/react-tetris" target="_blank" rel="noopener">点我呦</a></p><p>百度云源代码下载 <a href="https://pan.baidu.com/s/1plTawhpPEVEIpvOvfNBS2A" target="_blank" rel="noopener">点我呦</a></p><p>提取码：wb6q</p><a id="more"></a><p><img src="/Skr-king.github.io/俄罗斯方块.html/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数取模</title>
      <link href="/Skr-king.github.io/%E5%A4%A7%E6%95%B0%E5%8F%96%E6%A8%A1.html/"/>
      <url>/Skr-king.github.io/%E5%A4%A7%E6%95%B0%E5%8F%96%E6%A8%A1.html/</url>
      
        <content type="html"><![CDATA[<p>THIS A SAD STORY…… 頑張って</p><a id="more"></a><p><img src="/Skr-king.github.io/大数取模.html/12.png" alt></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>取模想必大家都知道，比如7%5=2，10%3=1，当然了，这还只是简单的取模，适用于不超过计算机整数范围。如果超过了该怎么办呢？</p><p>今天，这里介绍的就是大数取模。</p><h2 id="一般取模"><a href="#一般取模" class="headerlink" title="一般取模"></a>一般取模</h2><h3 id="大数储存"><a href="#大数储存" class="headerlink" title="大数储存"></a>大数储存</h3><p>对一个相当大的数，C语言里的整形是无法储存的，在这里，我们用字符串储存。</p><h3 id="取模方法"><a href="#取模方法" class="headerlink" title="取模方法"></a>取模方法</h3><p>模仿我们曾学过的竖式乘除法。</p><p>对于一个大数 A ，他从高到低的每一位乘以10再对mod取余，最后的结果就是取模的结果。</p><p>`</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 100000007</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">divmod</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *ch,<span class="hljs-keyword">int</span> a)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> s = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;ch[i]!=<span class="hljs-string">'\0'</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">s=(s*<span class="hljs-number">10</span>+ch[i]-<span class="hljs-string">'0'</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> a,b;</span><br><span class="line"><span class="hljs-keyword">char</span> num[<span class="hljs-number">100000</span>];</span><br><span class="line">gets(num);</span><br><span class="line">a = <span class="hljs-built_in">strlen</span>(num);</span><br><span class="line">b = divmod(num,a);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%ld"</span>,b);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>`</p><h2 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h2><p>对于一般的大数取模，时间复杂度太大，可能会TE了。对于指数型的大数取模问题，，快速幂取模就简单方便多了，在空间和时间上相对于一般取模都做了优化。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>快速幂取模的方法基于离散数学或数论的一条公式推导引理。</p><p><strong>积的取余等于取余的积的取余</strong></p><p>在这个定义的基础上对指数型数据进行拆分以及合并，从而实现快速幂取模。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>求（3^40）mod 6。</p><p>(3^40)–&gt;(9^20)–&gt;(18^10) ……这样依次类推</p><p>这里指数幂是偶数，如果是奇数先乘在重复上述工作。</p><p>再这里有一个简单判断奇偶数的方法。附上代码</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"奇数"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"偶数"</span>);&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单的运用了位运算。这比一般奇偶的判断高大上多了。活到老学到老。。。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">powermode</span><span class="hljs-params">(<span class="hljs-keyword">long</span> a, <span class="hljs-keyword">long</span> b, <span class="hljs-keyword">long</span> mod)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">long</span> ans = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            ans = (ans * a) % mod;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        b /= <span class="hljs-number">2</span>;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>对于大数取模还有欧拉函数（费马小定理），技巧去摸，这里不多介绍，后续会补上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约数个数定理</title>
      <link href="/Skr-king.github.io/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86.html/"/>
      <url>/Skr-king.github.io/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86.html/</url>
      
        <content type="html"><![CDATA[<p>自从那时起，它就有了特别的含义，既是与她的一种约定，也是自己出海航行的方向。one piece 是我的，我可是要成为海贼王的男人哈哈哈。</p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>今天遇到了一个有意思的题，让你求一个范围内的约数的个数的最大值，求约数个，哈哈，这真是简单，1,2,3,4从头数不就行了吗，你看我说的对不对哈哈。</p><p>还有一种办法是通过约数个数定理，好，废话说得不少，那就进入正题~</p><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p><a href="https://baike.baidu.com/item/约数个数定理" target="_blank" rel="noopener">百度百科</a></p><p>对于一个大于1正整数n可以分解质因数</p><p>：</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D231/sign=e19b382db04543a9f11bfdcf2f168a7b/a8ec8a13632762d0a5814266a7ec08fa503dc6a8.jpg" alt="img"></p><p><a href="https://baike.baidu.com/item/约数个数定理" target="_blank" rel="noopener">约数个数定理</a>——来自百度百科</p><h6 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h6><p>对于一个大于1正整数n可以分解质因数：</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D231/sign=e19b382db04543a9f11bfdcf2f168a7b/a8ec8a13632762d0a5814266a7ec08fa503dc6a8.jpg" alt="img"></p><p>则n的正约数的个数就是</p><p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D316/sign=ca4b36d4d243ad4ba22e40c1b4035a89/8ad4b31c8701a18b94aed93e9d2f07082838fe7e.jpg" alt="img">。</p><p>其中a1、a2、a3…ak是p1、p2、p3，…pk的指数。</p><h6 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h6><p>首先同上，n可以<a href="https://baike.baidu.com/item/分解质因数/2253749" target="_blank" rel="noopener">分解质因数</a>：n=p1^a1×p2^a2×p3^a3<em>…</em>pk^ak,</p><p>由约数定义可知p1^a1的约数有:p1^0, p1^1, p1^2……p1^a1 ，共（a1+1）个;同理p2^a2的<a href="https://baike.baidu.com/item/约数/8417882" target="_blank" rel="noopener">约数</a>有（a2+1）个……pk^ak的约数有（ak+1）个。</p><p>故根据<a href="https://baike.baidu.com/item/乘法原理/7538447" target="_blank" rel="noopener">乘法原理</a>：n的约数的个数就是(a1+1)(a2+1)(a3+1)…(ak+1)。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS_自我练习</title>
      <link href="/Skr-king.github.io/DFS-%E8%87%AA%E6%88%91%E7%BB%83%E4%B9%A0.html/"/>
      <url>/Skr-king.github.io/DFS-%E8%87%AA%E6%88%91%E7%BB%83%E4%B9%A0.html/</url>
      
        <content type="html"><![CDATA[<h1 id="DFS——exercise"><a href="#DFS——exercise" class="headerlink" title="DFS——exercise."></a>DFS——exercise.</h1><p>I learned DFS last month,I almost forgot how to use it,so that I can’t solve a problem in a practice competition. So I require to review it,and review carefully!</p><a id="more"></a><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>在这里你有一个 6*3 的一个数组，每行有1 ， 2 ， 3 三个数，并且每行按照六种顺序分别排列。当每一行都取一个数时，求出6个数之和最大的值。</p><p>这里有一个非常笨的方法，就是用六重For循环，是不是很惊讶。没错，当我的小伙伴告诉我时,我的内心是WTF的。</p><p>这不是重点，重点是想通过这个简单的题练习一下DFS的思想。</p><p>这仅仅是个简单的开始，</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>][<span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> res;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//printf("%d",res);</span></span><br><span class="line">        res = max(res,sum);</span><br><span class="line">        <span class="hljs-keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    dfs(x+<span class="hljs-number">1</span>,sum+a[x][<span class="hljs-number">0</span>]);</span><br><span class="line">    <span class="hljs-comment">//dfs(x+1,sum+a[x][1]);</span></span><br><span class="line">    <span class="hljs-comment">//dfs(x+1,sum+a[x][2]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> main（）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">    dfs(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h6><p>第一次我控制只输入第一列，输出结果为六。</p><p>仔细想想，这个跟递归求n的阶乘有异曲同工之妙，不断的调用自己递归，直到满足条件回归。</p><h6 id="SECOND"><a href="#SECOND" class="headerlink" title="SECOND"></a>SECOND</h6><p>这次我输入了6*2的数据，并将每次的相加求和的结果打印出来，算了算一共64种，也就是说一共有64种组合方法。</p><h6 id="THIRD"><a href="#THIRD" class="headerlink" title="THIRD"></a>THIRD</h6><p>最后我将所有的数据输入得到了正确的结果18。</p><h6 id="LAST"><a href="#LAST" class="headerlink" title="LAST"></a>LAST</h6><p>仔细想想还是挺有趣的，想想那个yong FOR循环写的，一共729种可能，想想就可怕. TE,TE,TE,TE…….</p><h2 id="DFS模板介绍"><a href="#DFS模板介绍" class="headerlink" title="DFS模板介绍"></a>DFS模板介绍</h2><p>DFS问题的解决有一个dfs的套用模板，自我感觉挺有用的，如果你有更好的办法，留评论呦！！！</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void dfs(step)`</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num==end)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="hljs-comment">/*do something*/</span></span><br><span class="line">        <span class="hljs-keyword">return</span> ;&#125;</span><br><span class="line">      <span class="hljs-comment">/*尝试每一种可能，和遍历数组差不多*/</span></span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;end;i++)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="hljs-keyword">do</span> something;</span><br><span class="line">dfs(step+<span class="hljs-number">1</span>);</span><br><span class="line">undo something;</span><br><span class="line">&#125;</span><br><span class="line">rerun <span class="hljs-number">0</span>;</span><br><span class="line">`&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯问题"><a href="#回溯问题" class="headerlink" title="回溯问题"></a>回溯问题</h2><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p>这里拿棋盘问题举个栗子。</p><p>POJ1321 <a href="http://poj.org/problem?id=1321" target="_blank" rel="noopener">请点击这里</a></p><p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。</p><p><strong>INPUT</strong></p><p>输入含有多组测试数据。<br>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n<br>当为-1 -1时表示输入结束。<br>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。</p><p><strong>OUTPUT</strong></p><p>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。</p><h4 id="SOLVE"><a href="#SOLVE" class="headerlink" title="SOLVE"></a>SOLVE</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(y&gt;=k）</span><br><span class="line">    &#123;</span><br><span class="line">         ans++;</span><br><span class="line">       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=x;i&lt;n;i++)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(!visit[j]&amp;&amp;mp[i][j]==<span class="hljs-string">'#'</span>)<span class="hljs-comment">//回溯</span></span><br><span class="line">             &#123;</span><br><span class="line">                 visit[j]=<span class="hljs-number">1</span>;</span><br><span class="line">                 DFS(i+<span class="hljs-number">1</span>,y+<span class="hljs-number">1</span>);</span><br><span class="line">                visit[j]=<span class="hljs-number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">在这里menset（visit，<span class="hljs-number">0</span>，<span class="hljs-keyword">sizeof</span>（visit））；</span><br></pre></td></tr></table></figure><p>DFS过程中，你要退一步，就必然需要保存你走过每个点的所有信息，而在退一步的过程中，你需要从当前状态回到之前的状态，那么这步操作就是回溯，回溯是递归的时候一定会产生的很自然的操作，只不过大部分情况下不需要回溯。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fleury 算法</title>
      <link href="/Skr-king.github.io/Fleury-%E7%AE%97%E6%B3%95.html/"/>
      <url>/Skr-king.github.io/Fleury-%E7%AE%97%E6%B3%95.html/</url>
      
        <content type="html"><![CDATA[<h1 id="Fleury-算法"><a href="#Fleury-算法" class="headerlink" title="Fleury 算法"></a>Fleury 算法</h1><p>Fleury算法是从离散书上看到的，书上详细的写了算法的操作。在这里用主要用C语言实现。在这里隆重感谢曹老板的鼎力支持。膜拜~</p><p><img src="/Skr-king.github.io/Fleury-算法.html/1.jpg" alt></p><a id="more"></a><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>输入 ：欧拉图</p><ol><li><code>任取 v0∈V(G),令P0 = v0 ，i = 0.</code></li><li><code>设 Pi = v0e0v1e1……eivi,</code></li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果E（G） - &#123;e1,e2……ei&#125;中没有与vi关联的边则计算停止；否则按下述条件从E（G） -&#123;e1，e2，……ei&#125;中任取一条边ei+1：</span><br></pre></td></tr></table></figure><p> <code>（a） ei+1与vi相关联；</code></p><p> <code>（b） 除非无别的边可提供，否则ei+1不应该为Gi = G-{e1，e2，……ei}中的桥。</code></p><p> <code>设ei+1=（vi,vi+1）,把ei+1,vi+1加入pi得到pi+1.</code></p><ol><li><code>令i=i+1，返回2.</code></li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fleury</span> <span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Bridge</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="hljs-keyword">int</span> eulertu[<span class="hljs-number">10000</span>][<span class="hljs-number">10000</span>] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> V,E;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“顶点数：”);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(“%d”,&amp;V);</span><br><span class="line"><span class="hljs-built_in">printf</span>(“边数：”);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(“%d”,&amp;E); <span class="hljs-comment">//输入几个点，几条边</span></span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">int</span> m,n;</span><br><span class="line"><span class="hljs-keyword">int</span> count;</span><br><span class="line"><span class="hljs-keyword">int</span> o=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“输入有边的俩个点:\n”);</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; E; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;m,&amp;n);       <span class="hljs-comment">//输入有边的俩个点 </span></span><br><span class="line">    eulertu[m][n] = eulertu[n][m] = <span class="hljs-number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; V; i++)         <span class="hljs-comment">//判断是否为欧拉图 </span></span><br><span class="line">&#123;</span><br><span class="line">    count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; V; j++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (eulertu[i][j]==<span class="hljs-number">1</span>) </span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (count%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"不是欧拉图"</span>);</span><br><span class="line">        o=<span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(o==<span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">break</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(o==<span class="hljs-number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line">    fleury();</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"end"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fleury</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>] =&#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> bridge = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“%d—&gt;”,a[<span class="hljs-number">0</span>]);</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; E; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; V; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(eulertu[a[k]][j]==<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">eulertu[a[k]][j] = eulertu[j][a[k]] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(Bridge(a[k],j))</span><br><span class="line">&#123;</span><br><span class="line">t = j;</span><br><span class="line">eulertu[a[k]][j] = eulertu[j][a[k]] = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">a[k] = j;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“%d—&gt;”,j);</span><br><span class="line">bridge = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (bridge) </span><br><span class="line">    &#123;</span><br><span class="line">        eulertu[a[k]][t] = eulertu[t][a[k]] = <span class="hljs-number">0</span>;</span><br><span class="line">        k++;</span><br><span class="line">        a[k] = t;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d---&gt;"</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    bridge = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Bridge</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> k)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)</span><br><span class="line">a[i]=<span class="hljs-number">-1</span>;</span><br><span class="line">a[t] = m;</span><br><span class="line"><span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; a[t] != <span class="hljs-number">-1</span>; t++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; V; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (eulertu[a[t]][i] == <span class="hljs-number">1</span> &amp;&amp; i == k)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (eulertu[a[t]][i] == <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">            p=<span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span>(a[p]==<span class="hljs-number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p++;</span><br><span class="line">                n++;</span><br><span class="line">                a[n] = i;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fermat&#39;s Last Theorem</title>
      <link href="/Skr-king.github.io/Fermat-s-Last-Theorem.html/"/>
      <url>/Skr-king.github.io/Fermat-s-Last-Theorem.html/</url>
      
        <content type="html"><![CDATA[<p><img src="https://angelni.github.io/Fermat-s-Last-Theorem/1.jpg" alt="img"></p><a id="more"></a><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Description</p><p>对于输入的<em>n</em>,判断这个一个三元方程xn+yn=znx^n+y^n=z^n<em>x**n</em>+<em>y**n</em>=<em>z**n</em>是否有整数解</p><p>Input</p><p>单组输入</p><p>第一行一个整数TT<em>T</em>,代表输入的数据个数</p><p>接下来<em>T</em>行，每行一个正整数<em>n</em>。</p><p>1≤T≤100</p><p>1≤n≤100000</p><p>Output</p><p>输出<em>T</em>行，对于每个输入的<em>n</em>,如果有整数解输出”YES”,否则输出”NO”.</p><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>费马大定理，又被称为“费马最后的定理”，由17世纪法国数学家<a href="https://baike.baidu.com/item/皮耶·德·费玛/1444615" target="_blank" rel="noopener">皮耶·德·费玛</a>提出。</p><p>他断言当整数n &gt;2时，关于x, y, z的方程 x^n + y^n = z^n 没有正整数解。</p><p>费马达定理的证明有一个非常巧妙的方法证明，自己去领悟精髓吧。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">100</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,t;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Operation on Excel</title>
      <link href="/Skr-king.github.io/Python-Operation-on-Excel.html/"/>
      <url>/Skr-king.github.io/Python-Operation-on-Excel.html/</url>
      
        <content type="html"><![CDATA[<p>====This my mood now====</p><a id="more"></a><p><img src="/Skr-king.github.io/Python-Operation-on-Excel.html/1.jpg" alt></p><p>I recently solve the problem of Excel ‘ data , it is hard to process Excel data because of huge amount of it.However, there is a better tool to process–Python.I simply write 34 lines to operation on Excel’s data to count th number of the key word.</p><p>Just for recording.</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> xlrd</span><br><span class="line"><span class="hljs-keyword">import</span> xlwt</span><br><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#import openpyxl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = xlrd.open_workbook(<span class="hljs-string">'C:\\Users\\hp\\Desktop\\数据信息3.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">table = data.sheets()[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line">ncols = table.col_values(<span class="hljs-number">12</span>)</span><br><span class="line">a = len(ncols)</span><br><span class="line">pattern = re.compile(<span class="hljs-string">r'\d+'</span>)</span><br><span class="line">d=[]</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,a):</span><br><span class="line">    <span class="hljs-comment">#print(pattern.findall(ncols[i]))</span></span><br><span class="line">   <span class="hljs-comment"># print("\n")</span></span><br><span class="line">    b = len(pattern.findall(ncols[i]))</span><br><span class="line">    c=[]</span><br><span class="line">    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,b):</span><br><span class="line">        <span class="hljs-keyword">if</span> eval(pattern.findall(ncols[i])[j] )&lt; <span class="hljs-number">10</span> :</span><br><span class="line">            c.append(pattern.findall(ncols[i])[j])</span><br><span class="line">    <span class="hljs-comment">#print(c)</span></span><br><span class="line">    d.append(len(c))</span><br><span class="line">    <span class="hljs-comment">#print(d)</span></span><br><span class="line">    f = xlwt.Workbook()               <span class="hljs-comment">#创建工作簿</span></span><br><span class="line">sheet1 = f.add_sheet(<span class="hljs-string">u'sheet1'</span>,cell_overwrite_ok=<span class="hljs-literal">True</span>) <span class="hljs-comment">#创建sheet</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(d)):</span><br><span class="line">    sheet1.write(i+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,d[i])</span><br><span class="line">f.save(<span class="hljs-string">"C:\\Users\\hp\\Desktop\\2.xls"</span>)</span><br><span class="line">print(<span class="hljs-string">"结束"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A New Start</title>
      <link href="/Skr-king.github.io/A-New-Start.html/"/>
      <url>/Skr-king.github.io/A-New-Start.html/</url>
      
        <content type="html"><![CDATA[<p>This is a nice day!!!</p><a id="more"></a><p><img src="/Skr-king.github.io/A-New-Start.html/1.jpg" alt></p><p>After half a day’s hard work, my blog is successfully included by baidu and google,and I add some new features to my blog for attracting more people to visit.</p><p>As we all know,photo is a good way to look back our experience,so I specially add Photo to my blog.I change the background of my blog,making it not monotonous.The big change is that my blog language is changed to Engelish and I begin to write blog in English ,thanks to my classmate Uncle_drew’s idea,and thanks for his blog ,I learn a lot from it. Thank you @ <a href="https://cndrew.cn/" target="_blank" rel="noopener">https://cndrew.cn/</a></p><p>Lastly,I sincerely hope that I can insist writing blog .</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Poetry Appreciation</title>
      <link href="/Skr-king.github.io/Poetry-Appreciation.html/"/>
      <url>/Skr-king.github.io/Poetry-Appreciation.html/</url>
      
        <content type="html"><![CDATA[<p>I think poetry is a kind of life experience,a kind of inner sublimation.Cultivate sentiment and enrich oneself.</p><p><img src="/Skr-king.github.io/Poetry-Appreciation.html/1.png" alt></p><a id="more"></a><h3 id="木兰花令"><a href="#木兰花令" class="headerlink" title="木兰花令"></a>木兰花令</h3><p>——纳兰性德</p><p>人生若只如初见，何事秋风悲画扇?等闲变却故人心，却道故人心易变。</p><p>骊山语罢清宵半，泪雨零铃终不怨。何如薄幸锦衣郎，比翼连枝当日愿。</p><h3 id="仓央嘉措《四》"><a href="#仓央嘉措《四》" class="headerlink" title="仓央嘉措《四》"></a>仓央嘉措《四》</h3><p>好多年了</p><p>你一直在我的伤口中幽居</p><p>我放下过天地</p><p>却从未放下过你</p><p>我生命中的千山万水</p><p>任你一一告别</p><p>世间事</p><p>除了生死</p><p>哪一件不是闲事</p><p>谁的隐私不被回光返照</p><p>殉葬的花朵开合有度</p><p>菩提的果实奏响了空山</p><p>告诉我</p><p>你藏在落叶下的那些脚印</p><p>暗示着多少祭日</p><p>专供我在法外逍遥</p><h3 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h3><p>——舒婷</p><p>我如果爱你——绝不像攀援的凌霄花，借你的高枝炫耀自己；</p><p>我如果爱你——绝不学痴情的鸟儿，为绿荫重复单调的歌曲；</p><p>也不止像泉源，常年送来清凉的慰藉；</p><p>也不止像险峰，增加你的高度，衬托你的威仪。甚至日光，甚至春雨。</p><p>不，这些都还不够！</p><p>我必须是你近旁的一株木棉，作为树的形象和你站在一起。</p><p>根，紧握在地下；叶，相触在云里。</p><p>每一阵风过，我们都互相致意，但没有人，听懂我们的言语。</p><p>你有你的铜枝铁干，像刀，像剑，也像戟；我有我红硕的花朵，像沉重的叹息，又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳；我们共享雾霭、流岚、虹霓。</p><p>仿佛永远分离，却又终身相依。</p><p>这才是伟大的爱情，坚贞就在这里：</p><p>爱——不仅爱你伟岸的身躯，也爱你坚持的位置，足下的土地。</p><h3 id="一棵开花的树"><a href="#一棵开花的树" class="headerlink" title="一棵开花的树"></a>一棵开花的树</h3><p>——席慕蓉</p><p>如何让你遇见我</p><p>在我最美丽的时刻</p><p>为这</p><p>我已在佛前求了五百年</p><p>求佛让我们结一段尘缘</p><p>佛於是把我化做一棵树</p><p>长在你必经的路旁</p><p>阳光下</p><p>慎重地开满了花</p><p>朵朵都是我前世的盼望</p><p>当你走近</p><p>请你细听</p><p>那颤抖的叶</p><p>是我等待的热情</p><p>而当你终於无视地走过</p><p>在你身後落了一地的</p><p>朋友啊</p><p>那不是花瓣</p><p>那是我凋零的心</p><h3 id="热爱生命"><a href="#热爱生命" class="headerlink" title="热爱生命"></a>热爱生命</h3><p>——汪国真</p><p>我不去想是否能够成功</p><p>既然选择了远方</p><p>便只顾风雨兼程</p><p>我不去想能否赢得爱情</p><p>既然钟情于玫瑰</p><p>就勇敢地吐露真诚</p><p>我不去想身后会不会袭来寒风冷雨</p><p>既然目标是地平线</p><p>留给世界的只能是背影</p><p>我不去想未来是平坦还是泥泞</p><p>只要热爱生命</p><p>一切，都在意料之中</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/Skr-king.github.io/HTML%E5%AD%A6%E4%B9%A0.html/"/>
      <url>/Skr-king.github.io/HTML%E5%AD%A6%E4%B9%A0.html/</url>
      
        <content type="html"><![CDATA[<h4 id="HTNL——Begin"><a href="#HTNL——Begin" class="headerlink" title="HTNL——Begin"></a>HTNL——Begin</h4><p>Hyper Text Markup Language ，short for HTML ,is a standard markup language for creating web pages.The web pages which we usually scan are written by it.I want to learn a fewer about it because of writing blog and modifying my blog’s framework.</p><p>I need it.</p><p><img src="/Skr-king.github.io/HTML学习.html/1.jpg" alt></p><a id="more"></a><h3 id="The-simply-example"><a href="#The-simply-example" class="headerlink" title="The simply example"></a>The simply example</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this is a title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>First level title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>explanation</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>  声明HTML5文档</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>元素是HTML页面的根元素</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>元素包含了文档的元数据</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档的标题</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>可见的页面内容</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">"utf-8"</span>&gt;</span>声明编码utf-8</span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><h5 id="1-HTML-link"><a href="#1-HTML-link" class="headerlink" title="1.HTML link"></a>1.HTML link</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://baidu.com"</span>&gt;</span>This is baidu link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-picture"><a href="#2-picture" class="headerlink" title="2.picture"></a>2.picture</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">imag</span> <span class="hljs-attr">scr</span>=<span class="hljs-string">"(url)"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"258"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"39"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-lind-feed"><a href="#3-lind-feed" class="headerlink" title="3.lind feed"></a>3.lind feed</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-level"><a href="#4-level" class="headerlink" title="4.level"></a>4.level</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-notes"><a href="#5-notes" class="headerlink" title="5.notes"></a>5.notes</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!--notes--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-bold"><a href="#6-bold" class="headerlink" title="6.bold"></a>6.bold</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span> bold <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I simply learned basics of HTML.Maybe it is very simply ,but it’s a new stduy.Come on !!!</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天生棋局(指针)</title>
      <link href="/Skr-king.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80-%E6%8C%87%E9%92%88.html/"/>
      <url>/Skr-king.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80-%E6%8C%87%E9%92%88.html/</url>
      
        <content type="html"><![CDATA[<p>上次用数组写的天生棋局题，这里补上指针版的。</p><p><img src="/Skr-king.github.io/天生棋局-指针.html/3.jpg" alt></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：**</strong></p><p><strong>1）棋盘的大小根据用户的指令确定；</strong></p><p><strong>2）棋盘中棋子的数量也由用户设定；</strong></p><p><strong>3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="#注释"></a>#注释</h2><p>天生棋局指针类型的和上次数组类型的大体思路是一样的，在这里主要不同的，在于用calloc（）函数申请一个动态的存储空间，因为calloc（）函数成功生成动态存储空间会返回储存空间的首地址，所以在这里用指针类型的变量来实现对动态存储空间的操作。</p><p>这里主要用二维指针，二维指针储存一维指针的地址，二维指针可以看做二维数组，而二维数组可以看做由一维数组组生成，这样理解起来比较简单些</p><p>附上关键自定义生成动态存储函数</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">int</span> ** <span class="hljs-title">board</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ** p = (<span class="hljs-keyword">int</span> **)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>*), n);<span class="hljs-comment">//calloc在内存中分配n*size大小的动态存储空间，返回一个起始地址的一个指针 </span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> ** <span class="hljs-title">board</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;      <span class="hljs-comment">//申请动态存储空间 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inkey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>;<span class="hljs-comment">//用随机数下棋 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printboard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//打印棋格 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//检查好/坏棋 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">freespace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//释放动态空间 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,con;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋盘大小:\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋子数量:\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="hljs-keyword">int</span> **p=board(n);</span><br><span class="line">inkey( p ,n, m );</span><br><span class="line">printboard(p,n);</span><br><span class="line">con=check(p,n);</span><br><span class="line">freespace(p,n);</span><br><span class="line"><span class="hljs-keyword">if</span>(con)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"好棋！"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"不是好棋！"</span>); </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">int</span> ** <span class="hljs-title">board</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ** p = (<span class="hljs-keyword">int</span> **)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>*), n);<span class="hljs-comment">//calloc在内存中分配n*size大小的动态存储空间，返回一个起始地址的一个指针 </span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inkey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));  <span class="hljs-comment">//随机数种子   生成伪随机数，每次的随机数都不一样 </span></span><br><span class="line"><span class="hljs-keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a=rand()%n,b=rand()%n;</span><br><span class="line">p[a][b]=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printboard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//  生  成  棋  盘 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)        <span class="hljs-comment">//   ┏ ┓┗ ┛┠ ┷ ┨ ┯ ┼ ●</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(p[i][j]==<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"●"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)    </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┏"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┓"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┗"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┛"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┠"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┷"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┨"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┯"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┼"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-comment">//   默认不是好棋。 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">// 判断 好棋 坏棋 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (p[i][j] == <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (j&gt;<span class="hljs-number">0</span> &amp;&amp; p[i][j<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一行有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt;<span class="hljs-number">0</span> &amp;&amp; p[i<span class="hljs-number">-1</span>][j] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一列有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">freespace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">free</span>(p[i]);<span class="hljs-comment">//释放一级指针指向的空间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//释放二级指针指向的空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sort() function</title>
      <link href="/Skr-king.github.io/sort-%E5%87%BD%E6%95%B0.html/"/>
      <url>/Skr-king.github.io/sort-%E5%87%BD%E6%95%B0.html/</url>
      
        <content type="html"><![CDATA[<h4 id="C-中的sort（）函数"><a href="#C-中的sort（）函数" class="headerlink" title="C++中的sort（）函数"></a>C++中的sort（）函数</h4><p>我在之前的博客中提到，解决排序问题的一个好用的函数就是C++的sort（）函数啦。sort（）函数是C++内置的函数，只需要加入头文件，掌握正确的使用方法，你就可以在排序中驰骋疆场了（自吹自擂<del>）。好啦，下面就请主角登场吧</del></p><a id="more"></a><p><img src="/Skr-king.github.io/sort-函数.html/1.jpg" alt></p><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>c++语言中 STL 库中的sort函数可以用来对数组进行排序。对于c++语言来说由于其自带的sort()函数更容易被编译器编译，其排序速度比基于快速排序的qsort要快上不少，且用法简单。(百度知道)</p><h4 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h4><p>sort（）函数的使用需要添加头文件</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">或者万能头文件</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h4><p><strong>sort（star,end,cmp）*</strong></p><p>sort函数有三个参数：</p><p>1.第一个是要排序的数组的起始地址</p><p>2.第二个是结束地址（最后一位的地址的下一地址）</p><p>3.第三个参数是排序的方法。sort函数默认是按从小到大排序。可以修改cmp实现从大到小排序</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort（begin，end，less&lt;data-type&gt;)——升序</span><br><span class="line"></span><br><span class="line">sort（begin，end，greater&lt;data-type&gt;)——降序</span><br></pre></td></tr></table></figure><p>以上是比较简单常用的对数组的排序方法，sort（）类函数中还有其他的排序功能。</p><h4 id="4-sort-类函数"><a href="#4-sort-类函数" class="headerlink" title="4.sort()类函数"></a>4.sort()类函数</h4><table><thead><tr><th align="center">函数名</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">sort</td><td align="center">对给定区间所有元素进行排序</td></tr><tr><td align="center">stable_sort</td><td align="center">对给定区间所有元素进行稳定排序</td></tr><tr><td align="center">partial_sort</td><td align="center">对给定区间所有元素进行稳定排序</td></tr><tr><td align="center">partial_sort</td><td align="center">对给定区间所有元素部分排序</td></tr><tr><td align="center">partial_sort_copy</td><td align="center">对给定区间复制并排序</td></tr><tr><td align="center">nth_element</td><td align="center">找出给定区间的某个位置对应的元素</td></tr><tr><td align="center">is_sorted</td><td align="center">判断一个区间是否已经排好序</td></tr><tr><td align="center">partition</td><td align="center">使得符合某个条件的元素放在前面</td></tr><tr><td align="center">stable_partition</td><td align="center">相对稳定的使得符合某个条件的元素放在前面</td></tr></tbody></table><h4 id="5-sort（）函数练习"><a href="#5-sort（）函数练习" class="headerlink" title="5.sort（）函数练习"></a>5.sort（）函数练习</h4><h6 id="1-有序序列合并"><a href="#1-有序序列合并" class="headerlink" title="1.有序序列合并"></a>1.有序序列合并</h6><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/827/J" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/827/J</a></p><p>来源：牛客网</p><p>题目描述</p><p>输入两个升序排列的序列，将两个序列合并为一个有序序列并输出。</p><p>输入描述:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入包含三行，</span><br><span class="line"></span><br><span class="line">第一行包含两个正整数n, m（1 ≤ n,m ≤ 100），用空格分隔。n表示第二行第一个升序序列中数字的个数，m表示第三行第二个升序序列中数字的个数。</span><br><span class="line"></span><br><span class="line">第二行包含n个整数（范围1~5000），用空格分隔。</span><br><span class="line"></span><br><span class="line">第三行包含m个整数（范围1~5000），用空格分隔。</span><br></pre></td></tr></table></figure><p>输出描述:</p><p>输出为一行，输出长度为n+m的升序序列，即长度为n的升序序列和长度为m的升序序列中的元素重新进行升序序列排列合并。</p><p><strong>示例1</strong></p><p>输入<br>5 6<br>1 3 7 9 22<br>2 8 10 17 33 44<br>输出<br>1 2 3 7 8 9 10 17 22 33 44</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,t;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>],c[<span class="hljs-number">200</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    t=n;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        c[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">        c[t++]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(c,c+m+n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m+n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);</span><br><span class="line">    &#125;          </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="2-最高最低分差"><a href="#2-最高最低分差" class="headerlink" title="2.最高最低分差"></a>2.最高最低分差</h6><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/827/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/827/E</a></p><p>来源：牛客网</p><p>题目描述</p><p>输入n个成绩，换行输出n个成绩中最高分数和最低分数的差。</p><p>输入描述:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两行，第一行为n，表示n个成绩，不会大于10000。</span><br><span class="line"></span><br><span class="line">第二行为n个成绩（整数表示，范围0~100），以空格隔开。</span><br></pre></td></tr></table></figure><p>输出描述:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行，输出n个成绩中最高分数和最低分数的差。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">98 100 99 97 95 99 98 97 96 100</span><br></pre></td></tr></table></figure><p>输出</p><p>5</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n,a[<span class="hljs-number">10000</span>],sum=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    sum=a[n<span class="hljs-number">-1</span>]-a[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,sum);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先搜索(DFS)</title>
      <link href="/Skr-king.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS.html/"/>
      <url>/Skr-king.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS.html/</url>
      
        <content type="html"><![CDATA[<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>深度优先搜索算法（Depth-First-Search），是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止（属于盲目搜索）。</p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/7.jpg" alt="img"></p><a id="more"></a><p>“一路走到头，不撞墙不回头”</p><p> 深度优先搜索属于图算法的一种，是一个针对图和树的遍历算法，英文缩写为DFS即Depth First Search。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p><h2 id="树状图图解"><a href="#树状图图解" class="headerlink" title="树状图图解"></a>树状图图解</h2><p>例如，想要从1到9，每到一个岔路口你有两种选择，你可以选择左枝，或者右枝，共两种可能，但是当你走到死胡同时，你只能原路返回，走到这个死胡同的上一个路口，走另一条路，依次类推，直到走到终点，也就是九。你可能会问，这不明摆着呢吗，直接从1经过8到9不就行了。没错，这是最直接的办法，但计算机傻啊，没有你聪明啊，它只会，一次一次的尝试，直到最终结果。</p><p>下面是图解</p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/2.jpg" alt="img"></p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/1.png" alt="img"></p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/2.png" alt="img"></p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/3.png" alt="img"></p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/4.png" alt="img"></p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/5.png" alt="img"></p><p><img src="https://angelni.github.io/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/6.png" alt="img"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>给定整数a1、a2、…….an，判断是否可以从中选出若干数，使它们的和恰好为K。</p><p>输入</p><p>首先，n和k，n表示数的个数，k表示数的和。<br>接着一行n个数。<br>（1&lt;=n&lt;=20,保证不超int范围）</p><p>输出</p><p>如果和恰好可以为k，输出“YES”，否则“NO”</p><p>样例输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 13</span><br><span class="line"></span><br><span class="line">1 2 4 7</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>每一个数有加与不加两种可能，从树的一枝不加到尾，然后，再从叶末返回上一层叶节点，走另一个分支，也就是加上最后一个，与所求的和比较，不符再重复上述操作。直到找到与所求和相等返回Yes</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,k,a[<span class="hljs-number">50</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> sum)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==n) </span><br><span class="line"><span class="hljs-keyword">return</span> sum==k;</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>,sum))</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>,sum+=a[i]))</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"No!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天生棋局</title>
      <link href="/Skr-king.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80.html/"/>
      <url>/Skr-king.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80.html/</url>
      
        <content type="html"><![CDATA[<p>天生棋局问题，是C语言老师留的一个课外练习题。要求有用指针来写，因为指针学的不扎实，也因为第一次看到这道题时，第一个想法就是要用数组来写，所以以下是用数组对天生棋局代码。(指针的会后续补上)</p><p><img src="https://angelni.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80/3.jpg" alt="img"></p><a id="more"></a><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：**</strong></p><p><strong>1）棋盘的大小根据用户的指令确定；</strong></p><p><strong>2）棋盘中棋子的数量也由用户设定；</strong></p><p><strong>3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong></p><h3 id="题前注释"><a href="#题前注释" class="headerlink" title="题前注释"></a>题前注释</h3><h5 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1.随机数"></a>1.随机数</h5><p><strong>头文件</strong>：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt; And #include&lt;time.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>函数</strong>：</p><p>1.<strong>rand()</strong>函数生成伪随机数。</p><p>2.随机发生器的初始化函数`<strong>srand(unsigned seed)</strong></p><p><strong>目的</strong>：</p><p> <strong>rand（）</strong>函数是按指定的顺序来产生整数，但可能两次的随机数相同并不是真正的随机，叫做伪随机数。而随机发生器的初始化函数`<strong>srand(unsigned seed)（也位于stdlib.h）</strong>进行伪随机数列初始化，通过用时间函数<strong>time（NULL）</strong>作为<strong>seed</strong>，使每一次产生的随机数都不一样。</p><h5 id="2-棋盘，棋子"><a href="#2-棋盘，棋子" class="headerlink" title="2.棋盘，棋子"></a>2.棋盘，棋子</h5><p>这是一个下棋的游戏，如果把随机的产生的棋子赤果果地展现在棋盘上，效果会很明显，并且题目说要生成棋盘，所以首先要打印一个棋盘</p><p>打印棋盘，首先要有边框和棋子，这些是从word上copy来的,然后用双层循环就可以了。</p><h5 id="3-判断好-坏棋"><a href="#3-判断好-坏棋" class="headerlink" title="3.判断好/坏棋"></a>3.判断好/坏棋</h5><p>根据题意即可</p><h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><p>根据题意，他说<strong>若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong>但与查的资料不同，说是两颗棋子相邻是好棋。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt; </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));    <span class="hljs-comment">//   生成伪随机数，每次的随机数都不一样 </span></span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> kb[<span class="hljs-number">700</span>][<span class="hljs-number">700</span>];         <span class="hljs-comment">//默认最大棋盘大小 </span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋盘大小： "</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋子数量： "</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="hljs-keyword">while</span>(m--)<span class="hljs-comment">//生成  0 ~ n-1  的随机数  并赋值为 1 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a=rand()%n,b=rand()%n;      </span><br><span class="line">kb[a][b]=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//  生  成  棋  盘 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)        <span class="hljs-comment">//   ┏┓┗┛┠┷┨┯┼●</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(kb[i][j]==<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"●"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)    </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┏ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┓ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┗ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┛ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┠ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┷ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┨ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┯ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┼ "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-comment">//   默认不是好棋。 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">// 判断 好棋 坏棋 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (kb[i][j] == <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (j&gt;<span class="hljs-number">0</span> &amp;&amp; kb[i][j<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一行有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"好棋！\n"</span>);</span><br><span class="line">flag = <span class="hljs-number">1</span>; </span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt;<span class="hljs-number">0</span> &amp;&amp; kb[i<span class="hljs-number">-1</span>][j] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一列有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"好棋！\n"</span>);</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"不是好棋"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/Skr-king.github.io/天生棋局.html/1.png" alt></p><p><img src="/Skr-king.github.io/天生棋局.html/2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++初学</title>
      <link href="/Skr-king.github.io/C-%E5%88%9D%E5%AD%A6.html/"/>
      <url>/Skr-king.github.io/C-%E5%88%9D%E5%AD%A6.html/</url>
      
        <content type="html"><![CDATA[<h4 id="C-初学（一）"><a href="#C-初学（一）" class="headerlink" title="C++ 初学（一）"></a>C++ 初学（一）</h4><p>在一次解决排序问题时，初步接触C++中的sort（）函数，在问题解决上非常好用，不用自己再写排序的代码，就像python中 import 函数库一样，因为懒嘛，所以更懒，嘿嘿！！所以想接触一下C++，简单学习一下子。</p><p><img src="/Skr-king.github.io/C-初学.html/1.jpg" alt></p><a id="more"></a><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。</p><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p><p>C++ 被认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p><p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p><p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><p>好了废话不多说，开始！</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// main() 是程序开始执行的地方</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello World"</span>; <span class="hljs-comment">// 输出 Hello World</span></span><br><span class="line">   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们讲解一下上面这段程序：</p><ul><li>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 。</li><li>下一行 <strong>using namespace std;</strong> 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</li><li>下一行 <strong>// main() 是程序开始执行的地方</strong> 是一个单行注释。单行注释以 // 开头，在行末结束。</li><li>下一行 <strong>int main()</strong> 是主函数，程序从这里开始执行。</li><li>下一行 <strong>cout &lt;&lt; “Hello World”;</strong> 会在屏幕上显示消息 “Hello World”。</li><li>下一行 <strong>return 0;</strong> 终止 main( )函数，并向调用进程返回值 0。</li></ul><h4 id="输入、输出"><a href="#输入、输出" class="headerlink" title="输入、输出"></a>输入、输出</h4><p>C++的输出和输入是用“流”(stream)的方式实现的｡有关流对象cin､cout和流运算符的定义等信息是存放在C++的输入输出流库中的,因此如果在程序中使用cin､cout和流运算符,就必须使用预处理命令把头文件stream包含到本文件中:<br><code>#include &lt;iostream&gt;</code><br>尽管cin和cout不是C++本身提供的语句,但是在不致混淆的情况下,为了叙述方便,常常把由cin和流提取运算符“&gt;&gt;”实现输入的语句称为输入语句或cin语句,把由cout和流插入运算符“&lt;&lt;”实现输出的语句称为输出语句或cout语句｡根据C++的语法,凡是能实现某种操作而且最后以分号结束的都是语句｡</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt; </span></span></span><br><span class="line"><span class="hljs-comment">//格式化输出的头文件，注意这里不要加.h</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b,c;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;setw(<span class="hljs-number">2</span>)&lt;&lt;b&lt;&lt;setw(<span class="hljs-number">2</span>)&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">float</span> num1 = <span class="hljs-number">123.456f</span>,num2 = <span class="hljs-number">563.1f</span>,num3 = <span class="hljs-number">1.30f</span>;</span><br><span class="line">    <span class="hljs-keyword">float</span> num4 = <span class="hljs-number">123456.4444f</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; setprecision(<span class="hljs-number">4</span>);</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第一个数："</span> &lt;&lt; num1 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第二个数："</span> &lt;&lt; num2 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第三个数："</span> &lt;&lt; num3 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第四个数："</span> &lt;&lt; num4 &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//endl 英语意思是end of line,即一行输出结束，然后输出下一行。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>头文件<code>#include&lt;iomanip&gt;</code>是格式化输出的头文件，注意后面不加 <strong>.h</strong>，</p><h6 id="使用setw-来控制占位宽度。"><a href="#使用setw-来控制占位宽度。" class="headerlink" title="使用setw()来控制占位宽度。"></a>使用setw()来控制占位宽度。</h6><p>注意事项</p><ol><li>setw() 虽然带有括号，但是其实是一个操作符，并不是函数。</li><li>setw() 主要引用头文件 iomanip 才能使用。</li><li>如果setw() 所约束的输出超过了限制，不会被截断。是多少位就输出多少位。</li><li>如果输出是浮点数，小数点也会占一个位。</li><li>如果输出是字符串，空格有段有效字符，占一个位。从上面的输出结果也可以看出来。</li><li>setw() 只能约束住跟自己相邻的一个输出。也就是说</li></ol><h6 id="使用setprecision-控制浮点数有效位"><a href="#使用setprecision-控制浮点数有效位" class="headerlink" title="使用setprecision()控制浮点数有效位"></a>使用setprecision()控制浮点数有效位</h6><p>注意事项：</p><ol><li>setprecision() 同样是一个操作符，需要包含头文件 iomanip。</li><li>如果输出浮点数不足位，不会在其后面补0。</li><li>如果末尾有0，默认是不输出的。后面我们有其他方法可以输出末尾的0。</li><li>setprecision() 不同于setw()，setprecision() 设置之后，在下次设置之前都是有效的。从程序结果中可以看出来。</li><li>如果要输出的位数过多，则用科学计数法表示，10为基数。</li></ol><h6 id="setfioflags-控制定点输出"><a href="#setfioflags-控制定点输出" class="headerlink" title="setfioflags() 控制定点输出"></a>setfioflags() 控制定点输出</h6><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">float</span> num1 = <span class="hljs-number">13.000f</span>,num2 = <span class="hljs-number">14.568f</span>,num3 = <span class="hljs-number">1.2f</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; setiosflags(ios::fixed|ios::showpoint);</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; setprecision(<span class="hljs-number">4</span>);</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第一个数："</span> &lt;&lt; num1 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第三个数："</span> &lt;&lt; num2 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第二个数："</span> &lt;&lt; num3 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>setiosflags() 是通过状态标志来实现对输出的控制的。状态标志功能如下表</p><table><thead><tr><th align="left">状态标志</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">ios::left</td><td align="left">左对齐，右边填空格</td></tr><tr><td align="left">ios::dec</td><td align="left">所有整数以十进制输出</td></tr><tr><td align="left">ios::right</td><td align="left">右对齐，左边填空格</td></tr><tr><td align="left">ios::scientific</td><td align="left">以科学计数法形式输出浮点数</td></tr><tr><td align="left">ios::hex</td><td align="left">所有整数以十六进制输出</td></tr><tr><td align="left">ios::fixed</td><td align="left">以定点形式输出浮点数</td></tr><tr><td align="left">ios::oct</td><td align="left">所有整数以八进制输出</td></tr><tr><td align="left">ios::showpoint</td><td align="left">显示小数点和尾部的零</td></tr><tr><td align="left">ios::showpos</td><td align="left">在正数前面输出+</td></tr><tr><td align="left">ios::uppercase</td><td align="left">对于十六进制输出，使用大写字母表示</td></tr></tbody></table><p>setiosflags() 需要与 setprecision() 一起使用。如果状态标志设为 ios::fixed，那么setprecision()设置的数字，就表示小数位的个数，不足补零。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appreciation of Novels</title>
      <link href="/Skr-king.github.io/%E5%BE%AE%E5%B0%8F%E8%AF%B4%E6%AC%A3%E8%B5%8F.html/"/>
      <url>/Skr-king.github.io/%E5%BE%AE%E5%B0%8F%E8%AF%B4%E6%AC%A3%E8%B5%8F.html/</url>
      
        <content type="html"><![CDATA[<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>我因车祸而失明，所以我从不知女友长什么样。那年，她得了胃癌，临终前她将眼角膜移植给了我。我恢复光明后的第一件事就是找她的照片，然而我只找到她留给我的一封信，信里有一张空白照片，照片上写有一句话：“别再想我长什么样，下一个你爱上的人，就是我的模样。”　<a id="more"></a>　　</p><p><img src="/Skr-king.github.io/微小说欣赏.html/1.jpg" alt></p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>外婆离开人世的那个黄昏，外公在病房里陪伴着她走完了她生命的最后一段旅程。外婆临去前对外公说‘放学了’。一直假装平静的外公听完这句话后像个孩子似的大哭起来。葬礼结束后我问起外公这三个字的含义，外公告诉我说这是从前他和外婆还在上小学时外婆常说的一句话：放学了，我们一起回家吧。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>她车祸去世后，他思念万分，利用时光机回到过去，阻止惨剧发生。机器出了差错，比预定时间早了几分钟。他拿出钥匙开门，听见卧室传出她的娇喘和男人的声音。她手机响了，他记得这是他打来的。“我得走了，我男人催我呢。”。他听着，惹羞成怒，出门偷了一辆车，看着急匆匆的她，一脚踩下油门。</p><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>妈妈你看！”小女孩开心地递过来一张写满字的纸。“我听见一个哥哥问姐姐怎么才会爱他，姐姐说只要每天在纸上写1000遍她的名字…”“傻孩子！”女人抱住小女孩：那宝贝是怎么知道爸爸名字的？“这里！”小女孩打开抽屉：上次爸爸把名字签在上面了！女人顺眼望去，里面躺着一张离婚协议书　</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p>他看着桌子上忙碌的蚂蚁，伸出手指，一下捏死一只。蚂蚁们大惊，四下乱窜。稍停，又排成一字继续工作。他又伸出手，再捏死一只。蚂蚁大乱，稍顷还是排一字。等到第10次时，蚂蚁们已经熟视无睹。当他向第11只下手时，轰隆一声，巨大的天花板砸了下来。他最后一眼，只看到推倒他房子的那只怪手。　</p><h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p>他和她青梅竹马，相约为百姓杀贪官，仗剑天涯。一次刺杀失败被俘，他竟被招安，无数同仁被杀。她含泪发誓要刃叛徒，遂色诱贪官纳她为妾。十年后，他成平反大将。酒宴上，她起身献舞，刺中他手臂。他深情说，你之后，我再无爱过。她心软刃落，他抽刀刺死她，心想，真好骗。</p><h4 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h4><p>他大她快二十岁，他对她很好，百般呵护，他们认识不到一年，他就执意要娶她。朋友都很羡慕她，她却犹豫不决，因为小时候一场手术意外造成她不孕，他是独子，庞大的家族事业等他继承，她不想耽误他。终於她鼓起勇气向他坦诚不孕的事实，他说我知道，当年那刀是我开的，这些年来我一直在找你！</p><h4 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h4><p>5岁“妈妈，烧红烧肉吧”“行，烧”15岁“妈妈，别烧红烧肉了，换换味道” “行，买别的菜” 35岁“儿子，啥时候回家吃一顿啊？妈给做红烧肉” “不行，最近忙” 50岁“妈妈今天路过你家，给你带红烧肉” “不行，今不在家” 70岁“妈，我想吃红烧肉” 那边，已经没有了妈妈的声音</p><h4 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h4><p>就要做心脏移植手术了，他深情地望着躺在床上的妻子，拿签字表的手有点抖。“快签吧，你个窝囊废、穷鬼！”妻骂。手术很成功，她没有一点排异反应。“我那没心肝的丈夫哪？”她问护士。护士递过一张纸，上面画一颗鲜红的心和一行小字：“这是我最后能给你的了，我爱你。”</p><h4 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h4><p>他与爸爸相依至大。他常问：为什么不给他找个后妈？爸爸总是笑说：此生只爱妈妈一个！后来他长大成家，爸爸说要结婚，他愤怒地打了那女人一耳光，骂爸爸是个骗子。从此，爸爸再未提及此事。多年后爸爸去世，他整理遗物时发现了一张自己婴儿时的照片，背面是沧桑的字迹：战友之子，当如吾儿！</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法查找</title>
      <link href="/Skr-king.github.io/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE.html/"/>
      <url>/Skr-king.github.io/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE.html/</url>
      
        <content type="html"><![CDATA[<h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><p>二分法查找，二分搜所，也称折半搜索，每次查找区间减半，适用于数据量较大，对一个有序的数组中查找某一元素。</p><a id="more"></a><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><p>给一有序的数组a[9]={1,2,3,4,5,6,7,8,9,}，想要确定 3 的位置。</p><h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a[0]+a[8])/2=5   大于  3则只需要查找a[0]~a[4]就可以</span><br><span class="line">(a[0]+a[4])/2=3   此时刚好等于3，则此时3的位置就是（0+4）/2=2</span><br><span class="line">则可知 a[2]=3    至此查找结束</span><br></pre></td></tr></table></figure><p>下面通过一个例子来具体体验下二分法的妙处</p><h2 id="Trailing-Zeroes"><a href="#Trailing-Zeroes" class="headerlink" title="Trailing Zeroes"></a>Trailing Zeroes</h2><p>n的阶乘尾部有q个连续的0，现在给你q，请你算出满足条件的n，如果有多个n满足条件，输出最小的那个即可。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入一个T(T &lt;= 10000),表示样例数量。</span><br><span class="line"></span><br><span class="line">每个样例输入一个q。(1 &lt;= q &lt;= 100,000,000)</span><br></pre></td></tr></table></figure><h5 id="output"><a href="#output" class="headerlink" title="output"></a><strong>output</strong></h5><p>对于每个样例，输出满足条件的最小的n，如果没有满足条件的则输出”impossible”。.</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Case 1: 5</span><br><span class="line"></span><br><span class="line">Case 2: 10</span><br><span class="line"></span><br><span class="line">Case 3: impossible</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这是一个判断阶乘后面有多少个零，输出满足条件下的最小解。</p><p>首先判断0的个数，我们可以通过判断5的个数来判断0`的个数（10可以分成2*5）</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：5！=1*2*3*4*5=120</span><br></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">fn</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n)</span>   <span class="hljs-comment">//求n阶乘的末尾0个数 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">a += n/<span class="hljs-number">5</span>;</span><br><span class="line">n = n/<span class="hljs-number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：判断25！末尾有几个0</p><p>a=25/5 –&gt; a=5</p><p>a+=5/5 –&gt; a=6</p><p>由此可以判断25的阶乘末尾有6个零（拿计算器验证）</p><h3 id="整个题解"><a href="#整个题解" class="headerlink" title="整个题解"></a>整个题解</h3><p>（这是大佬写的，我偷偷拿来哈~）</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">##### <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;  //cin，cout数据流输入输出的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;  <span class="hljs-comment">//声明定义long long 的别名 ll</span></span><br><span class="line"><span class="hljs-keyword">const</span> ll maxn = <span class="hljs-number">1e17</span>;  <span class="hljs-comment">//题目中0的个数  1~1e9</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fn</span><span class="hljs-params">(ll n)</span><span class="hljs-comment">//求n阶乘的末尾0个数 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll a = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">a += n/<span class="hljs-number">5</span>;</span><br><span class="line">n = n/<span class="hljs-number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n, q;</span><br><span class="line">ll ans;<span class="hljs-comment">//定义所要求的答案</span></span><br><span class="line"><span class="hljs-keyword">int</span> Case = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n; <span class="hljs-comment">//输入测试组数</span></span><br><span class="line"><span class="hljs-keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">Case++;<span class="hljs-comment">//判断测试第几个</span></span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;q;<span class="hljs-comment">//输入0的个数</span></span><br><span class="line"><span class="hljs-keyword">int</span> l, r;<span class="hljs-comment">//定义左值，和右值</span></span><br><span class="line">l =<span class="hljs-number">1</span>;</span><br><span class="line">r = maxn;</span><br><span class="line">ans = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(r&gt;=l)</span><br><span class="line">&#123;</span><br><span class="line">ll mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">//直接平均可能溢出，所以用这个  注： &gt;&gt; 值的二进制形式右移一位，相当于十进制除2</span></span><br><span class="line"><span class="hljs-keyword">if</span>(fn(mid)==q)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;<span class="hljs-comment">//如果中间的那个数零的个数恰好等于q，则为答案</span></span><br><span class="line">r = mid<span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fn(mid)&lt;q) l = mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//如果中间的值0的个数小于q，则左值++</span></span><br><span class="line"><span class="hljs-keyword">else</span> r = mid<span class="hljs-number">-1</span>;<span class="hljs-comment">//  否则 右值——</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d: %lld"</span>, Case, ans);<span class="hljs-comment">//如果结果不为零，按输出格式打印</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d: impossible"</span>, Case);<span class="hljs-comment">//否则，则输出impossile</span></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makedown语法</title>
      <link href="/Skr-king.github.io/Makedown%E8%AF%AD%E6%B3%95.html/"/>
      <url>/Skr-king.github.io/Makedown%E8%AF%AD%E6%B3%95.html/</url>
      
        <content type="html"><![CDATA[<p>最近经过几天的奋斗，自己的博客基本框架终于搭建成功，接下来就是开始写文章了，不过上来就碰上个头疼的问题，就是怎么写的问题，我就想度娘请教（度娘，真帅），说是用Markdown语法写，最近在Notebook上写Python的学习笔记，老师说过要自学Markdown语法，说是非常简单（没错，就是很简单），下面就是Markdown的语法介绍啦，要好好学哟。</p><a id="more"></a><p>在编写 Markdown 时，强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora</p><p>按照官方的说法就是 简单而强大，它不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以 实时预览</p><p>这里附上 Typora 的下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">点击这里</a> , 有兴趣的朋友可以下载来试试</p><p>好，下面开始进入正题，介绍一些常用的 Markdown 语法</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="(1) 标题"></a>(1) 标题</h3><h4 id="Markdown语法："><a href="#Markdown语法：" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#一级标题`</span><br><span class="line"></span><br><span class="line">`##二级标题`</span><br><span class="line"></span><br><span class="line">`###三级标题`</span><br><span class="line"></span><br><span class="line">`####四级标题`</span><br><span class="line"></span><br><span class="line">`#####五级标题`</span><br><span class="line"></span><br><span class="line">`######六级标题</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键："><a href="#Typora快捷键：" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + 1：一级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 2：二级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 3：三级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 4：四级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 5：五级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 6：六级标题</span><br></pre></td></tr></table></figure><h3 id="2-粗体、斜体、删除线"><a href="#2-粗体、斜体、删除线" class="headerlink" title="(2)粗体、斜体、删除线"></a>(2)粗体、斜体、删除线</h3><h4 id="Markdown语法：-1"><a href="#Markdown语法：-1" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体*`</span><br><span class="line"></span><br><span class="line">`**粗体**`</span><br><span class="line"></span><br><span class="line">`***加粗斜线***`</span><br><span class="line"></span><br><span class="line">`~~删除线~~</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-1"><a href="#Typora快捷键：-1" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+l ：斜体</span><br><span class="line"></span><br><span class="line">Ctrl+B：粗体</span><br><span class="line"></span><br><span class="line">Ctrl+U：下划线</span><br><span class="line"></span><br><span class="line">Alt + Shift + 5 ：删除线</span><br></pre></td></tr></table></figure><h3 id="3-引用块"><a href="#3-引用块" class="headerlink" title="(3) 引用块"></a>(3) 引用块</h3><h4 id="Markdown语法：-2"><a href="#Markdown语法：-2" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 文字引用</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-2"><a href="#Typora快捷键：-2" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + Q</span><br></pre></td></tr></table></figure><h3 id="4-代码块"><a href="#4-代码块" class="headerlink" title="(4)代码块"></a>(4)代码块</h3><h4 id="Markdown语法：-3"><a href="#Markdown语法：-3" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; 行内代码&apos;</span><br><span class="line">&apos;&apos;&apos; 多行代码&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-3"><a href="#Typora快捷键：-3" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码： Ctrl + Shift + `</span><br><span class="line"></span><br><span class="line">多行代码：Ctrl + Shift +K</span><br></pre></td></tr></table></figure><h3 id="5-公式块"><a href="#5-公式块" class="headerlink" title="(5)公式块"></a>(5)公式块</h3><h4 id="Markdown语法：-4"><a href="#Markdown语法：-4" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$数学公式$$</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-4"><a href="#Typora快捷键：-4" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + M</span><br></pre></td></tr></table></figure><h3 id="6-分割线"><a href="#6-分割线" class="headerlink" title="(6)分割线"></a>(6)分割线</h3><h4 id="Markdown-语法："><a href="#Markdown-语法：" class="headerlink" title="Markdown 语法："></a>Markdown 语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法1：---`</span><br><span class="line"></span><br><span class="line">`方法2：+++`</span><br><span class="line"></span><br><span class="line">`方法3：***</span><br></pre></td></tr></table></figure><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="(7)列表"></a>(7)列表</h3><h4 id="Markdown语法：-5"><a href="#Markdown语法：-5" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.有序列表项</span><br><span class="line">2. * 无序列表项</span><br><span class="line">3. + 无序列表项</span><br><span class="line">4. - 无序列表项</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-5"><a href="#Typora快捷键：-5" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>有序列表项：Ctrl+Shift+[</p><p>有序列表项：Ctrl+Shift+]</p><h3 id="8-表格"><a href="#8-表格" class="headerlink" title="(8) 表格"></a>(8) 表格</h3><h4 id="Markdown语法：-6"><a href="#Markdown语法：-6" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 表头1|表头2</span><br><span class="line">-|-|-</span><br><span class="line">内容11|内容12</span><br><span class="line">内容21|内容22</span><br></pre></td></tr></table></figure><h4 id="Typora-快捷键："><a href="#Typora-快捷键：" class="headerlink" title="Typora 快捷键："></a><strong>Typora 快捷键：</strong></h4><p>Ctrl+T</p><h3 id="9-超链接"><a href="#9-超链接" class="headerlink" title="(9)超链接"></a>(9)超链接</h3><h4 id="Markdown语法：-7"><a href="#Markdown语法：-7" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法一：[链接文字](链接地址 &quot;链接描述&quot;)</span><br><span class="line">例如：[示例链接](https://www.example.com/ &quot;示例链接&quot;)</span><br><span class="line">方法二：&lt;链接地址&gt;</span><br><span class="line">例如：&lt;https://www.example.com/&gt;</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-6"><a href="#Typora快捷键：-6" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>Ctrl+K</p><h3 id="10-图片"><a href="#10-图片" class="headerlink" title="(10)图片"></a>(10)图片</h3><h4 id="Markdown语法：-8"><a href="#Markdown语法：-8" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![图片文字](图片地址 &quot;图片描述&quot;)</span><br><span class="line">例如：![示例图片](https://www.example.com/example.PNG &quot;示例图片&quot;)</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-7"><a href="#Typora快捷键：-7" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>Ctrl+Shift+I</p>]]></content>
      
      
      <categories>
          
          <category> Makedown语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makedown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github</title>
      <link href="/Skr-king.github.io/hexo-github.html/"/>
      <url>/Skr-king.github.io/hexo-github.html/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建-自己总结"><a href="#博客搭建-自己总结" class="headerlink" title="博客搭建(自己总结)"></a>博客搭建(自己总结)</h2><p>之前自己搭建博客，可以说废了很大的劲，这里总结了一下各位大佬们搭建博客的方法，供大家借鉴。</p><a id="more"></a><h3 id="1-安装所需软件"><a href="#1-安装所需软件" class="headerlink" title="1.安装所需软件"></a>1.安装所需软件</h3><h4 id="1-git安装"><a href="#1-git安装" class="headerlink" title="1.git安装"></a>1.git安装</h4><p>Windows系统下安装git</p><p>可以直接到官网下载安装<a href="https://git-scm.com/" target="_blank" rel="noopener">点击这里</a></p><p>由于访问的是外网，下载速度可能会慢（也可能非常慢）</p><p>下面提供百度云的下载地址</p><p>64-bit Git for Windows Setup : <a href="https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe</a></p><h4 id="2-Node-js安装"><a href="#2-Node-js安装" class="headerlink" title="2.Node.js安装"></a>2.Node.js安装</h4><p>可以直接到官网下载安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击这里</a></p><p>百度网盘资源： <a href="https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA" target="_blank" rel="noopener">https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA</a></p><p>提取码：wsti</p><p>下载完成后，安装时一定要点击 Add to PATH</p><p>安装完成后，打开cmd，<code>输入 node -v</code> 测试安装是否成功</p><p>下面来解决npm卡顿问题</p><p>1.打开cmd，换成阿里源</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>2.验证命令</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.npm config get registry    //返回https://registry.npm.taobao.org，说明镜像配置成功</span><br></pre></td></tr></table></figure><p>3.安装cnpm</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="3-hexo安装"><a href="#3-hexo安装" class="headerlink" title="3.hexo安装"></a>3.hexo安装</h4><p>打开git目录下的git-bash.exe，输入下面代码</p><p>npm install -g hexo-cli</p><p>安装hexo完成后执行下列命令</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;文件夹名&gt; </span><br><span class="line">cd &lt;文件夹名&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>hexo 理论上安装在git文件夹下</p><h4 id="4-在github上注册账号并同时建立仓库"><a href="#4-在github上注册账号并同时建立仓库" class="headerlink" title="4.在github上注册账号并同时建立仓库"></a>4.在github上注册账号并同时建立仓库</h4><p>gitHub是一个面向<a href="https://baike.baidu.com/item/开源/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。（来源百度百科）</p><p>github官网<a href="https://github.com/" target="_blank" rel="noopener">点击这里</a></p><p>这个是github基础设置和使用详解<a href="https://www.jianshu.com/p/f51062941573" target="_blank" rel="noopener">点击这里</a></p><h4 id="5-ssh授权获取私钥"><a href="#5-ssh授权获取私钥" class="headerlink" title="5.ssh授权获取私钥"></a>5.ssh授权获取私钥</h4><p>先配置SSH,在git-bash下输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github注册名&quot;</span><br><span class="line">git config --global user.email &quot;github注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>打开git bash，输入ssh-kengen -t rsa，停顿时，敲击回车</p><p>最后会在C盘目录下生成id_ras和id_rsa.pub两个文件夹，用记事本打开id_rsa.pub，复制打开的文件内容到 github-&gt;setting-&gt;SSH and GPG key 下</p><p>添加后，在git-bash进行测试，输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 如果返回Hi username ！You’ve successfully ……，说明配置成功</p><h4 id="6-配置-config-yml"><a href="#6-配置-config-yml" class="headerlink" title="6.配置_config.yml"></a>6.配置_config.yml</h4><p>打开你的hexo目录下的_config.yml文档（我用的是notepad++打开的）</p><p>修改最下面的deploy下的内容</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repository :  //这里是你的仓库下，点击Clone ordownload（绿色的）点击Use SSH复制框框内的内容到这里。</span><br><span class="line"></span><br><span class="line">branch：//这里是你的bransh名称，默认为master</span><br></pre></td></tr></table></figure><p>下面来修改 url和 root</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url ：// 是你的github 分配的地址</span><br><span class="line"></span><br><span class="line">root：// 是你的仓库的名字</span><br></pre></td></tr></table></figure><p>一定要注意每一项冒号后有一个英文空格</p><h4 id="7-本地测试"><a href="#7-本地测试" class="headerlink" title="7.本地测试"></a>7.本地测试</h4><p>打开git bash进入博客的根目录（cd + 文件夹名）</p><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>hexo s是开启本地预览服务，打开浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener"> http://localhost:4000</a> 即可看到内容。</p><p>显示的主题是 hexo 默认的</p><p>hexo 操作指令<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">点击这里</a></p><h4 id="8-上传到github仓库"><a href="#8-上传到github仓库" class="headerlink" title="8.上传到github仓库"></a>8.上传到github仓库</h4><p>首先先安装hexo拓展库，打开git bash输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean//清除缓存</span><br><span class="line">hexo g//生成静态文件</span><br><span class="line">hexo d/上传</span><br><span class="line">打开github分配的网站，就可以看到你的blog了</span><br></pre></td></tr></table></figure><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>自己搭建博客可能不是一帆风顺的，可能遇到各种不同的错误，一定要耐得住性子，一步一步来搭建。</p><p>记得，一定要善用搜索，遇到不懂得问题去百度上搜索。</p><p>最后，度娘，可真帅哪！！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo+github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo+github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="/Skr-king.github.io/Hello-world-0.html/"/>
      <url>/Skr-king.github.io/Hello-world-0.html/</url>
      
        <content type="html"><![CDATA[<h5 id="记一次过程经历"><a href="#记一次过程经历" class="headerlink" title="记一次过程经历"></a>记一次过程经历</h5><p> 最近，自己在搭一个博客，用 hexo+github，一开始按照网上的教程下载相应的软件，cmd安装，git bash 安装hexo，最开始可是在自己的本地可以预览，效果不错，直接就上传到github上的我的repo，结果cmd出错，由于对hexo 文件的位置不清，和出现的错误，我直接就删除了hexo，但是不是直接的卸载，有些文件还在（找不到啊 呜呜~），我用重新npm安装，发现还是不行，当时头大到想要格式化电脑了（还好没有，要不然就要重新慢慢下载了），然后我去找baidu，简书，发现自己的许多错误操作。好吧，我又从新开始。还是有error，我就按个所错误，发现自己有许多的本地配置没有设置，我就一条一条的修改（可气人了，一步踩一个坑，一步填一个坑），花了两天才把本地配置好（上课没时间啊）。</p><a id="more"></a><p> 又因为，默认的主题很low（只是个人而言），不怎么喜欢，想换个主题，hexo上面有好多的主题，一个一个翻看，也没有喜欢的，现在比较流行的是NEXT主题（没错我找了度娘），就在网上下载NEXT主题包，一开始的主题内容，没设计的，所以我又找了度娘，还在CSDN上搜搜，发现许多大佬掉了许多的坑，也有填坑的方法(坑和经验，傻傻分不清），就开始一步一步自己搭，终于，经过一天多的自己的骚操作，在清明节的下午本地可以看到比较好的主题设置（还有点不满意，后续会修改）。</p><h5 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h5><p> （真是不作死不会死，谁TM知道我为什么突然想到建博客呢！）</p><p> 经过三天多自己的摸索，我这个小小白终于把自己的blog建成了（~~热烈欢迎大家访问）。在建博客的过程中，真是有点头大了，因为自己对命令行操作一点不了解，完全是两眼一模黑，在黑暗中摸索（哈哈，有点夸张），出现错误也不知道哪里的问题，真的很感谢度娘的帮助（说白了，多谢大佬们的坑啊）。</p><p> 这篇文章的标题是printf(“Hello,world”),学C语言的都知道这是入门的基础程序，我想用这个标题想说，当你去接触一个陌生不懂的东西时，不是一帆风顺的，总会有大波小浪，不过，经过自己的一步一步的摸索总会找到自己的___（你懂的哈），不管如何都不要放弃，既然已经迈开了重要的第一步，就要坚持走到终点。</p><p> 对了，还有还有，“生命在于运动，电脑在于折腾啊”，不管会不会，先折腾折腾吧（坏了我可不管~~)</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> 度娘，真帅！！！</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
