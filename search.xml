<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>冬日</title>
      <link href="/AngelNI.github.io/winter-scenery/"/>
      <url>/AngelNI.github.io/winter-scenery/</url>
      
        <content type="html"><![CDATA[<p>冬日。感谢美丽的摄影师（ORZ）<a id="more"></a></p><img src="https://s2.ax1x.com/2020/01/29/1QP0IK.jpg" alt border="0"><img src="https://s2.ax1x.com/2020/01/29/1QPsRe.jpg" alt border="0"><img src="https://s2.ax1x.com/2020/01/29/1QPDPO.jpg" alt border="0"><img src="https://s2.ax1x.com/2020/01/29/1QPwa6.jpg" alt border="0">]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scenery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PY文件打包成EXE</title>
      <link href="/AngelNI.github.io/py-pkg/"/>
      <url>/AngelNI.github.io/py-pkg/</url>
      
        <content type="html"><![CDATA[<p>奔向远方<a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>py文件打包成exe，就是说将Python程序打包成应用程序，不在只是几十行代码了，是一个可以运行的小应用了。</p><p>就拿我之前写的python爬虫文件，打包后就可以当做应用程序运行了。</p><p><img src="https://s2.ax1x.com/2020/01/30/11VARP.png" alt></p><h1 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h1><p>使用 PyInstaller 将 <a href="http://c.biancheng.net/python/" target="_blank" rel="noopener">Python</a> 程序生成可直接运行的程序，这个程序就可以被分发到对应的 Windows 或 Mac OS X 平台上运行。</p><p><strong>安装</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p><strong>使用pyinstaller打包py文件成exe程序</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">要打包的py文件所在目录执行</span><br><span class="line">pyinstaller -F ant.py</span><br><span class="line"></span><br><span class="line">常用参数说明：</span><br><span class="line">–icon=图标路径</span><br><span class="line">-F 打包成一个exe文件</span><br><span class="line">-w 使用窗口，无控制台</span><br><span class="line">-c 使用控制台，无窗口</span><br><span class="line">-D 创建一个目录，里面包含exe以及其他一些依赖性文件</span><br><span class="line">pyinstaller -h 来查看参数</span><br></pre></td></tr></table></figure><p>生成这两个文件</p><p><img src="https://s2.ax1x.com/2020/01/30/11VRdH.png" alt></p><p>dist文件夹下，就是生成的应用程序</p><p><strong>pyinstaller 改变生成exe程序的图标</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller  -F --icon=my.ico test.py</span><br></pre></td></tr></table></figure><p>my.ico 是一个图标名，和当前的test.py文件在同一个目录下</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyinstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵分解ML-latest-small</title>
      <link href="/AngelNI.github.io/TF-MF/"/>
      <url>/AngelNI.github.io/TF-MF/</url>
      
        <content type="html"><![CDATA[<p>你的努力将成就更好的自己。<a id="more"></a></p><h1 id="矩阵分解并作出推荐"><a href="#矩阵分解并作出推荐" class="headerlink" title="矩阵分解并作出推荐"></a>矩阵分解并作出推荐</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#字符编码！！！</span></span><br><span class="line"><span class="hljs-comment">#-*- Coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data_process</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    ratings = pd.read_csv(<span class="hljs-string">"F:\\ml-latest-small\\ratings.csv"</span>)</span><br><span class="line">    movies = pd.read_csv(<span class="hljs-string">"F:\\ml-latest-small\\movies.csv"</span>)</span><br><span class="line">    movies[<span class="hljs-string">'movieRow'</span>] = movies.index</span><br><span class="line"></span><br><span class="line">    movies = movies[[<span class="hljs-string">'movieRow'</span>,<span class="hljs-string">'movieId'</span>,<span class="hljs-string">'title'</span>]]</span><br><span class="line">    movies.to_csv(<span class="hljs-string">"F:\\ml-latest-small\\moviesProcessed.csv"</span>,index = <span class="hljs-literal">False</span>,header = <span class="hljs-literal">True</span>,encoding = <span class="hljs-string">'utf-8'</span>)</span><br><span class="line">    print(movies.tail())</span><br><span class="line"></span><br><span class="line">    ratings = pd.merge(ratings,movies,on = <span class="hljs-string">'movieId'</span>)</span><br><span class="line">    ratings = ratings[[<span class="hljs-string">'userId'</span>,<span class="hljs-string">'movieRow'</span>,<span class="hljs-string">'rating'</span>]]</span><br><span class="line"></span><br><span class="line">    ratings.to_csv(<span class="hljs-string">'F:\\ml-latest-small\\ratingsProcessed.csv'</span>, index=<span class="hljs-literal">False</span>, header=<span class="hljs-literal">True</span>, encoding=<span class="hljs-string">'utf-8'</span>)</span><br><span class="line">    print(ratings.head())</span><br><span class="line">    <span class="hljs-keyword">return</span> ratings,movies</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#构建矩阵</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_matrix</span><span class="hljs-params">(ratings)</span>:</span></span><br><span class="line">    user_no = ratings[<span class="hljs-string">'userId'</span>].max()+<span class="hljs-number">1</span></span><br><span class="line">    movies_no = ratings[<span class="hljs-string">'movieRow'</span>].max()+<span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    rate = np.zeros((movies_no,user_no))</span><br><span class="line">    print(rate.shape)</span><br><span class="line"></span><br><span class="line">    flag = <span class="hljs-number">0</span></span><br><span class="line">    ratings_length = np.shape(ratings)[<span class="hljs-number">0</span>]</span><br><span class="line">    print(np.shape(ratings))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> ratings.iterrows():</span><br><span class="line">        rate[int(row[<span class="hljs-string">'movieRow'</span>]),int(row[<span class="hljs-string">'userId'</span>])] = row[<span class="hljs-string">'rating'</span>]</span><br><span class="line">        flag+<span class="hljs-number">1</span></span><br><span class="line">    record = rate &gt; <span class="hljs-number">0</span></span><br><span class="line">    record = np.array(record,dtype= int)</span><br><span class="line">    print(record)</span><br><span class="line">    <span class="hljs-keyword">return</span> rate,record,user_no,movies_no</span><br><span class="line"><span class="hljs-comment">#构建模型</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">normalizeRatings</span><span class="hljs-params">(rate,record)</span>:</span></span><br><span class="line">    m,n = rate.shape</span><br><span class="line">    rating_mean = np.zeros((m,<span class="hljs-number">1</span>))</span><br><span class="line">    rating_norm = np.zeros((m,n))</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):</span><br><span class="line">        idx = (record[i,:]!=<span class="hljs-number">0</span>)</span><br><span class="line">        rating_mean[i] = np.mean(rate[i,idx])</span><br><span class="line">        rating_norm[i,idx] = rate[i,idx] - rating_mean[i]</span><br><span class="line">    <span class="hljs-keyword">return</span> rating_norm,rating_mean</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_model</span><span class="hljs-params">(rate,record,movies_no,user_no)</span>:</span></span><br><span class="line">    rating_norm,rating_mean = normalizeRatings(rate,record)</span><br><span class="line">    rating_mean = np.nan_to_num(rating_mean)</span><br><span class="line">    num_features = <span class="hljs-number">12</span></span><br><span class="line">    x = tf.Variable(tf.random_normal([movies_no,num_features],stddev= <span class="hljs-number">0.35</span>))</span><br><span class="line">    theta = tf.Variable(tf.random_normal([user_no,num_features],stddev=<span class="hljs-number">0.35</span>))</span><br><span class="line"></span><br><span class="line">    loss = <span class="hljs-number">1</span>/<span class="hljs-number">2</span> * tf.reduce_sum(((tf.matmul(x, theta, transpose_b=<span class="hljs-literal">True</span>) - rating_norm) * record) ** <span class="hljs-number">2</span>) + \</span><br><span class="line">        <span class="hljs-number">0.5</span>*(<span class="hljs-number">1</span>/<span class="hljs-number">2</span> * (tf.reduce_sum(x ** <span class="hljs-number">2</span>) + tf.reduce_sum(theta ** <span class="hljs-number">2</span>)))</span><br><span class="line"></span><br><span class="line">    train = tf.train.AdamOptimizer(<span class="hljs-number">1e-3</span>).minimize(loss)</span><br><span class="line">    <span class="hljs-keyword">return</span> x,theta,train,loss,rating_mean</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#训练模型</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Train</span><span class="hljs-params">(loss)</span>:</span></span><br><span class="line">    tf.summary.scalar(<span class="hljs-string">'train_loss'</span>,loss)</span><br><span class="line">    summaryMerged = tf.summary.merge_all()</span><br><span class="line">    filename = <span class="hljs-string">"F:\\ml-latest-small\\movie_tensorborad.csv"</span></span><br><span class="line">    writer = tf.summary.FileWriter(filename)</span><br><span class="line">    <span class="hljs-keyword">return</span> summaryMerged,writer </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recommend</span><span class="hljs-params">(movies)</span>:</span></span><br><span class="line">    user_id = input(<span class="hljs-string">u'您要想哪位用户进行推荐？请输入用户编号：'</span>)</span><br><span class="line">    sortedResult = predicts[:, int(user_id)].argsort()[::<span class="hljs-number">-1</span>]</span><br><span class="line">    <span class="hljs-comment"># argsort()函数返回的是数组值从小到大的索引值; argsort()[::-1] 返回的是数组值从大到小的索引值</span></span><br><span class="line">    print(<span class="hljs-string">u'为该用户推荐的评分最高的20部电影是：'</span>.center(<span class="hljs-number">80</span>, <span class="hljs-string">'='</span>))</span><br><span class="line">    <span class="hljs-comment"># center() 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格。</span></span><br><span class="line">    idx = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sortedResult:</span><br><span class="line">        print(<span class="hljs-string">u'评分: %.2f, 电影名: %s'</span> % (predicts[i, int(user_id)]<span class="hljs-number">-2</span>, movies.iloc[i][<span class="hljs-string">'title'</span>]))</span><br><span class="line">        idx += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> idx == <span class="hljs-number">20</span>:</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line"><span class="hljs-comment">#评估模型</span></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    ratings,movies = data_process()</span><br><span class="line">    rate,record,user_no,movies_no =build_matrix(ratings)</span><br><span class="line">    x,theta,train,loss,rating_mean = build_model(rate,record,movies_no,user_no)</span><br><span class="line">    summaryMerged,writer = Train(loss)</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2000</span>):</span><br><span class="line">            _,movie_summary = sess.run([train,summaryMerged])</span><br><span class="line">            writer.add_summary(movie_summary,i)</span><br><span class="line">        current_x,current_theta = sess.run([x,theta])</span><br><span class="line">        predicts = np.dot(current_x,current_theta.T) + rating_mean</span><br><span class="line">        error = np.sqrt(np.sum(((predicts - rate)*record)**<span class="hljs-number">2</span>))</span><br><span class="line">        print(<span class="hljs-string">u'模型评估errors：'</span>, error)</span><br><span class="line">        </span><br><span class="line">        recommend(movies)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">      movieRow  movieId                                      title</span><br><span class="line">9737      9737   193581  Black Butler: Book of the Atlantic (2017)</span><br><span class="line">9738      9738   193583               No Game No Life: Zero (2017)</span><br><span class="line">9739      9739   193585                               Flint (2017)</span><br><span class="line">9740      9740   193587        Bungo Stray Dogs: Dead Apple (2018)</span><br><span class="line">9741      9741   193609        Andrew Dice Clay: Dice Rules (1991)</span><br><span class="line">   userId  movieRow  rating</span><br><span class="line">0       1         0     4.0</span><br><span class="line">1       5         0     4.0</span><br><span class="line">2       7         0     4.5</span><br><span class="line">3      15         0     2.5</span><br><span class="line">4      17         0     4.5</span><br><span class="line">(9742, 611)</span><br><span class="line">(100836, 3)</span><br><span class="line">[[0 1 0 ... 1 1 1]</span><br><span class="line"> [0 0 0 ... 1 0 0]</span><br><span class="line"> [0 1 0 ... 1 0 0]</span><br><span class="line"> ...</span><br><span class="line"> [0 0 0 ... 0 0 0]</span><br><span class="line"> [0 0 0 ... 0 0 0]</span><br><span class="line"> [0 0 0 ... 0 0 0]]</span><br><span class="line"></span><br><span class="line">模型评估errors： 151.9801784601805</span><br><span class="line">您要想哪位用户进行推荐？请输入用户编号：1</span><br><span class="line">==============================为该用户推荐的评分最高的20部电影是：===============================</span><br><span class="line">评分: 5.39, 电影名: Now You See Me (2013)</span><br><span class="line">评分: 4.43, 电影名: Postman, The (Postino, Il) (1994)</span><br><span class="line">评分: 4.40, 电影名: My Neighbor Totoro (Tonari no Totoro) (1988)</span><br><span class="line">评分: 4.35, 电影名: Color Purple, The (1985)</span><br><span class="line">评分: 4.23, 电影名: The Revenant (2015)</span><br><span class="line">评分: 4.21, 电影名: Smoke (1995)</span><br><span class="line">评分: 4.19, 电影名: Big Sleep, The (1946)</span><br><span class="line">评分: 4.19, 电影名: Drugstore Cowboy (1989)</span><br><span class="line">评分: 4.16, 电影名: Whale Rider (2002)</span><br><span class="line">评分: 4.12, 电影名: Gandhi (1982)</span><br><span class="line">评分: 4.10, 电影名: Murder in the First (1995)</span><br><span class="line">评分: 4.10, 电影名: Lone Star (1996)</span><br><span class="line">评分: 4.03, 电影名: Lifeboat (1944)</span><br><span class="line">评分: 4.00, 电影名: Planes, Trains &amp; Automobiles (1987)</span><br><span class="line">评分: 3.99, 电影名: Moonstruck (1987)</span><br><span class="line">评分: 3.93, 电影名: Remains of the Day, The (1993)</span><br><span class="line">评分: 3.91, 电影名: To Kill a Mockingbird (1962)</span><br><span class="line">评分: 3.90, 电影名: Crash (1996)</span><br><span class="line">评分: 3.89, 电影名: Grave of the Fireflies (Hotaru no haka) (1988)</span><br><span class="line">评分: 3.88, 电影名: Wallace &amp; Gromit: The Best of Aardman Animation (1996)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单爬取网站图片</title>
      <link href="/AngelNI.github.io/Crawler/"/>
      <url>/AngelNI.github.io/Crawler/</url>
      
        <content type="html"><![CDATA[<p>涉世浅，点染亦浅；历事深，机械亦深。故君子与其练达，不若朴鲁；与其曲谨，不若疏狂。<a id="more"></a></p><h1 id="pyhton爬取图片"><a href="#pyhton爬取图片" class="headerlink" title="pyhton爬取图片"></a>pyhton爬取图片</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> requests <span class="hljs-comment">#调用第三方库</span></span><br><span class="line"><span class="hljs-keyword">import</span> re <span class="hljs-comment">#正则</span></span><br><span class="line"><span class="hljs-keyword">import</span> urllib.request</span><br><span class="line"><span class="hljs-comment">#print(requests.get(url))</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rree</span><span class="hljs-params">(url)</span>:</span></span><br><span class="line">    wb_date = requests.get(url).text  <span class="hljs-comment">#获取当前网页的Html,返回Unicode格式</span></span><br><span class="line">    <span class="hljs-comment">#返回的是一个包含服务器资源的Response对象。包含从服务器返回的所有的相关资源。</span></span><br><span class="line">    res = re.compile(<span class="hljs-string">r'src="(http.+?jpg)"'</span>) <span class="hljs-comment">#正则表达式匹配图片</span></span><br><span class="line">    reg = re.findall(res,wb_date)</span><br><span class="line">    <span class="hljs-comment">#print(wb_date)</span></span><br><span class="line">    <span class="hljs-keyword">return</span> reg</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span><span class="hljs-params">(reg,path)</span>:</span></span><br><span class="line">    num=<span class="hljs-number">0</span></span><br><span class="line">    path = path</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> reg: <span class="hljs-comment">#遍历</span></span><br><span class="line">        print(i)</span><br><span class="line">        a = requests.get(i)</span><br><span class="line">        <span class="hljs-comment">#f =open('%s.jpg'%nun,'wb')</span></span><br><span class="line">        f =open(path+<span class="hljs-string">'%s.jpg'</span>%num,<span class="hljs-string">'wb'</span>)</span><br><span class="line">        f.write(a.content)<span class="hljs-comment">#requests.get(url).content 返回bytes格式</span></span><br><span class="line">        f.close()</span><br><span class="line">        num=num+<span class="hljs-number">1</span></span><br><span class="line">        print(<span class="hljs-string">'第%s个图片下载完毕'</span>%num)</span><br><span class="line"><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">"__main__"</span>:</span><br><span class="line">    <span class="hljs-comment">#网站链接</span></span><br><span class="line">    url = input(<span class="hljs-string">"Please input the correct url: "</span>)</span><br><span class="line">    <span class="hljs-comment">#储存位置</span></span><br><span class="line">    path  = <span class="hljs-string">"F:/C-and-Python-Algorithn/python/interest/image/ "</span></span><br><span class="line">    reg = rree(url)</span><br><span class="line">    download(reg,path)</span><br></pre></td></tr></table></figure><h2 id="requests-get-url-text"><a href="#requests-get-url-text" class="headerlink" title="requests.get(url).text"></a>requests.get(url).text</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js/src/click.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//libs.baidu.com/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"generator"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"Hexo 3.9.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AngelNI&amp;#39;s Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"google-site-verification"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"JwzmnANXlpmQlhwaSORuqpEB6P3Sr-tRhw4R_XDRcEc"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"baidu-site-verification"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ztPAF2oDcw"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"This is a simple record of learning bits and pieces, so that each step of learning into an unforgettable memory."</span>&gt;</span>    </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"keywords"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"learning note"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"website"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:title"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"AngelNI&amp;#39;s Blog"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:url"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"https://angelni.github.io/index.html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h2 id="re-compile-r’src-”-http-jpg-”‘"><a href="#re-compile-r’src-”-http-jpg-”‘" class="headerlink" title="re.compile(r’src=”(http.+?jpg)”‘)"></a>re.compile(r’src=”(http.+?jpg)”‘)</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!--图片格式--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"thumbnail"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://s2.ax1x.com/2020/01/29/1QPiUf.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"冬日"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">""</span> <span class="hljs-attr">style</span>=<span class="hljs-string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p>拿我的博客举栗</p><p><a href="https://imgchr.com/i/1lX4Gd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/30/1lX4Gd.md.png" alt border="0"></a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个爬虫小程序</title>
      <link href="/AngelNI.github.io/first-crawl/"/>
      <url>/AngelNI.github.io/first-crawl/</url>
      
        <content type="html"><![CDATA[<p>小岛加油！武汉加油！（小岛仍保持着0记录）<a id="more"></a></p><h1 id="第一个爬虫程序"><a href="#第一个爬虫程序" class="headerlink" title="第一个爬虫程序"></a>第一个爬虫程序</h1><p>利用之前编写的简单爬虫的py文件，再利用 pyinstaller（第三方库） 将python打包成exe，通过tkinter（第三方库），实现程序窗口化，通过对窗口内容编辑设置，读入输入，通过button 进行所需要的功能。</p><p>下图是我的爬虫程序</p><p><img src="https://s2.ax1x.com/2020/01/31/13p49U.gif" alt></p><p><img src="https://s2.ax1x.com/2020/01/31/13S0y9.png" alt></p><p><a href="https://pan.baidu.com/s/1QGOVUnsqnrpN9xYUqCXG_A" target="_blank" rel="noopener">百度网盘链接</a>  提取码：c1hm</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 图片转字符串</title>
      <link href="/AngelNI.github.io/str-image/"/>
      <url>/AngelNI.github.io/str-image/</url>
      
        <content type="html"><![CDATA[<p>鲸可落<a id="more"></a></p><h1 id="python-图片转字符串"><a href="#python-图片转字符串" class="headerlink" title="python 图片转字符串"></a>python 图片转字符串</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -- coding=utf-8 --</span></span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#命令行输入参数处理</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="hljs-string">'--file'</span>)     <span class="hljs-comment">#输入文件</span></span><br><span class="line">parser.add_argument(<span class="hljs-string">'-o'</span>, <span class="hljs-string">'--output'</span>)   <span class="hljs-comment">#输出文件</span></span><br><span class="line">parser.add_argument(<span class="hljs-string">'--width'</span>, type = int, default = <span class="hljs-number">80</span>) <span class="hljs-comment">#输出字符画宽</span></span><br><span class="line">parser.add_argument(<span class="hljs-string">'--height'</span>, type = int, default = <span class="hljs-number">80</span>) <span class="hljs-comment">#输出字符画高</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#超参数设定</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">IMG = <span class="hljs-string">"E:\\1.jpg"</span></span><br><span class="line">WIDTH = <span class="hljs-number">57</span></span><br><span class="line">HEIGHT = <span class="hljs-number">41</span></span><br><span class="line">OUTPUT = <span class="hljs-string">"E:\\1.txt"</span></span><br><span class="line"><span class="hljs-comment">#字符序列</span></span><br><span class="line">ascii_char = list(<span class="hljs-string">"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\"^`'. "</span>)</span><br><span class="line"><span class="hljs-comment"># 将256灰度映射到70个字符上</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_char</span><span class="hljs-params">(r,g,b,alpha = <span class="hljs-number">256</span>)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> alpha == <span class="hljs-number">0</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">' '</span></span><br><span class="line">    length = len(ascii_char)</span><br><span class="line">    gray = int(<span class="hljs-number">0.2126</span> * r + <span class="hljs-number">0.7152</span> * g + <span class="hljs-number">0.0722</span> * b)</span><br><span class="line"></span><br><span class="line">    unit = (<span class="hljs-number">256.0</span> + <span class="hljs-number">1</span>)/length</span><br><span class="line">    <span class="hljs-keyword">return</span> ascii_char[int(gray/unit)]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line"><span class="hljs-comment">#读取图片</span></span><br><span class="line">    im = Image.open(IMG)</span><br><span class="line">    <span class="hljs-comment">#resize</span></span><br><span class="line">    im = im.resize((WIDTH,HEIGHT), Image.NEAREST)</span><br><span class="line"></span><br><span class="line">    txt = <span class="hljs-string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(HEIGHT):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(WIDTH):</span><br><span class="line">            txt += get_char(*im.getpixel((j,i)))</span><br><span class="line">        txt += <span class="hljs-string">'\n'</span></span><br><span class="line"><span class="hljs-comment">#打印</span></span><br><span class="line">    print(txt)</span><br><span class="line">    <span class="hljs-comment">#字符画输出到文件</span></span><br><span class="line">    <span class="hljs-keyword">if</span> OUTPUT:</span><br><span class="line">        <span class="hljs-keyword">with</span> open(OUTPUT,<span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            f.write(txt)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">with</span> open(<span class="hljs-string">"output.txt"</span>,<span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">            f.write(txt)</span><br></pre></td></tr></table></figure><p>下面附一张效果图</p><p><img src="https://s2.ax1x.com/2020/01/29/1QtR3D.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> str_image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/AngelNI.github.io/re/"/>
      <url>/AngelNI.github.io/re/</url>
      
        <content type="html"><![CDATA[<p>达人物外之物，思身后之身，宁受一时之寂寞，毋取万古之凄凉。<a id="more"></a></p><h1 id="正则式"><a href="#正则式" class="headerlink" title="正则式"></a>正则式</h1><p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。re 模块使 Python 语言拥有全部的正则表达式功能。</p><h2 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h2><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(re.match(<span class="hljs-string">'www'</span>,<span class="hljs-string">'www.angelni.io'</span>).span())<span class="hljs-comment">#起始位置匹配</span></span><br><span class="line">print(re.match(<span class="hljs-string">'www'</span>,<span class="hljs-string">'www.angelni.io'</span>))<span class="hljs-comment">#非起始位置匹配</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''结果</span></span><br><span class="line"><span class="hljs-string">(0, 3)</span></span><br><span class="line"><span class="hljs-string">&lt;_sre.SRE_Match object; span=(0, 3), match='www'&gt;</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><h2 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(re.search(<span class="hljs-string">'www'</span>,<span class="hljs-string">'www.angelni.io'</span>).span())<span class="hljs-comment">#起始位置匹配</span></span><br><span class="line">print(re.search(<span class="hljs-string">'io'</span>,<span class="hljs-string">'www.angelni.io'</span>).span())</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">(0, 3)</span></span><br><span class="line"><span class="hljs-string">(12, 14)</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><h2 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h2><p>re 模块提供了用于替换字符串中的匹配项。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">phone = <span class="hljs-string">"183-3918-9296 # 这是我的电话号码"</span></span><br><span class="line"><span class="hljs-comment"># 删除字符串中的 Python注释</span></span><br><span class="line">num = re.sub(<span class="hljs-string">r'#.*$'</span>, <span class="hljs-string">""</span>, phone)  <span class="hljs-comment"># r 代表正则表达式,将在后面介绍具体规则</span></span><br><span class="line">print(<span class="hljs-string">"电话号码是："</span>, num)</span><br><span class="line"><span class="hljs-comment"># 删除非数字(-)的字符串 </span></span><br><span class="line">num = re.sub(<span class="hljs-string">r'\D'</span>, <span class="hljs-string">""</span>, phone)</span><br><span class="line">print(<span class="hljs-string">"电话号码是："</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">电话号码是： 183-3918-9296</span></span><br><span class="line"><span class="hljs-string">电话号码是： 18339189296</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h2><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">partten1 = re.compile(<span class="hljs-string">r'\d+'</span>)</span><br><span class="line">partten2 = re.compile(<span class="hljs-string">r'\d'</span>)</span><br><span class="line">result1 = partten1.findall(<span class="hljs-string">'runoob123google456'</span>)</span><br><span class="line">result2 = partten2.findall(<span class="hljs-string">'runoob123google456'</span>)</span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">['123', '456']</span></span><br><span class="line"><span class="hljs-string">['1', '2', '3', '4', '5', '6']</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><h2 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h2><p>split 方法按照能够匹配的子串将字符串分割后返回列表</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(re.split(<span class="hljs-string">'\W+'</span>, <span class="hljs-string">'runoob, runoob, runoob.'</span>))</span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">['runoob23', 'runoob23', 'runoob121', '']</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br></pre></td></tr></table></figure><h2 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h2><p>返回字符串中所有不重叠匹配项的列表。如果模式中存在一个或多个捕获组，则返回组列表；</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern, string, flags=<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-comment">#两种用法</span></span><br><span class="line">pattern = re.compile(<span class="hljs-string">r'\d+'</span>)</span><br><span class="line">pattern.findall(<span class="hljs-string">'one1two2three3four4'</span>)</span><br><span class="line"><span class="hljs-comment">#[1,2,3,4]</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">#注意此处findall()的用法，可传两个参数;</span></span><br><span class="line">pattern = re.compile(<span class="hljs-string">r'\d+'</span>)</span><br><span class="line">re.findall(pattern,<span class="hljs-string">"one123"</span>)</span><br><span class="line"><span class="hljs-comment">#[1,2,3]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的简单操作</title>
      <link href="/AngelNI.github.io/BiTree-Op/"/>
      <url>/AngelNI.github.io/BiTree-Op/</url>
      
        <content type="html"><![CDATA[<p>爱就像蓝天白云，晴空万里，突然暴风雨……<a id="more"></a></p><h1 id="BiTree-Operation"><a href="#BiTree-Operation" class="headerlink" title="BiTree Operation"></a>BiTree Operation</h1><h2 id="1-先序创建二叉树"><a href="#1-先序创建二叉树" class="headerlink" title="1.先序创建二叉树"></a>1.先序创建二叉树</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">BiTree <span class="hljs-title">Creat_Bitree</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> ch;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    BiTree T = <span class="hljs-keyword">new</span> BiNode;</span><br><span class="line">    <span class="hljs-keyword">if</span>(ch ==<span class="hljs-string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;data = ch;</span><br><span class="line">        T-&gt;lchild = Creat_Bitree();</span><br><span class="line">        T-&gt;rchild = Creat_Bitree();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二叉树的深度"><a href="#2-二叉树的深度" class="headerlink" title="2.二叉树的深度"></a>2.二叉树的深度</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*计算二叉树的深度*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Depth</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//递归算法</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> m = Depth(T-&gt;lchild);<span class="hljs-comment">//左子树深度</span></span><br><span class="line">        <span class="hljs-keyword">int</span> n = Depth(T-&gt;rchild);<span class="hljs-comment">//右子树深度</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(m&gt;n)</span><br><span class="line">            <span class="hljs-keyword">return</span> (m+<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> (n+<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-二叉树的节点数"><a href="#3-二叉树的节点数" class="headerlink" title="3.二叉树的节点数"></a>3.二叉树的节点数</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">NodeCount</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<span class="hljs-comment">//结点为空</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//左子树结点+右子树结点+当前结点</span></span><br><span class="line">        <span class="hljs-keyword">return</span> NodeCount(T-&gt;lchild)+NodeCount(T-&gt;rchild)+<span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-二叉树的叶子节点数"><a href="#4-二叉树的叶子节点数" class="headerlink" title="4.二叉树的叶子节点数"></a>4.二叉树的叶子节点数</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leaf_num</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(T-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;T-&gt;rchild==<span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> leaf_num(T-&gt;lchild)+leaf_num(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-复制二叉树"><a href="#5-复制二叉树" class="headerlink" title="5.复制二叉树"></a>5.复制二叉树</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">BiTree <span class="hljs-title">Copy_Tree</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    BiTree newT;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        newT = <span class="hljs-keyword">new</span> BiNode;</span><br><span class="line">        newT-&gt;data = T-&gt;data;</span><br><span class="line">        newT-&gt;lchild = Copy_Tree(T-&gt;lchild);</span><br><span class="line">        newT-&gt;rchild = Copy_Tree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> newT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-镜像二叉树"><a href="#6-镜像二叉树" class="headerlink" title="6.镜像二叉树"></a>6.镜像二叉树</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap_BiNode</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//根据先序的思想对二叉树进行左右子树交换</span></span><br><span class="line">    BiTree t = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        t = T-&gt;lchild;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild;</span><br><span class="line">        T-&gt;rchild = t;</span><br><span class="line">        swap_BiNode(T-&gt;lchild);</span><br><span class="line">        swap_BiNode(T-&gt;rchild); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-判断两棵二叉树是否相等"><a href="#7-判断两棵二叉树是否相等" class="headerlink" title="7.判断两棵二叉树是否相等"></a>7.判断两棵二叉树是否相等</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*判断两棵二叉树是否相等*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Judge_Tree</span><span class="hljs-params">(BiTree T1,BiTree T2)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//左右子树相等</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(!T1&amp;&amp;!T2)<span class="hljs-comment">//都为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!T1||!T2)<span class="hljs-comment">//其中一个为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T1-&gt;data == T2-&gt;data)<span class="hljs-comment">//数据相等</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Judge_Tree(T1-&gt;lchild,T2-&gt;lchild) &amp;&amp; Judge_Tree(T1-&gt;rchild,T2-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-判断是否为完全二叉树"><a href="#8-判断是否为完全二叉树" class="headerlink" title="8.判断是否为完全二叉树"></a>8.判断是否为完全二叉树</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*判断二叉树是否为完全二叉树*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_CBiTree</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">queue</span>&lt;BiTree&gt; q;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">    q.push(T);</span><br><span class="line">    <span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        BiTree p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">if</span>((flag&amp;&amp;(p-&gt;lchild!=<span class="hljs-literal">NULL</span>||p-&gt;rchild!=<span class="hljs-literal">NULL</span>))||(p-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;rchild!=<span class="hljs-literal">NULL</span>))</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(p-&gt;lchild!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">            q.push(p-&gt;lchild);</span><br><span class="line">        <span class="hljs-keyword">if</span>(p-&gt;rchild!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">            q.push(p-&gt;rchild);</span><br><span class="line">        <span class="hljs-keyword">if</span>((p-&gt;lchild!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;rchild==<span class="hljs-literal">NULL</span>)||(p-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;rchild==<span class="hljs-literal">NULL</span>))</span><br><span class="line">            flag = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-总体代码"><a href="#9-总体代码" class="headerlink" title="9.总体代码"></a>9.总体代码</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> data;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span></span><br><span class="line">&#125;BiNode,*BiTree;</span><br><span class="line"><span class="hljs-comment">/*先序创建二叉树*/</span></span><br><span class="line"><span class="hljs-function">BiTree <span class="hljs-title">Creat_Bitree</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> ch;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    BiTree T = <span class="hljs-keyword">new</span> BiNode;</span><br><span class="line">    <span class="hljs-keyword">if</span>(ch ==<span class="hljs-string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;data = ch;</span><br><span class="line">        T-&gt;lchild = Creat_Bitree();</span><br><span class="line">        T-&gt;rchild = Creat_Bitree();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*复制二叉树*/</span></span><br><span class="line"><span class="hljs-function">BiTree <span class="hljs-title">Copy_Tree</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    BiTree newT;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        newT = <span class="hljs-keyword">new</span> BiNode;</span><br><span class="line">        newT-&gt;data = T-&gt;data;</span><br><span class="line">        newT-&gt;lchild = Copy_Tree(T-&gt;lchild);</span><br><span class="line">        newT-&gt;rchild = Copy_Tree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> newT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*计算二叉树的深度*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Depth</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> m = Depth(T-&gt;lchild);</span><br><span class="line">        <span class="hljs-keyword">int</span> n = Depth(T-&gt;rchild);</span><br><span class="line">        <span class="hljs-keyword">if</span>(m&gt;n)</span><br><span class="line">            <span class="hljs-keyword">return</span> (m+<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> (n+<span class="hljs-number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*统计节点数*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">NodeCount</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> NodeCount(T-&gt;lchild)+NodeCount(T-&gt;rchild)+<span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*交换二叉树结点的左右孩子*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap_BiNode</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//根据先序的思想对二叉树进行左右子树交换</span></span><br><span class="line">    BiTree t = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        t = T-&gt;lchild;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild;</span><br><span class="line">        T-&gt;rchild = t;</span><br><span class="line">        swap_BiNode(T-&gt;lchild);</span><br><span class="line">        swap_BiNode(T-&gt;rchild); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*判断两棵二叉树是否相等*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Judge_Tree</span><span class="hljs-params">(BiTree T1,BiTree T2)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//左右子树相等或者左右子树互换相等</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(!T1&amp;&amp;!T2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!T1||!T2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T1-&gt;data == T2-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Judge_Tree(T1-&gt;lchild,T2-&gt;lchild) &amp;&amp; Judge_Tree(T1-&gt;rchild,T2-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*叶子结点数*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">leaf_num</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(T-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;T-&gt;rchild==<span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> leaf_num(T-&gt;lchild)+leaf_num(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*判断二叉树是否为完全二叉树*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_CBiTree</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">queue</span>&lt;BiTree&gt; q;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">    q.push(T);</span><br><span class="line">    <span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        BiTree p = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="hljs-keyword">if</span>((flag&amp;&amp;(p-&gt;lchild!=<span class="hljs-literal">NULL</span>||p-&gt;rchild!=<span class="hljs-literal">NULL</span>))||(p-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;rchild!=<span class="hljs-literal">NULL</span>))</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(p-&gt;lchild!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">            q.push(p-&gt;lchild);</span><br><span class="line">        <span class="hljs-keyword">if</span>(p-&gt;rchild!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">            q.push(p-&gt;rchild);</span><br><span class="line">        <span class="hljs-keyword">if</span>((p-&gt;lchild!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;rchild==<span class="hljs-literal">NULL</span>)||(p-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;rchild==<span class="hljs-literal">NULL</span>))</span><br><span class="line">            flag = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*先序遍历*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_travel</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> ;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c  "</span>,T-&gt;data);</span><br><span class="line">    pre_travel(T-&gt;lchild);</span><br><span class="line">    pre_travel(T-&gt;rchild);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//中序遍历</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in_travel</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        in_travel(T-&gt;lchild);</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        in_travel(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//后序遍历</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">post_travel</span><span class="hljs-params">(BiTree T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        post_travel(T-&gt;lchild);</span><br><span class="line">        post_travel(T-&gt;rchild);</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    BiTree T1,T2,T3;</span><br><span class="line">    <span class="hljs-comment">//先序创建二叉树</span></span><br><span class="line">    T1 = Creat_Bitree();</span><br><span class="line">    <span class="hljs-comment">//深度</span></span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> dep = Depth(T1);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The depth of the BiTree is "</span>&lt;&lt;dep&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//节点数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> node_num = NodeCount(T1);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The number of the Node of the BiTree  is "</span>&lt;&lt;node_num&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//叶子节点数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> leaf_n = leaf_num(T1);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The number of leaf Node is "</span>&lt;&lt;leaf_n&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//复制二叉树</span></span><br><span class="line">    T2 = Copy_Tree(T1);</span><br><span class="line">    T3 = Copy_Tree(T1);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The following traversal results are pre-order traversal"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The copying result:"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T1 : "</span>;pre_travel(T1);<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T2 : "</span>;pre_travel(T2);<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T3 : "</span>;pre_travel(T3);<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//镜像二叉树</span></span><br><span class="line">    swap_BiNode(T2);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The swaping result: "</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T2 : "</span>;pre_travel(T2);<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//判断是否相等</span></span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T1 and T2 are "</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(Judge_Tree(T1,T2))</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Equal"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Different"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T1 and T3 are "</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(Judge_Tree(T1,T3))</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Equal"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Different"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//是否为完全二叉树</span></span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T1 is "</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(is_CBiTree(T1))</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"CBT"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"not CBT"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"T2 is "</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(is_CBiTree(T2))</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"CBT"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"not CBT"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-comment">//测试样例A B D H # # # E # # C F # # G # #</span></span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如下</strong></p><p><img src="https://s2.ax1x.com/2020/01/29/1Mv2NQ.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BiTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TF-RNN</title>
      <link href="/AngelNI.github.io/TF-RNN/"/>
      <url>/AngelNI.github.io/TF-RNN/</url>
      
        <content type="html"><![CDATA[<p>愿天堂也有亲爱的篮球。<a id="more"></a></p><h1 id="TF-RecurrentNeuralNetwork"><a href="#TF-RecurrentNeuralNetwork" class="headerlink" title="TF-RecurrentNeuralNetwork"></a>TF-RecurrentNeuralNetwork</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">from</span> tensorflow.examples.tutorials.mnist <span class="hljs-keyword">import</span> input_data</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-comment">#读取数据</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="hljs-string">"data/MNIST_data/"</span>, one_hot = <span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#设置常量</span></span><br><span class="line">n_inputs = <span class="hljs-number">28</span></span><br><span class="line">max_size = <span class="hljs-number">28</span></span><br><span class="line">lstm_size = <span class="hljs-number">100</span></span><br><span class="line">classes = <span class="hljs-number">10</span></span><br><span class="line">batch_size = <span class="hljs-number">50</span></span><br><span class="line">n_batch = mnist.train.num_examples/batch_size</span><br><span class="line"><span class="hljs-comment">#占位符</span></span><br><span class="line">x = tf.placeholder(tf.float32,[<span class="hljs-literal">None</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>])</span><br><span class="line">y = tf.placeholder(tf.float32,[<span class="hljs-literal">None</span>,<span class="hljs-number">10</span>])</span><br><span class="line"><span class="hljs-comment">#权值</span></span><br><span class="line">weight = tf.Variable(tf.truncated_normal([lstm_size,classes],stddev = <span class="hljs-number">0.1</span>))</span><br><span class="line"><span class="hljs-comment">#偏执</span></span><br><span class="line">bias = tf.Variable(tf.constant(<span class="hljs-number">0.1</span>,shape = [classes]))</span><br><span class="line"><span class="hljs-comment">#构建RNN</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RNN</span><span class="hljs-params">(x,weight,bias)</span>:</span></span><br><span class="line">    inputs = tf.reshape(x,[<span class="hljs-number">-1</span>,max_size,n_inputs])</span><br><span class="line">    lstm_cell = tf.contrib.rnn.BasicLSTMCell(lstm_size)</span><br><span class="line">    outputs ,finall_state = tf.nn.dynamic_rnn(lstm_cell,inputs,dtype = tf.float32)</span><br><span class="line">    result = tf.nn.softmax(tf.matmul(finall_state[<span class="hljs-number">1</span>],weight)+bias)</span><br><span class="line">    <span class="hljs-keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prediction = RNN(x,weight,bias)</span><br><span class="line">loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = prediction,labels=y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(<span class="hljs-number">1e-4</span>).minimize(loss)</span><br><span class="line">correct_pre = tf.equal(tf.argmax(y,<span class="hljs-number">1</span>),tf.argmax(prediction,<span class="hljs-number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_pre,tf.float32))</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">20</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> range(int(n_batch)):</span><br><span class="line">            batch_x,batch_y = mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(optimizer,feed_dict=&#123;x:batch_x,y:batch_y&#125;)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</span><br><span class="line">        print(<span class="hljs-string">"Iter"</span> + str(epoch)+<span class="hljs-string">",Accuracy :"</span>+str(acc))</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Iter0,Accuracy :0.7592</span><br><span class="line">Iter1,Accuracy :0.8672</span><br><span class="line">Iter2,Accuracy :0.902</span><br><span class="line">Iter3,Accuracy :0.917</span><br><span class="line">Iter4,Accuracy :0.9247</span><br><span class="line">Iter5,Accuracy :0.9285</span><br><span class="line">Iter6,Accuracy :0.9417</span><br><span class="line">Iter7,Accuracy :0.943</span><br><span class="line">Iter8,Accuracy :0.9463</span><br><span class="line">Iter9,Accuracy :0.9452</span><br><span class="line">Iter10,Accuracy :0.952</span><br><span class="line">Iter11,Accuracy :0.9519</span><br><span class="line">Iter12,Accuracy :0.9533</span><br><span class="line">Iter13,Accuracy :0.9536</span><br><span class="line">Iter14,Accuracy :0.9542</span><br><span class="line">Iter15,Accuracy :0.958</span><br><span class="line">Iter16,Accuracy :0.9618</span><br><span class="line">Iter17,Accuracy :0.9607</span><br><span class="line">Iter18,Accuracy :0.9563</span><br><span class="line">Iter19,Accuracy :0.9561</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TF-CNN</title>
      <link href="/AngelNI.github.io/TF-CNN/"/>
      <url>/AngelNI.github.io/TF-CNN/</url>
      
        <content type="html"><![CDATA[<p>低头不是认输，是要看清自己的路；仰头不是骄傲，是要看见自己的天空。——科比·布莱恩特<a id="more"></a></p><h1 id="TF-ConvNets"><a href="#TF-ConvNets" class="headerlink" title="TF-ConvNets"></a>TF-ConvNets</h1><p>卷积神经网络比普通的神经网络多了卷积层，池化层和平滑层，最后一层的激活函数为softmax。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-comment">#手写数字数据集</span></span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow.examples.tutorials.mnist.input_data <span class="hljs-keyword">as</span> input_data</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt </span><br><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time </span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-comment">#屏蔽INFO + WARNING，输出ERROR + FATAL</span></span><br><span class="line">os.environ[<span class="hljs-string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="hljs-string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">定义重复使用的函数</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-comment">#显示手写图片</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(image)</span>:</span></span><br><span class="line">    plt.imshow(image.reshape(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>),cmap=<span class="hljs-string">'binary'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_image_label_prediction</span><span class="hljs-params">(images,labels,prediction=[],idx= <span class="hljs-number">0</span> ,num = <span class="hljs-number">10</span>)</span>:</span></span><br><span class="line">    fig = plt.gcf()</span><br><span class="line">    fig.set_size_inches(<span class="hljs-number">12</span>,<span class="hljs-number">14</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> num&gt;<span class="hljs-number">25</span>:</span><br><span class="line">        num = <span class="hljs-number">25</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):</span><br><span class="line">        ax = plt.subplot(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>+i)</span><br><span class="line">        ax.imshow(np.reshape(images[idx],(<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)),cmap = <span class="hljs-string">"binary"</span>)</span><br><span class="line">        title = <span class="hljs-string">"label ="</span>+str(np.argmax(labels[idx]))</span><br><span class="line">        <span class="hljs-keyword">if</span> len(prediction)&gt;<span class="hljs-number">0</span>:</span><br><span class="line">            title += <span class="hljs-string">", prediction = "</span>+ str(prediction[idx])</span><br><span class="line">        ax.set_title(title,fontsize = <span class="hljs-number">10</span>)</span><br><span class="line">        ax.set_xticks([])</span><br><span class="line">        ax.set_yticks([])</span><br><span class="line">        idx+=<span class="hljs-number">1</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义隐藏层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">layter</span><span class="hljs-params">(out_dim,in_dim,inputs,activation = None)</span>:</span></span><br><span class="line">    w = tf.Variable(tf.random_normal([in_dim,out_dim]))<span class="hljs-comment">#权值</span></span><br><span class="line">    b = tf.Variable(tf.random_normal([<span class="hljs-number">1</span>,out_dim]))<span class="hljs-comment">#偏执</span></span><br><span class="line">    wbx = tf.matmul(inputs,w)+b<span class="hljs-comment">#计算</span></span><br><span class="line">    <span class="hljs-comment">#激活函数</span></span><br><span class="line">    <span class="hljs-keyword">if</span> activation <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        outputs = wbx</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        outputs = activation(wbx)</span><br><span class="line">    <span class="hljs-keyword">return</span> outputs</span><br><span class="line"><span class="hljs-comment">#定义权值变量</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weight</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tf.Variable(tf.truncated_normal(shape,stddev = <span class="hljs-number">0.1</span>),name = <span class="hljs-string">'w'</span>)</span><br><span class="line"><span class="hljs-comment">#定义偏执变量</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bias</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tf.Variable(tf.constant(<span class="hljs-number">0.1</span>,shape = shape),name = <span class="hljs-string">'b'</span>)</span><br><span class="line"><span class="hljs-comment">#定义卷积层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span><span class="hljs-params">(x,w)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tf.nn.conv2d(x,w,strides = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],padding = <span class="hljs-string">'SAME'</span>)</span><br><span class="line"><span class="hljs-comment">#定义最大池化</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_pool_2x2</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tf.nn.max_pool(x,ksize = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],strides = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],padding = <span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#下载数据集</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="hljs-string">"data/MNIST_data/"</span>, one_hot = <span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-comment">#打印第一个标签</span></span><br><span class="line">print(<span class="hljs-string">"labels[0]: "</span>,mnist.train.labels[<span class="hljs-number">0</span>])</span><br><span class="line">print(<span class="hljs-string">"labels[0]: "</span>,np.argmax(mnist.train.labels[<span class="hljs-number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#两个卷积层和池化层</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"Input_layter"</span>):</span><br><span class="line">    x = tf.placeholder(<span class="hljs-string">"float"</span>,[<span class="hljs-literal">None</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>],name=<span class="hljs-string">'x'</span>)<span class="hljs-comment">#占位符</span></span><br><span class="line">    x_image = tf.reshape(x,[<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">1</span>])</span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"C1_Conv"</span>):</span><br><span class="line">    w1 = weight([<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>])</span><br><span class="line">    b1 = bias([<span class="hljs-number">16</span>])</span><br><span class="line">    Conv1 = conv2d(x_image,w1) + b1</span><br><span class="line">    C1_Conv = tf.nn.relu(Conv1)</span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"C1_Pool"</span>):</span><br><span class="line">    C1_Pool = max_pool_2x2(C1_Conv)</span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"C2_Conv"</span>):</span><br><span class="line">    w2 = weight([<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">16</span>,<span class="hljs-number">36</span>])</span><br><span class="line">    b2 = bias([<span class="hljs-number">36</span>])</span><br><span class="line">    Conv2 = conv2d(C1_Pool,w2)+b2</span><br><span class="line">    C2_Conv = tf.nn.relu(Conv2)</span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"C2_Pool"</span>):</span><br><span class="line">    C2_Pool = max_pool_2x2(C2_Conv)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#平化层</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"D_Flat"</span>):</span><br><span class="line">    D_Flat = tf.reshape(C2_Pool,[<span class="hljs-number">-1</span>,<span class="hljs-number">1764</span>])</span><br><span class="line"><span class="hljs-comment">#隐藏层</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"D_Hidden_Layer"</span>):</span><br><span class="line">    w3 = weight([<span class="hljs-number">1764</span>,<span class="hljs-number">128</span>])</span><br><span class="line">    b3 = bias([<span class="hljs-number">128</span>])</span><br><span class="line">    D_Hidden = tf.nn.relu(tf.matmul(D_Flat,w3)+b3)</span><br><span class="line">    D_Hidden_Dropout = tf.nn.dropout(D_Hidden,keep_prob= <span class="hljs-number">0.8</span>)</span><br><span class="line"><span class="hljs-comment">#输出层</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"Output_layter"</span>):</span><br><span class="line">    w4 = weight([<span class="hljs-number">128</span>,<span class="hljs-number">10</span>])</span><br><span class="line">    b4 = bias([<span class="hljs-number">10</span>])</span><br><span class="line">    y_pre = tf.nn.softmax(tf.matmul(D_Hidden_Dropout,w4)+b4) </span><br><span class="line"><span class="hljs-comment">#优化器</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"Optimizer"</span>):</span><br><span class="line">    y_label = tf.placeholder(<span class="hljs-string">"float"</span>,[<span class="hljs-literal">None</span>,<span class="hljs-number">10</span>],name = <span class="hljs-string">"y_label"</span>)</span><br><span class="line">    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = y_pre,labels = y_label))</span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate = <span class="hljs-number">0.001</span>).minimize(loss)</span><br><span class="line"><span class="hljs-comment">#评估</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.name_scope(<span class="hljs-string">"evaluate_accuracy"</span>):</span><br><span class="line">    correct_predict = tf.equal(tf.argmax(y_label,<span class="hljs-number">1</span>),tf.argmax(y_pre,<span class="hljs-number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_predict,<span class="hljs-string">"float"</span>))</span><br><span class="line"><span class="hljs-comment">#定义超参数</span></span><br><span class="line">epochs = <span class="hljs-number">15</span></span><br><span class="line">batch_size = <span class="hljs-number">100</span></span><br><span class="line">total_batches = int(mnist.train.num_examples/batch_size)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#列表储存结果</span></span><br><span class="line">loss_list = []</span><br><span class="line">epochs_list = []</span><br><span class="line">accuracy_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time()</span><br><span class="line"><span class="hljs-comment">#全局变量初始化</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    print(<span class="hljs-string">'-'</span>*<span class="hljs-number">24</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(epochs):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(total_batches):</span><br><span class="line">            batch_x , batch_y = mnist.train.next_batch(batch_size)</span><br><span class="line">            sess.run(optimizer,feed_dict = &#123;x:batch_x,y_label: batch_y&#125;)</span><br><span class="line">        los , acc = sess.run([loss,accuracy],feed_dict = &#123;x:mnist.validation.images,y_label:mnist.validation.labels&#125;)</span><br><span class="line">        epochs_list.append(i)</span><br><span class="line">        loss_list.append(los)</span><br><span class="line">        accuracy_list.append(acc)</span><br><span class="line">        print(<span class="hljs-string">"Train Epoch: "</span>,<span class="hljs-string">"%2d, "</span>%(i+<span class="hljs-number">1</span>),<span class="hljs-string">"Loss = &#123;:.9f&#125;, "</span>.format(los),<span class="hljs-string">"Accuracy = "</span>,acc)</span><br><span class="line">        print(<span class="hljs-string">"-"</span>*<span class="hljs-number">24</span>)</span><br><span class="line">    duration = time() - start_time</span><br><span class="line">    print(<span class="hljs-string">"Train finished task: "</span>,duration)</span><br><span class="line">    print(<span class="hljs-string">"-"</span>*<span class="hljs-number">24</span>)</span><br><span class="line">    print(<span class="hljs-string">"Accuracy: "</span>,sess.run(accuracy,feed_dict = &#123;x:mnist.test.images,y_label:mnist.test.labels&#125;))</span><br><span class="line">    prediction_result = sess.run(tf.argmax(y_pre,<span class="hljs-number">1</span>),feed_dict = &#123;x:mnist.test.images&#125;)</span><br><span class="line">    print(<span class="hljs-string">"predict result: "</span>,prediction_result[:<span class="hljs-number">10</span>])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    plot_image_label_prediction(mnist.test.images,mnist.test.labels,prediction_result,num = <span class="hljs-number">25</span>)</span><br><span class="line">    merged = tf.summary.merge_all()</span><br><span class="line">    train_train_writer = tf.summary.FileWriter(<span class="hljs-string">"log/tfCNN/"</span>, sess.graph)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">labels[0]:  [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]</span><br><span class="line">labels[0]:  7</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   1,  Loss = 1.583467722,  Accuracy =  0.8794</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   2,  Loss = 1.575986981,  Accuracy =  0.884</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   3,  Loss = 1.484323025,  Accuracy =  0.9774</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   4,  Loss = 1.478819370,  Accuracy =  0.9828</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   5,  Loss = 1.477949262,  Accuracy =  0.9838</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   6,  Loss = 1.478563309,  Accuracy =  0.983</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   7,  Loss = 1.475089312,  Accuracy =  0.9864</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   8,  Loss = 1.475567698,  Accuracy =  0.9858</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:   9,  Loss = 1.474923730,  Accuracy =  0.9864</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:  10,  Loss = 1.473058224,  Accuracy =  0.9884</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:  11,  Loss = 1.471417427,  Accuracy =  0.99</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:  12,  Loss = 1.473668575,  Accuracy =  0.988</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:  13,  Loss = 1.472185969,  Accuracy =  0.9886</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:  14,  Loss = 1.474017739,  Accuracy =  0.9866</span><br><span class="line">------------------------</span><br><span class="line">Train Epoch:  15,  Loss = 1.472573996,  Accuracy =  0.9886</span><br><span class="line">------------------------</span><br><span class="line">Train finished task:  1015.9626131057739</span><br><span class="line">------------------------</span><br><span class="line">Accuracy:  0.9875</span><br><span class="line">predict result:  [7 2 1 0 4 1 4 9 5 9]</span><br></pre></td></tr></table></figure><h1 id="重要函数分解"><a href="#重要函数分解" class="headerlink" title="重要函数分解"></a>重要函数分解</h1><h2 id="1-tf-nn-conv2d"><a href="#1-tf-nn-conv2d" class="headerlink" title="1.tf.nn.conv2d"></a>1.tf.nn.conv2d</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">W = tf.truncated_normal([5, 5, 1, 32], stddev=0.1)</span><br><span class="line">tf.nn.conv2d(x, W, strides=[1, 2, 2, 1], padding=&apos;SAME&apos;)</span><br><span class="line"></span><br><span class="line">1.shape = [5,5,1,32] ,卷积核长宽为5,5；通道数为1，卷积核个数32（输出32张图）</span><br><span class="line">2.strides=[1, 2, 2, 1]，规定前后必唯 1 ，中间两个数表示水平滑动和垂直滑动步长值</span><br><span class="line">3.padding=&apos;SAME&apos;，表示在扫描时，如果遇到卷积核比剩下的元素要大时，这个时候需要补0进行最后一次的行扫描或者列扫描</span><br></pre></td></tr></table></figure><h2 id="2-tf-nn-max-pool"><a href="#2-tf-nn-max-pool" class="headerlink" title="2.tf.nn.max_pool"></a>2.tf.nn.max_pool</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.max_pool(value, ksize, strides, padding, name=None)</span><br><span class="line">1.value，池化输入，通常是feature map ,shape=[1,height,width,1]</span><br><span class="line">2.ksize,池化窗口大小，一般是[1, height, width, 1]</span><br><span class="line">3.strides,与卷积类似，窗口在每一个维度上滑动的步长，一般也是[1, stride,stride, 1]</span><br><span class="line">4.padding，和卷积类似，shape=[batch, height, width, channels]</span><br></pre></td></tr></table></figure><h2 id="3-tf-nn-softmax-cross-entropy-with-logits"><a href="#3-tf-nn-softmax-cross-entropy-with-logits" class="headerlink" title="3.tf.nn.softmax_cross_entropy_with_logits"></a>3.tf.nn.softmax_cross_entropy_with_logits</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">损失函数</span><br><span class="line">tf.nn.softmax_cross_entropy_with_logits(logits, labels, name=None)</span><br><span class="line">1.logits，神经网络最后一层的输出</span><br><span class="line">如果有batch的话，它的大小就是[batchsize，num_classes]，单样本的话，大小就是num_classes</span><br><span class="line">2.labels，实际的标签</span><br></pre></td></tr></table></figure><h2 id="4-tf-equal"><a href="#4-tf-equal" class="headerlink" title="4.tf.equal"></a>4.tf.equal</h2><p>入门必备——判断是否相等</p><h2 id="5-tf-argmax"><a href="#5-tf-argmax" class="headerlink" title="5.tf.argmax"></a>5.tf.argmax</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.argmax(vector, 1)：</span><br><span class="line">返回的是vector中的最大值的索引号，</span><br><span class="line">如果vector是一个向量，那就返回一个值，如果是一个矩阵，那就返回一个向量，这个向量的每一个维度都是相对应矩阵行的最大值元素的索引号。</span><br></pre></td></tr></table></figure><h2 id="6-tf-summary-merge-all"><a href="#6-tf-summary-merge-all" class="headerlink" title="6.tf.summary.merge_all"></a>6.tf.summary.merge_all</h2><p>自动管理模式</p><h2 id="7-tf-nn-softmax"><a href="#7-tf-nn-softmax" class="headerlink" title="7.tf.nn.softmax"></a>7.tf.nn.softmax</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">激活函数</span><br><span class="line">函数定义</span><br><span class="line">softmax = tf.exp(logits) / tf.reduce_sum(tf.exp(logits), axis)</span><br></pre></td></tr></table></figure><h2 id="8-tf-reshape"><a href="#8-tf-reshape" class="headerlink" title="8.tf.reshape"></a>8.tf.reshape</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数的作用是将tensor变换为参数shape形式</span><br></pre></td></tr></table></figure><h2 id="9-tf-train-AdamOptimizer"><a href="#9-tf-train-AdamOptimizer" class="headerlink" title="9.tf.train.AdamOptimizer"></a>9.tf.train.AdamOptimizer</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tf.train.AdamOptimizer()函数是Adam优化算法：是一个寻找全局最优点的优化算法，引入了二次方梯度校正。</span><br><span class="line">tf.train.AdamOptimizer.__init__(</span><br><span class="line">learning_rate=0.001, </span><br><span class="line">beta1=0.9, </span><br><span class="line">beta2=0.999, </span><br><span class="line">epsilon=1e-08, </span><br><span class="line">use_locking=False, </span><br><span class="line">name=&apos;Adam&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="10-tf-cast"><a href="#10-tf-cast" class="headerlink" title="10.tf.cast"></a>10.tf.cast</h2><p>数据类型转换</p><h2 id="11-tf-nn-dropout"><a href="#11-tf-nn-dropout" class="headerlink" title="11.tf.nn.dropout"></a>11.tf.nn.dropout</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tf.nn.dropout()是tensorflow里面为了防止或减轻过拟合而使用的函数，它一般用在全连接层</span><br><span class="line">tf.nn.dropout(</span><br><span class="line">    x,</span><br><span class="line">    keep_prob,</span><br><span class="line">    noise_shape=None,</span><br><span class="line">    seed=None</span><br><span class="line">    name=None</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TF-NN</title>
      <link href="/AngelNI.github.io/TF-NN/"/>
      <url>/AngelNI.github.io/TF-NN/</url>
      
        <content type="html"><![CDATA[<p>他只是趁着凌晨四点去另一个世界训练了.<a id="more"></a></p><h1 id="TF-Neural-Network"><a href="#TF-Neural-Network" class="headerlink" title="TF-Neural Network"></a>TF-Neural Network</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#构建隐藏层build the hidden layer</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_layter</span><span class="hljs-params">(inputs,in_size,out_size,activation_function = None)</span>:</span></span><br><span class="line">    <span class="hljs-comment">#权值weight</span></span><br><span class="line">    weight = tf.Variable(tf.random_normal([in_size,out_size]))</span><br><span class="line">    <span class="hljs-comment">#tf.random_normal()正态分布的数据[in_size,out_size]的矩阵</span></span><br><span class="line">    <span class="hljs-comment">#偏执</span></span><br><span class="line">    bias = tf.Variable(tf.zeros(shape = [<span class="hljs-number">1</span>,out_size])+<span class="hljs-number">0.1</span>)</span><br><span class="line">    wx_plus = tf.matmul(inputs,weight)+bias<span class="hljs-comment">#矩阵相乘</span></span><br><span class="line">    <span class="hljs-keyword">if</span> activation_function <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:</span><br><span class="line">        outputs = wx_plus</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        outputs = activation_function(wx_plus)<span class="hljs-comment">#calcute the activative function</span></span><br><span class="line">    <span class="hljs-keyword">return</span> outputs</span><br><span class="line"><span class="hljs-comment">#-1 to 1 size = 3000 等差数列</span></span><br><span class="line">x = np.linspace(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3000</span>,dtype = np.float32)[:,np.newaxis]</span><br><span class="line"><span class="hljs-comment">#添加噪声add noize</span></span><br><span class="line">noise = np.random.normal(<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>,x.shape).astype(np.float32)</span><br><span class="line"><span class="hljs-comment">#数据data</span></span><br><span class="line">y = np.square(x)+noise<span class="hljs-number">-0.5</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#显示数据view the data</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span><br><span class="line">ax.scatter(x,y)</span><br><span class="line">plt.ion()<span class="hljs-comment">#打开交互模式</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#占位符</span></span><br><span class="line">xx = tf.placeholder(tf.float32,[<span class="hljs-literal">None</span>,<span class="hljs-number">1</span>])</span><br><span class="line">yy = tf.placeholder(tf.float32,[<span class="hljs-literal">None</span>,<span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">设置隐藏层数和每层的神经元个数</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line">l1 = add_layter(xx,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,activation_function = tf.nn.relu)</span><br><span class="line">l2 = add_layter(l1,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,activation_function = tf.nn.relu)</span><br><span class="line">l3 = add_layter(l2,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,activation_function = tf.nn.relu)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">###定义输出层</span></span><br><span class="line">outputs = add_layter(l1,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,activation_function=<span class="hljs-literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">##定义损失函数</span></span><br><span class="line"><span class="hljs-comment">##线性回归问题，loss = MSE</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(yy-outputs),reduction_indices=[<span class="hljs-number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#train 训练</span></span><br><span class="line">train = tf.train.GradientDescentOptimizer(learning_rate = <span class="hljs-number">0.1</span>).minimize(loss = loss)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#initial 初始化</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#create the graph 创建图</span></span><br><span class="line"><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):</span><br><span class="line">        sess.run(train,feed_dict = &#123;xx:x,yy:y&#125;)</span><br><span class="line">        <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:</span><br><span class="line">            print(sess.run(loss,feed_dict=&#123;xx:x,yy:y&#125;))</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                ax.lines.remove(lines[<span class="hljs-number">0</span>])</span><br><span class="line">            <span class="hljs-keyword">except</span> Exception:</span><br><span class="line">                <span class="hljs-keyword">pass</span></span><br><span class="line">            prediction = sess.run(outputs,feed_dict = &#123;xx:x&#125;)</span><br><span class="line">            lines = ax.plot(x,prediction,<span class="hljs-string">'r-'</span>,lw = <span class="hljs-number">5</span>)</span><br><span class="line">            plt.pause(<span class="hljs-number">0.5</span>)</span><br></pre></td></tr></table></figure><p>线性回归方程拟合动态图(matplotlib制作)<br><img src="https://s2.ax1x.com/2020/01/27/1nzb59.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Neural_Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TF-GD</title>
      <link href="/AngelNI.github.io/TF-GD/"/>
      <url>/AngelNI.github.io/TF-GD/</url>
      
        <content type="html"><![CDATA[<p>有生才有死，有暗才有光。——科比·布莱恩特<a id="more"></a></p><h1 id="TF-GradientDescent"><a href="#TF-GradientDescent" class="headerlink" title="TF_GradientDescent"></a>TF_GradientDescent</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf <span class="hljs-comment">#导包</span></span><br><span class="line"><span class="hljs-comment">##采用线性模型y = w*x+b，实现简单的GD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">##模型参数Model parameters</span></span><br><span class="line">w = tf.Variable([<span class="hljs-number">.3</span>],dtype = tf.float32)</span><br><span class="line">b = tf.Variable([<span class="hljs-number">-.3</span>],dtype = tf.float32)</span><br><span class="line">learn_rate = <span class="hljs-number">0.01</span><span class="hljs-comment">#学习效率</span></span><br><span class="line">loop = <span class="hljs-number">1000</span><span class="hljs-comment">#迭代次数</span></span><br><span class="line"><span class="hljs-comment">##模型输入输出，Model input and output</span></span><br><span class="line">x = tf.placeholder(tf.float32)<span class="hljs-comment">#占位符</span></span><br><span class="line">y = tf.placeholder(tf.float32)<span class="hljs-comment">#占位符</span></span><br><span class="line">liner = w*x+b<span class="hljs-comment">#模型</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">##计算损失函数 calculate the loss</span></span><br><span class="line">loss = tf.reduce_sum(tf.square(liner-y))<span class="hljs-comment">#一维张量平方差和</span></span><br><span class="line"><span class="hljs-comment">##优化器optimizer </span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learn_rate)<span class="hljs-comment">#设置学习效率</span></span><br><span class="line">train = optimizer.minimize(loss)<span class="hljs-comment">#梯度计算和梯度更新</span></span><br><span class="line"><span class="hljs-comment">#此处处理特殊数据时建议将二者操作分开，可以对计算的梯度进行限制，防止梯度消失和爆炸</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#training data</span></span><br><span class="line">x_train = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]</span><br><span class="line">y_train = [<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-3</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#训练training</span></span><br><span class="line">init = tf.global_variables_initializer()<span class="hljs-comment">#初始化参数</span></span><br><span class="line"><span class="hljs-comment">#creat the graph 创建图</span></span><br><span class="line">los = []</span><br><span class="line">step = []</span><br><span class="line"><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(loop):</span><br><span class="line">        sess.run(train,&#123;x:x_train,y:y_train&#125;)</span><br><span class="line">        cur_w,cur_b,cur_loss = sess.run([w,b,loss],&#123;x:x_train,y:y_train&#125;)</span><br><span class="line">        step.append(i)</span><br><span class="line">        los.append(cur_loss)</span><br><span class="line">        <span class="hljs-comment">#print("w: %s b: %s loss: %s "%(cur_w,cur_b,cur_loss))</span></span><br><span class="line"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">plt.scatter(step,los,color = <span class="hljs-string">'r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到的损失函数图像如下：</p><p><img src="https://s2.ax1x.com/2020/01/27/1nbB8O.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GradientDescent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Vscode背景</title>
      <link href="/AngelNI.github.io/vscodebackground/"/>
      <url>/AngelNI.github.io/vscodebackground/</url>
      
        <content type="html"><![CDATA[<p>我从不会倒下，我是打不死的小强。<a id="more"></a></p><h1 id="Vscode设置背景"><a href="#Vscode设置背景" class="headerlink" title="Vscode设置背景"></a>Vscode设置背景</h1><p>打开安装目录，拿我的举个栗子E:\VScode\Microsoft VS Code\resources\app\out\vs\workbench，找到该目录下的workbench.desktop.main.css文件右键编辑，添加如下代码，注意是添加。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">'file:///E:/VScode/Microsoft VS Code/61.png'</span>);<span class="hljs-comment">/*在这里添加图片路径*/</span></span><br><span class="line">    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.75</span>;</span><br><span class="line">    <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启,他会提示vscode损坏，忽略就行了。</p><p>效果图如下：</p><p><img src="https://s2.ax1x.com/2020/01/03/lUt4Fx.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西南民族大学程序竞赛</title>
      <link href="/AngelNI.github.io/nowcoder-3/"/>
      <url>/AngelNI.github.io/nowcoder-3/</url>
      
        <content type="html"><![CDATA[<p>No matter what activities you join,whether you want or not, you could gain unexpected something .<a id="more"></a></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/A" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/A</a></p><p> 在SMU算法竞赛团队中，谁的地位最高呢？答案是毋庸置疑的——大家发自内心爱戴的川川教练。川川教练对队内事务都非常上心，队员们的需求都尽量满足，队员们的问题也都尽快解决。但是最近川川总感觉力不从心，什么都要自己做实在是太累了！所以他需要你的帮助，这样他就可以有更多的时间和精力去和领导斗智斗勇，去为团队争取更多经费。最近，川川教练需要在新加入的集训队员中，挑选出一支最强的队伍去参加大学生程序设计竞赛。 </p><p>​    川川之前太忙了，并不了解新的集训队员，只能根据HJ提供的队员能力值来筛选队员了。我们的大原则就是强强联手。具体的，新的集训队员一共n个人，HJ会为你提供每个人的编程能力值w。你需要找到编程能力值之和最大的三个人，输出他们的编程能力值之和。特别的，如果找不到一个队伍的编程能力值之和大于m，则输出”Waiver!”。  </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个整数n，一个整数m，中间用空格隔开。第二行输入n个整数wiw_iwi代表编程能力值。保证所有数据：3≤n≤1003 \leq n \leq 1003≤n≤1000≤m≤3000 \leq m \leq 3000≤m≤300−100≤wi≤100-100 \leq w_i \leq 100−100≤wi≤100</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果任意组合，都无法使得队伍的编程能力值之和大于m，输出一行字符串：&quot;Waiver!&quot;(不含引号)否则输出一个整数，表示在满足队伍编程能力值之和大于m的情况下能组成的最大编程能力值。</span><br></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 100</span><br><span class="line">50 50 55 -5</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">155</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们选择前三个人，编程能力为155满足要求，同时也能获得最大的编程能力和。</span><br></pre></td></tr></table></figure><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 300</span><br><span class="line">50 50 55 -5</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Waiver!</span><br></pre></td></tr></table></figure><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">怎么选也满足不了要求，Waiver!</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编程能力可能为负数哦，这也是可以理解的。</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> Max;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;Max)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+n,greater&lt;<span class="hljs-keyword">int</span>&gt;());</span><br><span class="line">        <span class="hljs-keyword">int</span> mm = a[<span class="hljs-number">0</span>]+a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span>(mm&gt;Max)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;mm&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Waiver!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/D" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/D</a><br>来源：牛客网</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  kth特别喜欢自拍,但是她的手机被zyj摔在地上后,前置摄像头坏了,不管拍什么照片都是逆时针旋转了90°,而且照片都还是黑白的.这样的照片怎么能让kth找到对象呢?  </p><p>   现在kth向聪明的你求助,写一个程序帮助kth把图像旋转回来.(她手机太垃圾了,不带图片旋转功能).  </p><p>  因为照片是黑白的.所以对于手机屏幕来说,只有白色和黑色2种情况.  </p><p>  现在给你图片(通过01矩阵表示),对该图片进行旋转.使得图片显示正常.  </p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给你n*n的矩阵且矩阵元素只有0和1,对矩阵实现旋转操作,使得图片恢复正常.2≤n≤10002 \le n  \le 10002≤n≤1000</span><br></pre></td></tr></table></figure><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出旋转之后的矩阵.矩阵每个元素间隔一个空格.</span><br></pre></td></tr></table></figure><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br></pre></td></tr></table></figure><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 0</span><br><span class="line">0 1</span><br></pre></td></tr></table></figure><h2 id="备注-1"><a href="#备注-1" class="headerlink" title="备注:"></a>备注:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">考虑一下旋转的方向.</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1009</span>][<span class="hljs-number">1009</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;--i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(i==n)</span><br><span class="line">                    <span class="hljs-built_in">cout</span>&lt;&lt;a[i][j];</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/E</a><br>来源：牛客网</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>  HJGG现在有一个大小为 n（米）*m（米）的矩形花园。 </p><p>  由于HJGG有强迫症，所以这片花园被划分n<em>m个为1</em>1（平方米）的方格。 </p><p>  <img src="https://uploadfiles.nowcoder.com/images/20191218/322542_1576674644290_8456A9DEB142974CCF1F497D1826BB16" alt="img"></p><p>  现在，HJ想在这片花园上种好多种花，<strong>并且他想要相邻的格子上种不同的花~</strong>（解释：相邻指的是上下左右四个方向相邻）<br> <strong>添加解释。相邻的格子上种不同的花指的是：一个位置和他上下左右四个方向位置的颜色不同，对于上下左右这四个位置，是可以相同的。</strong></p><p>  由于HJ被集训队小可爱蕾酱缠着不能脱身，所以想要你来帮帮他~ </p><p>  如果可以满足HJ哥哥的要求，就告诉他“Beautiful flowers!”,如果不可以就告诉他“Oh! My poor HJ!”（输出均不含双引号） </p><p>  谁让大家都不能拒绝蕾蕾呢！ </p><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入仅一行三个整数n,m,k(1≤n,m,k≤105)n, m, k(1 \leq n, m, k \leq 10^5)n,m,k(1≤n,m,k≤105)，分别表示HJGG花园的长和宽，HJGG拥有的花的种类数</span><br></pre></td></tr></table></figure><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行你要告诉HJGG的话~</span><br></pre></td></tr></table></figure><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5</span><br></pre></td></tr></table></figure><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Beautiful flowers!</span><br></pre></td></tr></table></figure><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 1</span><br></pre></td></tr></table></figure><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oh! My poor HJ!</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> m,n,k;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>&amp;&amp;m&gt;<span class="hljs-number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(k&gt;=<span class="hljs-number">2</span>)</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>&amp;&amp;n&gt;<span class="hljs-number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(k&gt;=<span class="hljs-number">2</span>)</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>&amp;&amp;n==<span class="hljs-number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(k&gt;=<span class="hljs-number">1</span>)</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(k&gt;=<span class="hljs-number">3</span>)</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(flag)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Beautiful flowers!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Oh! My poor HJ!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/F" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/F</a><br>来源：牛客网</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>​    SMU的英文全称是Southwest Minzu University，中文名叫做西南民族大学。这所大学因为男女比例约为2比8，因此又被大家戏称为稀男民族大学，又因为民族同学们，通常能歌善舞，且校内的舞蹈、唱歌活动非常之多，所以被戏称为稀男歌舞大学。 </p><p>​    在计算机学院中，男同学的比例远高于其余学院，所以计算机学院的脱单率遥遥领先。但在计算机学院的算法竞赛团队中，却出现了诡异的一个现象：某一届的集训队员，竟然全都是SingleDog。他们非常讨厌被人私下嘲笑为SingleDog。最初，如果听到或者看到SingleDog这个字眼，他们就会失去理智，慢慢的，他们只要看到情侣出现，就抑制不住心中的愤怒。现在情况更加严重了！他们只要看到成双成对的东西，都会开始无能狂怒。现在有一份集训队的通知文件，必须要发到群里，为了让他们心平气和的看完这份文件，只能精简一些文字了。具体的精简策略：集训队的通知文件是一堆小写字母，为了使这些字母不要成双成对的出现，我们只保留每种字母出现的第一个就好。 </p><h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个n，代表集训队的通知文件的长度。第二行输入一个字符串s，代表集训队的通知文件。保证对于所有数据：1 &lt;= n &lt;= 1000字符串s中，只包含a ~ z 的小写字母。</span><br></pre></td></tr></table></figure><h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行输出处理后的通知文件长度。第二行输出处理后的集训队通知文件。</span><br></pre></td></tr></table></figure><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">18 </span><br><span class="line">woyexiangtanlianai</span><br></pre></td></tr></table></figure><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">woyexiangtl</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> aa[<span class="hljs-number">27</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">string</span> a;</span><br><span class="line"><span class="hljs-built_in">string</span> b;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(aa,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(aa));</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        <span class="hljs-keyword">int</span> mm = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;a.length();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            aa[a[i]<span class="hljs-number">-96</span>]++;</span><br><span class="line">           </span><br><span class="line">            <span class="hljs-keyword">if</span>(aa[a[i]<span class="hljs-number">-96</span>]==<span class="hljs-number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mm++;</span><br><span class="line">                b+=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;mm&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;b.length();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">       a.clear();</span><br><span class="line">       b.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/G" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/G</a><br>来源：牛客网</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>在简谱中，音符是记录音的高低和长短的符号。而用来表示这些音的高低的符号，是用七个阿拉伯数字作为标记，它们的写法是：1、2、3、4、5、6、7，读法为：do、re、mi、fa、sol、la、si。现在给你一段由N个音符构成的简谱，以及唱出来的读音（长度小于10的字符串）的记录，请你判断总共唱错了几个读音。</p><h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个整数N（0&lt;N≤1040&lt; N\leq10^&#123;4&#125;0&lt;N≤104）;第二行包含N个数字构成的简谱，数字间用空格隔开；第三行包含N个读音，读音间用空格隔开.</span><br></pre></td></tr></table></figure><h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总共唱错的读音个数.</span><br></pre></td></tr></table></figure><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 2 3 4 5 6 7 1</span><br><span class="line">do re mi fa sol la si der</span><br></pre></td></tr></table></figure><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仅最后一个读音唱错.</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">string</span> a[<span class="hljs-number">10006</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span> , <span class="hljs-built_in">string</span>&gt; mp;</span><br><span class="line"><span class="hljs-keyword">int</span> aa[<span class="hljs-number">10005</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    mp[<span class="hljs-number">1</span>] = <span class="hljs-string">"do"</span>;</span><br><span class="line">    mp[<span class="hljs-number">2</span>] = <span class="hljs-string">"re"</span>;</span><br><span class="line">    mp[<span class="hljs-number">3</span>] = <span class="hljs-string">"mi"</span>;</span><br><span class="line">    mp[<span class="hljs-number">4</span>] = <span class="hljs-string">"fa"</span>;</span><br><span class="line">    mp[<span class="hljs-number">5</span>] = <span class="hljs-string">"sol"</span>;</span><br><span class="line">    mp[<span class="hljs-number">6</span>] = <span class="hljs-string">"la"</span>;</span><br><span class="line">    mp[<span class="hljs-number">7</span>] = <span class="hljs-string">"si"</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;aa[i];</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            <span class="hljs-comment">//cout&lt;&lt;a[i]&lt;&lt;" ";</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> flag= <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(mp[aa[i]] != a[i])</span><br><span class="line">                flag++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">            a[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><p>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/J" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/J</a><br>来源：牛客网</p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>大家都知道斐波那契数列吧！它的定义是这样的：斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13……在数学上，斐波那契数列以如下被以递推的方法定义：F(1) = 1，F(2) = 1, F(n) = F(n-1) + F(n-2) （n≥3,n∈N∗n \geq 3,n \in N^*n≥3,n∈N∗)。</p><p> 这题的题意也很简单，给你一个正整数n(1≤n≤107)n ( 1 \leq n \leq10^7)n(1≤n≤107)，让你输出斐波那契数列的第n项~由于答案较大，所以输出答案对109+710^9+7109+7取模后的数。</p><h2 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多组读入，保证不超过10组，每组一个正整数n(1≤n≤107)n ( 1 \leq n \leq10^7)n(1≤n≤107)。</span><br></pre></td></tr></table></figure><h2 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">斐波那契数列的第n项，答案对109+710^9+7109+7取模。</span><br></pre></td></tr></table></figure><h2 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="备注-2"><a href="#备注-2" class="headerlink" title="备注:"></a>备注:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请留意本题使用空间限制。</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-keyword">const</span> ll mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;</span><br><span class="line">ll f=<span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">ll materix[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">node <span class="hljs-title">mul</span><span class="hljs-params">(node a,node b)</span>  <span class="hljs-comment">//矩阵乘法 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">node res;</span><br><span class="line"><span class="hljs-built_in">memset</span>(res.materix,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> res.materix);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=f;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=f;j++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=f;k++)</span><br><span class="line">res.materix[i][j]=(res.materix[i][j]+a.materix[i][k]*b.materix[k][j])%mod;</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">node <span class="hljs-title">ksm</span><span class="hljs-params">(node a,ll b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">node ans;</span><br><span class="line"><span class="hljs-built_in">memset</span>(ans.materix,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ans.materix);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=f;i++)</span><br><span class="line">ans.materix[i][i]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)</span><br><span class="line">ans=mul(ans,a);</span><br><span class="line">b&gt;&gt;=<span class="hljs-number">1</span>;</span><br><span class="line">a=mul(a,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll N;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;N&amp;&amp;N!=<span class="hljs-number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(N==<span class="hljs-number">1</span>||N==<span class="hljs-number">2</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"1\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(N==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">node a,b;</span><br><span class="line">a.materix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>; a.materix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;</span><br><span class="line">a.materix[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>; a.materix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;   <span class="hljs-comment">//a是那个幂矩阵，</span></span><br><span class="line">b.materix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>; b.materix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;</span><br><span class="line">b.materix[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>; b.materix[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;   <span class="hljs-comment">//b是最初始的矩阵</span></span><br><span class="line">        <span class="hljs-comment">//假如a*a*a*b就是a^3*b，所以先求用快速幂求a的三次方，再用结果和b相乘</span></span><br><span class="line">        <span class="hljs-comment">//注意乘的顺序，矩阵相乘a*b！=b*a，顺序不能搞错</span></span><br><span class="line">        <span class="hljs-comment">//这里个人有个小诀窍，因为.f(n)=a*f(n-1)+b*f(n-2)+c，所以前边的那个应该是构造矩阵</span></span><br><span class="line">node ans = ksm(a ,N<span class="hljs-number">-2</span>);  <span class="hljs-comment">//从3开始，所以-2</span></span><br><span class="line">ans = mul(ans ,b) ;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans.materix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] ) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈理工新生赛</title>
      <link href="/AngelNI.github.io/nowcoder-2/"/>
      <url>/AngelNI.github.io/nowcoder-2/</url>
      
        <content type="html"><![CDATA[<p>每天水水题，处处有惊喜，python过题也很爽（重要的是抽奖）<a href="https://ac.nowcoder.com/acm/contest/3474" target="_blank" rel="noopener">链接</a><a id="more"></a></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>最近ACM协会的同学总是利用休息的时间来玩LOL，而且一不小心就玩过头，就耽误了培训时间，这让会长很头疼。玩LOL的同学都知道LOL的全英文名是League of Legends，那么问题来了，如果给你这个单词leagueofl，也就是league这个单词加of这个单词加字母l，然后给你一个全部由小写英文字母组成的字符串，希望这个串中含leagueofl这个单词尽量多。例如串是eagueofaaalltyleagueofl，那么我们可以整理成leagueoflleagueoflaaaty，那么这个串中最多含有两个这个单词。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含多组数据，输入一串字符串全部有小写英文字母组成。（长度不超过100）</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个串中所包含的最多leagueofl的个数。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eagueofaaalltyleagueofl</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">string</span> a;</span><br><span class="line"><span class="hljs-keyword">int</span> aa[<span class="hljs-number">100</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(aa,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(aa));</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;a.length();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'l'</span>)</span><br><span class="line">                aa[<span class="hljs-number">1</span>]++;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'e'</span>)</span><br><span class="line">                aa[<span class="hljs-number">2</span>]++;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'a'</span>)</span><br><span class="line">                aa[<span class="hljs-number">3</span>]++;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'g'</span>)</span><br><span class="line">                aa[<span class="hljs-number">4</span>]++;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'u'</span>)</span><br><span class="line">                aa[<span class="hljs-number">5</span>]++;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'o'</span>)</span><br><span class="line">                aa[<span class="hljs-number">6</span>]++;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'f'</span>)</span><br><span class="line">                aa[<span class="hljs-number">7</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(aa[<span class="hljs-number">1</span>]&lt;<span class="hljs-number">2</span>||aa[<span class="hljs-number">2</span>]&lt;<span class="hljs-number">2</span>||aa[<span class="hljs-number">3</span>]&lt;<span class="hljs-number">1</span>||aa[<span class="hljs-number">4</span>]&lt;<span class="hljs-number">1</span>||aa[<span class="hljs-number">5</span>]&lt;<span class="hljs-number">1</span>||aa[<span class="hljs-number">6</span>]&lt;<span class="hljs-number">1</span>||aa[<span class="hljs-number">7</span>]&lt;<span class="hljs-number">1</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                aa[<span class="hljs-number">1</span>]-=<span class="hljs-number">2</span>;</span><br><span class="line">                aa[<span class="hljs-number">2</span>]-=<span class="hljs-number">2</span>;</span><br><span class="line">                aa[<span class="hljs-number">3</span>]-=<span class="hljs-number">1</span>;</span><br><span class="line">                aa[<span class="hljs-number">4</span>]-=<span class="hljs-number">1</span>;</span><br><span class="line">                aa[<span class="hljs-number">5</span>]-=<span class="hljs-number">1</span>;</span><br><span class="line">                aa[<span class="hljs-number">6</span>]-=<span class="hljs-number">1</span>;</span><br><span class="line">                aa[<span class="hljs-number">7</span>]-=<span class="hljs-number">1</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        a.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>  不同的游戏有着不同的开始提示，像Are you really?Go!或者Can you start?。再一些大型的比赛中也有一些提示语，像Wa,Ac.等等。所以现在要求你输出一句提示语:Do you want to play ACM?(yes\no)  </p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一行中输出这一句话，所有符号均为英文符号。一定要仔细</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do you want to play ACM?(yes\no)</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Do you want to play ACM?(yes\\no)"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>  <img src="https://uploadfiles.nowcoder.com/images/20191215/322447_1576403716919_F3CCDD27D2000E3F9255A7E3E2C48800" alt="img"></p><p>  如图所示为一个由n个圆圈构成的圆环。将自然数1，2，…，n放入圆圈内，并且要求任意两个相邻的圆圈内的数字之和为素数。请问给你圆圈数，你能给出放置自然数的所有正确方案吗？ </p><p> 注意：圆圈中的数字一定是从1开始的，并且连续不重复。</p><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组测试数据。每组输入占一行，为整数n(0&lt;n&lt;20)，表示圆圈数。</span><br></pre></td></tr></table></figure><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组输入，输出所有正确的方案，按字典序从小到大排序。每组输出后输出一个空行。具体输出格式见输出样例。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">1 4 3 2 5 6</span><br><span class="line">1 6 5 2 3 4</span><br><span class="line"></span><br><span class="line">Case 2:</span><br><span class="line">1 2 3 8 5 6 7 4</span><br><span class="line">1 2 5 8 3 4 7 6</span><br><span class="line">1 4 7 6 5 8 3 2</span><br><span class="line">1 6 7 4 3 8 5 2</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：只能按照顺时针方向放置数字。</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">50</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> pre[<span class="hljs-number">206</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(pre,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(pre));</span><br><span class="line">    pre[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i*i&lt;<span class="hljs-number">201</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!pre[i]) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =i*i;j&lt;<span class="hljs-number">201</span>;j+=i)</span><br><span class="line">            pre[j] = <span class="hljs-number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n ;</span><br><span class="line">    f();</span><br><span class="line">    <span class="hljs-keyword">int</span> nn=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        nn++;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d:\n"</span>,nn);</span><br><span class="line">        <span class="hljs-keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]!=<span class="hljs-number">1</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            <span class="hljs-keyword">int</span> flag1 = <span class="hljs-number">0</span>,flag2 = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(pre[a[i]+a[i+<span class="hljs-number">1</span>]]==<span class="hljs-number">0</span>&amp;&amp;i!=n)</span><br><span class="line">                    flag1++;</span><br><span class="line">                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==n&amp;&amp;pre[a[i]+a[<span class="hljs-number">1</span>]]==<span class="hljs-number">0</span>)</span><br><span class="line">                    flag1++;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = <span class="hljs-number">1</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>(flag2)</span><br><span class="line">                <span class="hljs-keyword">continue</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span>(flag1==n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)    </span><br><span class="line">                        <span class="hljs-built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">                    <span class="hljs-keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;a[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="hljs-keyword">while</span>(next_permutation(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n));</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>  你知道c需要中的缩写吗？ </p><p>   或者你知道ACM比赛中一些缩写的词组吗？  </p><p>   像Presentation Error (PE)，Wrong Answer (WA)，time limit exceeded (TLE)。  </p><p>   往往这些缩写可以带给我们一些方便的好处，也可以相当于一些专业词组。  </p><p>   现在要求你自己来定义缩写，根据你若输入的单词，注意，输入词组，输出他的缩写。  </p><h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行是一个整数T，表示一共有T组测试数据。接下来有T行，每组测试数据占一行，每行有一个词组，每个词组由一个或多个单词组成；每组的单词个数不超过10个，每个单词有一个或多个大写或小写字母组成；单词长度不超过10，由一个或多个空格分隔这些单词。</span><br></pre></td></tr></table></figure><h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请为每组测试数据输出规定的缩写，每组输出占一行。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Cool Down</span><br><span class="line">Attack Disabled Carry</span><br><span class="line">xiao xue sheng</span><br></pre></td></tr></table></figure><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CD</span><br><span class="line">ADC</span><br><span class="line">XXS</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每行的单词不仅仅有一个，所以cin/scanf是不行的</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">string</span> a;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="hljs-keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="hljs-built_in">cin</span>,a,<span class="hljs-string">'\n'</span>);</span><br><span class="line">        <span class="hljs-built_in">string</span> b;</span><br><span class="line">        b = a[<span class="hljs-number">0</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;a.length();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">' '</span>&amp;&amp;a[i+<span class="hljs-number">1</span>]!=<span class="hljs-string">' '</span>)</span><br><span class="line">                b+=a[i+<span class="hljs-number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        transform(b.begin(),b.end(),b.begin(),::<span class="hljs-built_in">toupper</span>);</span><br><span class="line">        <span class="hljs-comment">// for(int i =0;i&lt;b.length();++i)</span></span><br><span class="line">        <span class="hljs-comment">// &#123;</span></span><br><span class="line">        <span class="hljs-comment">//     transform(b.begin(),b.end(),b.begin(),::toupper);</span></span><br><span class="line">        <span class="hljs-comment">// &#125;</span></span><br><span class="line">        <span class="hljs-comment">//cout&lt;&lt;islower(b[0])&lt;&lt;endl;</span></span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        a.clear();</span><br><span class="line">        b.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一群耗纸，它们喜欢在ACM协会的集训楼的电梯里反复玩弄电梯（假定有这栋楼。。。），这些耗纸定义了一种规则，当他们从一楼涌进电梯之后，每只耗纸都会在电梯上啪啪啪，到处乱拍，第i只耗纸，把楼层是i的倍数全都按了一遍，也就是说第13只耗纸会把第13,26,39等楼全部按一遍，假设这个电梯的质量比较好，开始的时候全是灭的，而且电梯上的按键，每按一次会亮，再按一次会灭掉，再按一次会亮，周而复始。如果知道会长的女神正在n楼自习，会长身边有n只耗纸，他想要尽快的见到他的女神，但是会长不知道这样n只手贱的耗子在一起坐电梯能不能顺利到达n层，因此他想请hlgrc的acmer们帮他算算，他该不该和这些手贱的耗纸一起坐电梯。</p><h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多组测试，每组输入一个数字n(0&lt;n&lt;10^15)；当n=0时，程序退出，该组数据不运行；</span><br></pre></td></tr></table></figure><h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果会长该和这些手贱的耗纸一起坐电梯，输出“Goddess,I&apos;m coming~~~”否则输出“Farewell~”</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">13</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Farewell~</span><br><span class="line">Farewell~</span><br><span class="line">Goddess,I&apos;m coming~~~</span><br></pre></td></tr></table></figure><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一组样例，一共有11只耗子，第一只耗纸会把所有的楼层全部按一遍，第二只会把2,4,6,8,10按一遍，...直到第11只耗纸把11层按一遍，那么电梯最后会去的楼层有只有4楼，会长懒得爬楼梯，因此见不到自己的女神,而女神也因为等不到会长，抑郁而终。</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll; </span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="hljs-literal">false</span>);</span><br><span class="line">    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);</span><br><span class="line">    ll n;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"> ll m=<span class="hljs-built_in">sqrt</span>(n);</span><br><span class="line">    <span class="hljs-keyword">if</span>(m*m==n)</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Goddess,I'm coming~~~"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Farewell~"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>   作为ACM协会的成员，这段时间最盼望的日子就是新生赛那几天。成绩再过几个小时就公布了，会长想给一直顽强拼搏的的参赛队员发一笔奖金。 </p><p>  但是会长就在考虑一个问题：如果每个同学的奖金额都知道，最少需要准备多少张人民币，才能在给每位同学发奖金的时候都不用会长找零呢？ </p><p>  这里假设同学的奖金都是正整数，单位元，人民币一共有100元、50元、20元、10元、5元和1元六种。</p><h2 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行为正整数T，输入数据包含T个测试实例，每个测试实例的第一行是一个整数n（n&lt;100），表示同学的人数，然后是n个同学的奖金。</span><br></pre></td></tr></table></figure><h2 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每个测试实例输出一个整数x,表示至少需要准备的人民币张数。每个输出占一行。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">2</span><br><span class="line">500 500</span><br></pre></td></tr></table></figure><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">哈理工荣成新生赛</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="hljs-literal">false</span>);</span><br><span class="line">    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> T;<span class="hljs-built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="hljs-keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">    ll sum=<span class="hljs-number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="hljs-keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x;<span class="hljs-built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    sum=sum+x/<span class="hljs-number">100</span>;</span><br><span class="line">    x=x%<span class="hljs-number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">50</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    sum=sum+x/<span class="hljs-number">50</span>;</span><br><span class="line">    x=x%<span class="hljs-number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    sum=sum+x/<span class="hljs-number">20</span>;</span><br><span class="line">    x=x%<span class="hljs-number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    sum=sum+x/<span class="hljs-number">10</span>;</span><br><span class="line">    x=x%<span class="hljs-number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    sum=sum+x/<span class="hljs-number">5</span>;</span><br><span class="line">    x=x%<span class="hljs-number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">sum=sum+x;</span><br><span class="line">x=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>  大家比赛的时候一定要放轻松！你看，刚来参加比赛的菜鸟小一一做不出题目来急的满头大汗！这让她情何以堪！究竟是一道什么题目搞得她这么纠结？我们来看一下吧！ </p><p>   ACM协会招收了许多热爱编程的小萌新，为增进大家友情周末要进行男子拔河比赛。  </p><p>   为了比赛的可看性，现要选出体重较重的男同学，所以按照从轻到重的体重顺序占成一排进行筛选。  </p><p>   求出这些男同学的体重从轻到重的排序。  </p><h2 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入数据有多组，第一行输入男同学的人数n（1&lt;=n&lt;=10）,第二行分别输入她们的体重m（150&gt;m&gt;0），以EOF作为结束标志.</span><br></pre></td></tr></table></figure><h2 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出他们的体重由低到高的序列。结果保留2位小数。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">68.00 59.00 66.67 55.55 45.00</span><br><span class="line">2</span><br><span class="line">77 77</span><br></pre></td></tr></table></figure><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">45.00 55.55 59.00 66.67 68.00</span><br><span class="line">77.00 77.00</span><br></pre></td></tr></table></figure><h2 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">哈理工荣成新生赛</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">double</span> a[<span class="hljs-number">100000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n ;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf"</span>,a[i]);</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %.2lf"</span>,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>  ACM协会的会员越来越多了，训练量也越来也大，为使会员们在高强度的训练下得到放松，会员之间更加亲近，协会想为会员们准备一个晚会，晚会节目由会员们表演。 </p><p>  消息一出，报名要表演节目的会员很多，多达N个，尤其是才华横溢的史老师，点名要上台唱毛不易的《消愁》，但是由于场地和时间有限，只能从这N个人中选M个，请你帮会长算一算，一共有多少种选择方法？ </p><h2 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据的第一行是一个正整数T，接下来有T组数据，每组数据占一行。每组数据包含两个整数N（来报名的人数，1&lt;=N&lt;=30），M（节目需要的人数0&lt;=M&lt;=30）。</span><br></pre></td></tr></table></figure><h2 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据输出一个整数，每个输出占一行。</span><br></pre></td></tr></table></figure><p>示例1</p><h2 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 2</span><br><span class="line">5 3</span><br><span class="line">4 4</span><br><span class="line">3 6</span><br><span class="line">8 0</span><br></pre></td></tr></table></figure><h2 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t = int(input())</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> case <span class="hljs-keyword">in</span> range(t):</span><br><span class="line">    x = y = <span class="hljs-number">1</span></span><br><span class="line">  </span><br><span class="line">    a,b = map(int,input().split())</span><br><span class="line">    </span><br><span class="line">    j = a</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>):</span><br><span class="line">        x = x*i</span><br><span class="line">        y = y*j</span><br><span class="line">        j = j<span class="hljs-number">-1</span></span><br><span class="line">    print(<span class="hljs-string">"%d"</span> % ( y/x))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《悲惨的世界》读后感</title>
      <link href="/AngelNI.github.io/The-Miserable-Ones/"/>
      <url>/AngelNI.github.io/The-Miserable-Ones/</url>
      
        <content type="html"><![CDATA[<p>我们每一个人都是社会的映射，只是这是个大多数人社会。<a id="more"></a></p><h1 id="The-Miserable-Ones"><a href="#The-Miserable-Ones" class="headerlink" title="The Miserable Ones"></a>The Miserable Ones</h1><p>##略述，如有不对请指正##</p><p>《The Miserable Ones》（《悲惨的世界》），偶然得读起了这本书，便立刻被开头的米里哀主教所感动，就像第一章的标题一样，他如天使般感化世界，给穷人送去温暖，给强盗讲道，正是他的仁慈，恩惠，塑造了这篇文章的主人公冉阿让。冉阿让原本是因为偷了一块面包去监狱坐牢19年的囚徒，出狱后边对社会充满了仇恨，但主教用自己的行动感化了主人公，也因此有了后面的故事。冉阿让也就是后来的马德兰市长，主教死后，不，没有死，冉阿让就像是主教在世，他开设工厂，接济穷人，就算自己的仇人，也用于去帮助。相反之下，警察局的探长沙威，一眼就认出然就是马德兰市长，是监狱里的囚徒，想方设法的揭穿他的行径，但马德兰市长的行为，让他很难去判断，他只好暗暗观察。</p><p>芳汀，是一个苦命的人，独自带着孩子珂赛特，因为社会的教条，她独自带着一个孩子会被被人说闲话，他只好将自己的女儿送给了看上去善良的旅店的老板（恶毒）。每月芳汀都会送去生活费，但旅店的老板不满足此，一次一次撕咬芳汀，而珂赛特呢，成了旅店老板的丫鬟，做各种脏事累活，还吃不饱，捉襟见肘，那时她才不到十岁啊！而芳汀为了孩子想方设法的筹集生活费，后来的她寄生活费的消息，被人知道，因为这个社会，她离开了马德兰的工厂（并不是马德兰），后来因为生活费，他卖掉了头发，卖掉了她的两颗门牙，甚至出去卖，谁知被沙威抓到。巧合的是被马德兰市长知道，听说她的经历后决定放了她并亲自去接她的孩子，珂赛特。在马德兰市长和沙威争执下，最终还是统一发了她。但沙威也因此对马德兰市长有些尊敬。</p><p>谁知道假的冉阿让（尚马第）被抓了，马德兰市长听说后，立刻就亲自去赎罪，可他还答应了芳汀去救他的孩子，再三权衡之下，他还是去赎罪。就这样，他又被沙威抓起来（芳汀也去世了），沙威洋洋得意。后来冉阿让在船上做苦力，偶然的一次机会为了就他人，掉落海中（他跑了）。冉阿让没有忘记自己的诺言，去把珂赛特接回来，但旅店老板却认为珂赛特是他的摇钱树，甚至拿起枪杀了冉阿让，但冉阿让和珂赛特逃走了，也就成为了后来的白先生和黑姑娘。</p><p>后来马吕斯，因父亲获得爵位世袭，但那都是过去，祖父从来就没让他见过他的父亲，他父亲只好在每次去教堂时，躲在角落里偷偷的流泪。后来马吕斯都知道了，他是马吕斯伯爵，他离开了外祖父的家，独自生存。后来他遇到了白先生和黑姑娘，从来没接触过女性的他，边立刻就对珂赛特充满了爱意，每次去公园里偶遇，但白先生发现了，只好搬家。马吕斯的邻居，就是那个旅店的老板，也是他父亲的恩人（救过他父亲一命，只是为了他父亲的钱财），决定去杀了白先生，可他家的大女儿是个善良的人（对马吕斯充满了爱意），偷偷的帮助他和黑姑娘，帮助白先生逃跑。而马吕斯到底是帮助谁呢，犹豫不决。最后被沙威拿下和四大盗。</p><p>后来，革命的烈火熊熊燃起，革命军对抗政府军。马吕斯成为了革命军的领袖，他给珂赛特写信说，他要为革命献身，谁知被冉阿让得知，冉阿让奋不顾身冲去一线。他不打人，他只是将每个人背回来，后来他与被抓沙威相遇，将沙威放走。战火结束后，革命失败了，昏倒的马吕斯被冉阿让从下水道背回，谁知又遇到了旅店的老板 ，想发财，想从马吕斯身上榨取钱财，就这样马吕斯还是活下来了，后来冉阿让也同意了珂赛特和马吕斯的婚姻。而马吕斯也认清了父亲的救命恩人是个什么样的人。后来冉阿让我们的主人公，离开了这个世界。</p><p>《悲惨的世界》，一部厚重的人类苦难的”百科全书“。到底是我们塑造了这个世界，还是这个世塑造我们。人之初，性本善，是这个世界将人性变恶。所谓的坏人永远都是坏人是真的对吗？难道坏人没有一丝感恩之心吗？为什么我们要用异样的眼光对待他。我们只是不了解他。雨果，《悲惨的世界》批判整个世界，揭露这个世界的丑恶，不仅是过去，还是现在。</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> The Miserable Ones </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长沙理工新生赛</title>
      <link href="/AngelNI.github.io/nowcoder-1/"/>
      <url>/AngelNI.github.io/nowcoder-1/</url>
      
        <content type="html"><![CDATA[<p>感觉题挺好的，去签个到，记录一下。<a href="https://ac.nowcoder.com/acm/contest/3530#question" target="_blank" rel="noopener">点我呦</a><a id="more"></a></p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/3530/A" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3530/A</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  众所周知，常守朱是一个优秀的执行官，她凭借自身的卓越能力解决了许多案件，当然她手中的支配者也为办案提供了很大的便利，支配者可以测量一个人的犯罪指数，当超过一定值时，则被认为是罪犯。   </p><p>  支配者的工作原理如下：将一个人的脑电波转化为01串（我瞎编的），01串中1的个数越多，则犯罪指数越高，下面给你一个01串，请你统计该串中1的个数 </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个字符串s，字符串的长度小于1e5</span><br></pre></td></tr></table></figure><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数，字符串中1的个数</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0101</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="AC——遍历string"><a href="#AC——遍历string" class="headerlink" title="AC——遍历string"></a>AC——遍历string</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"><span class="hljs-built_in">string</span> a;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    num = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'1'</span>)</span><br><span class="line">            num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/3530/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3530/E</a></p><p>来源：牛客网</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>众所周知，佳爷是集训队最强，他经常喜欢鄙视集训队最菜的PC，这天他又来了，他丢给PC一道题目： </p><p>  给你一个字符串，该字符串只包含符号 ‘(’ 和 ‘)’, ，我们称那些左右括号可以一一对应的括号字符串为完美字符串， </p><p>  比如”()()()”,  “((()))”, “((()))()()”, 都是完美字符串 </p><p>  而”((())”, “()(“, “((()))()(“ 不是完美字符串。 </p><p>  这么难的题目，PC当然是不会写的，但他又不想被佳爷鄙视，所以他找到了你，聪明的ACMer啊，请你帮PC解出这题把 </p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数n，代表字符串的长度 n， 1 &lt;= n &lt;= 1e5</span><br><span class="line"></span><br><span class="line">第二行一串字符串s，只包含字符 &apos;(&apos; , &apos;)&apos;。</span><br></pre></td></tr></table></figure><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果该字符串是完美字符串，就输出YES，。否则输出NO</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">(())</span><br></pre></td></tr></table></figure><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h2 id="AC——栈的简单应用"><a href="#AC——栈的简单应用" class="headerlink" title="AC——栈的简单应用"></a>AC——栈的简单应用</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">string</span> a;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; s1;</span><br><span class="line">    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; s2;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s1.empty())</span><br><span class="line">            s1.push(a[i]);</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">')'</span>&amp;&amp;s1.top()==<span class="hljs-string">'('</span>&amp;&amp;!s1.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            s1.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s1.push(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(s1.empty())</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/3530/F" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3530/F</a></p><p>来源：牛客网</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>  ——你要是愿意，我就永远存在 </p><p>  某人的朋友圈实在是过于庞大且复杂，要判断两个人是不是朋友，那还真不容易。 </p><p>  现给出某个朋友圈关系图，求任意给出的两个人是否是朋友。 </p><p>  规定：如果x和y是朋友，y和z是朋友，那么x和z也是朋友。 </p><p>  如果x和y是朋友，那么x的朋友都是y的朋友，y的朋友也都是x的朋友。 </p><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行，三个整数n,m,p,(n ≤ 50000,m ≤ 50000,p≤50000)，分别表示有n个人，m个朋友关系，询问p对朋友关系。</span><br><span class="line"></span><br><span class="line">以下m行：每行两个数Mi, Mj，1 ≤ Mi, Mj ≤ n，表示Mi和Mj具有朋友关系。</span><br><span class="line"></span><br><span class="line">接下来p行：每行两个数Pi ,Pj,询问Pi，Pj是否具有盆友关系</span><br></pre></td></tr></table></figure><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P行，每行一个“Yes”或“No”(不包含引号)。表示第i个询问的答案为“具有”或“不具有”朋友关系。</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="AC-——赤果果的并查集"><a href="#AC-——赤果果的并查集" class="headerlink" title="AC ——赤果果的并查集"></a>AC ——赤果果的并查集</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> pre[<span class="hljs-number">500001</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,p;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(pre[x]==x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> pre[x] = find(pre[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> fx = find(x);</span><br><span class="line">    <span class="hljs-keyword">int</span> fy = find(y);</span><br><span class="line">    <span class="hljs-keyword">if</span>(x!=fy)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;p;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        join(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=p;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y; </span><br><span class="line">        <span class="hljs-keyword">int</span> dx = find(x);</span><br><span class="line">        <span class="hljs-keyword">int</span> dy = find(y);</span><br><span class="line">        <span class="hljs-keyword">if</span>(dy==dx)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Yes"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(dy!=dx)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"No"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/3530/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3530/C</a></p><p>来源：牛客网</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>  咚咚咚！在安静的7教417夜晚，车神带来了一堆神秘的数字。 </p><p>  而417的小伙伴都只钟爱于包含4和7的数字。 </p><p>  例如数字：747,4,7747,4,7是他们钟爱的数字，而476,5,27476,5,27不是。 </p><p>  车神灵机一动，突然问：对于给定的数字n，能否找出各个数位上数字和为n的最小钟爱数字。 </p><p>  如果找到则输出这个最小数, 如果找不到，则输出“YingYingYing”。 </p><h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行，一个整数n(1 ≤ n ≤ 1e6) 代表要求车牌号的各个数位上数字的和</span><br></pre></td></tr></table></figure><h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出仅一行，为满足条件的最小车牌号，如果不存在这个车牌号就输出“YingYingYing”。</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47</span><br></pre></td></tr></table></figure><p> 示例2 </p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YingYingYing</span><br></pre></td></tr></table></figure><h2 id="AC——思维"><a href="#AC——思维" class="headerlink" title="AC——思维"></a>AC——思维</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b;</span><br><span class="line"><span class="hljs-keyword">for</span>(a=<span class="hljs-number">0</span>;a*<span class="hljs-number">4</span>&lt;=n;++a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(b=<span class="hljs-number">0</span>;a*<span class="hljs-number">4</span>+b*<span class="hljs-number">7</span>&lt;=n;++b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a*<span class="hljs-number">4</span>+b*<span class="hljs-number">7</span>==n)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(a*<span class="hljs-number">4</span>+b*<span class="hljs-number">7</span>==n)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(a*<span class="hljs-number">4</span>+b*<span class="hljs-number">7</span>!=n)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YingYingYing"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;b;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/3530/B" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3530/B</a></p><p>来源：牛客网</p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>  给你n个人，每一个人最多可以选k张牌，这n个人都喜欢数s，一张牌有一个数，如果这个数是s，则这个牌称为happy card </p><p>  每一个人拿到不同数量的happy card 可以获得不同数量的欢乐值。 </p><p>  假如一个人拿到了 i 张happy card ，则可以获得 hi 的欢乐值( hi 数组单调递增)， 没有happy card的人的欢乐值为0. </p><p>  如果没有拿到happy card，则获得的欢乐值为0。 </p><p>  现在你需要把着n张牌分配给这n个人（每个人的牌数都可以为0），使这n个人的快乐值总和最大 </p><h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行三个数字n,k,s, 1 &lt;= n &lt;= 500, 1&lt;= k &lt;= n , 1 &lt;= s &lt;= 1e9接下来n个数代表n张牌上的数ai， 1 &lt;= ai &lt;= 1e9接下来k个数代表hi的值,1 &lt;= hi &lt;= 1e9保证 hi-1 &lt;= hi</span><br></pre></td></tr></table></figure><h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最大的快乐值和</span><br></pre></td></tr></table></figure><p> 示例1 </p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 2 2 2 2</span><br><span class="line">2 6 7</span><br></pre></td></tr></table></figure><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure><p> 示例2 </p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 3 9</span><br><span class="line">9 9 9 9 </span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="AC——DP-01背包？"><a href="#AC——DP-01背包？" class="headerlink" title="AC——DP/01背包？"></a>AC——DP/01背包？</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,k,s;</span><br><span class="line"><span class="hljs-keyword">int</span> h[<span class="hljs-number">1000</span>];</span><br><span class="line">ll f[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,x;i=&lt;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;x</span><br><span class="line">        <span class="hljs-keyword">if</span>(x==s) </span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;h[i];</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;=sum;j++) </span><br><span class="line">        &#123;</span><br><span class="line">            f[j]=max(f[j],f[j-i]+h[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,f[sum]);</span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUST YOU</title>
      <link href="/AngelNI.github.io/life/"/>
      <url>/AngelNI.github.io/life/</url>
      
        <content type="html"><![CDATA[<p>A person ‘s  strength is often their biggest weakness and that also means that weakness can be their strength<a id="more"></a></p><p>Getting successful ,it is not a magic trick . You have a say-so in that . You can decide to be rich .But you first have to think it .The difference between successful people and non-successful people is here(Mind). You have to change your mind . If you keep doing what you been doing . You’re gonna keep getting what you’ve  been getting . So if you’re at a place in your life and you’re not happy with it , you have to change some things. But you have to make a conscientious decision that you’re going to change .And it’s not dependent on anybody else .It’s don’t matter what your mother think .It’s don’t matter what your coworkers think.It’s don’t matter what your siblings think . It’s don’t matter what your children think. it’s don’t matter. They have nothing to do with it . This decision is yours and yours alone . Never let anybody tell you that you can’t. A lot of times as a leader ,a lot of times as a business builder , a lot of times as a craft person ,we will have an idea for a business or a product where the rest of the world says that’s impossible .And we have to be coming from a place within where our I can is larger than I can’t .You absolutely must do the interior work required where  you have these firey levels of  confidence ,where when the world is saying ,”you know what? I dismiss your vision,or that’s impossible you have to be that lone vice who goes , no ,you know what ? It’s possible .And just watch me do it .”I am not going to allow anything to shape me.I am not gonna allow anything to stop me. I am not gonna allow anything to stop my happiness and growth.You gotta live beyond reality .Even before you do it ,see yourself doing it .Even before you accomplish it ,see yourself accomplishing  it .Your perception is everything ,not your circumstances,not your situation ,it’s how you see it .And if you can learn to see it correctly,if you can learn to just get passed the pain ,get passed the litter hurt, and if you can learn to see it properly, I guarantee ,you can be what you wanna be ; you can have what you wanna have ; you can do what you wanna do.</p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/AngelNI.github.io/minitree/"/>
      <url>/AngelNI.github.io/minitree/</url>
      
        <content type="html"><![CDATA[<p>加油！活成自己喜欢的样子，干嘛要在意别人的眼光。<a id="more"></a></p><p>最小生成树，学了好久了，理论学起来简单易懂，代码一直也没写，今天补起来。</p><p>自己太菜了，只能背板子了。</p><p>我只是板子的搬运工，哪里需要哪里套。</p><p>最小生成树——水题<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233" target="_blank" rel="noopener">HDU1233</a></p><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-keyword">int</span> w;</span><br><span class="line">&#125;mp[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> pre[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(pre[x]==x)</span><br><span class="line">        <span class="hljs-keyword">return</span> x;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> pre[x] = find(pre[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> fx = find(x),fy = find(y);</span><br><span class="line">    <span class="hljs-keyword">if</span>(x!=fy)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)<span class="hljs-comment">//并查集初始化</span></span><br><span class="line">            pre[i] = i;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;mp[i].x&gt;&gt;mp[i].y&gt;&gt;mp[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> N =(n<span class="hljs-number">-1</span>)*n/<span class="hljs-number">2</span>;<span class="hljs-comment">//n个顶点可能共有这些边</span></span><br><span class="line">        sort(mp+<span class="hljs-number">1</span>,mp+<span class="hljs-number">1</span>+n,cmp);<span class="hljs-comment">//kruskal算法从最小边开始</span></span><br><span class="line">        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=N;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(k==n<span class="hljs-number">-1</span>)<span class="hljs-comment">//n个顶点的连通图最少有n-1条边</span></span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span>(find(mp[i].x)!=find(mp[i].y))<span class="hljs-comment">//判断顶点是否被访问，未访问，则归为一家 join</span></span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                join(mp[i].x,mp[i].x);</span><br><span class="line">                sum+=mp[i].w;<span class="hljs-comment">//记录最小距离</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f </span></span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> mp[<span class="hljs-number">10000</span>][<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> vis[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> dis[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> ans;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        dis[i] = mp[<span class="hljs-number">1</span>][i];</span><br><span class="line">    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    vis[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> t =INF,k;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;t)</span><br><span class="line">            &#123;</span><br><span class="line">                t = dis[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(t==INF)</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        vis[k] = <span class="hljs-number">1</span>;</span><br><span class="line">        ans+=t;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&gt;mp[k][j])</span><br><span class="line">                dis[j] = mp[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> m = (n<span class="hljs-number">-1</span>)*n/<span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> x,y,w;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">            mp[x][y] = mp[y][x] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        prim(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++的快读+快写</title>
      <link href="/AngelNI.github.io/qread/"/>
      <url>/AngelNI.github.io/qread/</url>
      
        <content type="html"><![CDATA[<p>快读，快读，快速读入<a id="more"></a></p><h1 id="关闭同步流"><a href="#关闭同步流" class="headerlink" title="关闭同步流"></a>关闭同步流</h1><p>卡时间真是卡到死。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> x[<span class="hljs-number">1000005</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-comment">//关闭同步流    </span></span><br><span class="line">    ios::sync_with_stdio(<span class="hljs-literal">false</span>);</span><br><span class="line">    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">NULL</span>);</span><br><span class="line">    <span class="hljs-built_in">cout</span>.tie(<span class="hljs-literal">NULL</span>);</span><br><span class="line">    <span class="hljs-comment">//</span></span><br><span class="line">    <span class="hljs-keyword">int</span> t;</span><br><span class="line">    <span class="hljs-built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="hljs-keyword">while</span>( t-- )&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> n;</span><br><span class="line">        <span class="hljs-built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i  = <span class="hljs-number">0</span> ; i &lt; n ; i++ ) <span class="hljs-built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line">        sort( x , x + n );</span><br><span class="line">        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i  = <span class="hljs-number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>( i == n - <span class="hljs-number">1</span> ) <span class="hljs-built_in">cout</span> &lt;&lt; x[i] &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; x[i] &lt;&lt; <span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> T;</span><br><span class="line"><span class="hljs-keyword">int</span> arr[<span class="hljs-number">1000007</span>];</span><br><span class="line"> <span class="hljs-comment">//快读</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">   <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>,w=<span class="hljs-number">1</span>;</span><br><span class="line">   <span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line">   <span class="hljs-keyword">while</span>(ch&lt;<span class="hljs-string">'0'</span>||ch&gt;<span class="hljs-string">'9'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)w=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line">   <span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span>&amp;&amp;ch&lt;=<span class="hljs-string">'9'</span>) s=s*<span class="hljs-number">10</span>+ch-<span class="hljs-string">'0'</span>,ch=getchar();</span><br><span class="line">   <span class="hljs-keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//快写</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">9</span>) write(x / <span class="hljs-number">10</span>);</span><br><span class="line">    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="hljs-keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">           arr[i] = read();</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr,arr+n);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,arr[i]);</span><br><span class="line">            <span class="hljs-keyword">if</span>(i&lt;n<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-2</title>
      <link href="/AngelNI.github.io/sort-2/"/>
      <url>/AngelNI.github.io/sort-2/</url>
      
        <content type="html"><![CDATA[<p>桶排序，又简单，又快速，适合处理大量数据<a id="more"></a></p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n ;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-comment">//   O(m+n)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> t;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line">            a[t]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//桶排序</span></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;<span class="hljs-number">1000</span>;++i)<span class="hljs-comment">//从小到大</span></span><br><span class="line">        <span class="hljs-comment">//for(int i =1000-1;i&gt;=0;--i)//从大到小</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=a[i];++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll a[<span class="hljs-number">1000000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(ll *A,ll start,ll mid,ll end)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll p =start,q = mid+<span class="hljs-number">1</span>;</span><br><span class="line">ll arr[end-start+<span class="hljs-number">1</span>],k =<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(ll i =start;i&lt;=end;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(p&gt;mid)</span><br><span class="line">arr[k++] = A[q++];</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(q&gt;end)</span><br><span class="line">&#123;</span><br><span class="line">arr[k++] = A[p++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[p]&lt;A[q])</span><br><span class="line">&#123;</span><br><span class="line">arr[k++] = A[p++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">arr[k++] = A[q++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;p&lt;k;++p)</span><br><span class="line">&#123;</span><br><span class="line">A[start++] =arr[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mergesort</span><span class="hljs-params">(ll *A,ll start,ll end)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(start&lt;end)</span><br><span class="line">&#123;</span><br><span class="line">ll mid = (start+end)/<span class="hljs-number">2</span>;</span><br><span class="line">mergesort(A,start,mid);</span><br><span class="line">mergesort(A,mid+<span class="hljs-number">1</span>,end);</span><br><span class="line">merge(A,start,mid,end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        mergesort(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll a[<span class="hljs-number">100000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(ll *a,ll i,ll j)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">ll t = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(ll *tree,ll n,ll i)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i&gt;=n)</span><br><span class="line"><span class="hljs-keyword">return</span> ;</span><br><span class="line">ll c1 = <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;</span><br><span class="line">ll c2 = <span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>;</span><br><span class="line">ll max = i;</span><br><span class="line"><span class="hljs-keyword">if</span>(c1&lt;n&amp;&amp;tree[c1]&gt;tree[max])</span><br><span class="line">&#123;</span><br><span class="line">max = c1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(c2&lt;n&amp;&amp;tree[c2]&gt;tree[max])</span><br><span class="line">&#123;</span><br><span class="line">max = c2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(max != i)</span><br><span class="line">&#123;</span><br><span class="line">swap(tree,max,i);</span><br><span class="line">heapify(tree,n,max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapsort</span><span class="hljs-params">(ll *a,ll n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(ll i =n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">heapify(a,n,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(ll i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">swap(a,i,<span class="hljs-number">0</span>);</span><br><span class="line">heapify(a,i,<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        heapsort(a,n);</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="qsort"><a href="#qsort" class="headerlink" title="qsort"></a>qsort</h1><p>c++的函数库</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> *(<span class="hljs-keyword">int</span> *)a - *(<span class="hljs-keyword">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n = <span class="hljs-number">10</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">-7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;;</span><br><span class="line">    qsort(a,n,<span class="hljs-keyword">sizeof</span>(n),cmp);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;++i)</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陌上花开</title>
      <link href="/AngelNI.github.io/record/"/>
      <url>/AngelNI.github.io/record/</url>
      
        <content type="html"><![CDATA[<p>12月的第一天，也是一年中的最后一个月，不知不觉你又长大一岁。<a id="more"></a></p><p>纤尘陌陌终有花开时,花开一季芬芳至永远。陌上那千年的等候,终究等来了花开一世的最终绚烂。陌上花开已迟暮,但终究在千年的等候里绽放出了美丽。这份美丽,或许于陌上而言,真的是经久的等待。或许,陌上早已有了等不来陌上花开的平和,如若陌上花开,阡陌或许觉得已经是生命的奇迹了。</p><p>纤尘陌陌里,风舞尽沙,在千年的翘首里,阡陌已经忘了什么是风和沙的</p><p>缠绵。在终年的清寂里,阡陌或许看透尘世,舞尽人生,不再对花开有所期待。对于突然在陌上开出的那朵尘世青莲,或许是经久等待之外的惊喜。</p><p>秋风习习里,绝尘于陌上那孤寂的青莲,在不知不觉中已露尖尖角,那花</p><p>蕾在晨露里绽吐芬芳。它已经错过了花开的最好季节,在秋已至的时候,抹开了沉睡已久的眼,终于明白自己为什么沉睡这么久,只因一直在寻找属于自己生命的阡陌。</p><p>或许,属于它生命的阡陌一直在尘世的浮华里,未曾停留。所以千百年来的找寻,终究一次次的和属于它生命的阡陌错过。青莲想它这一生,或许已经找不到属于它生命的那方净土了。于是,沉睡再沉睡,在所有的睡意朦胧里,诠释着自己的前世今生。</p><p>不过,青莲是倔强的,惟有找到它想要的阡陌,才愿意在这世绽放属于它自己的美丽。如若,遇不到给它灵魂洗涤的净土,它将永远的沉睡下去,不再醒来。或许,这份倔强终究有一天会感动苍天,让它在醒来的时候遇到了能让它娇艳开放的那方阡陌。</p><p>几经轮回,沉睡之中醒来再沉睡,反复了千年,不怕一直在纤尘里流离,只因找不到让它尘埃落定的芬芳。经久的沉睡,但是记忆的芬芳一直是浓郁的,它明白自己为何一直在沉睡,因为在等待着属于它芬芳的阡陌风尘仆仆而来。</p><p>所有的轮回里,遇到错过,错过再遇,一场场的浩劫最青莲它把自己禁锢</p><p>在了沉睡里。青莲明白自己只是倔强又绝然的,在等着属于它的那一方陌,那一池水。如若能拥有自己想要的阡陌,最后自己的生命会归于一切的平静之中。</p><p>青莲或许已经闻到了那方属于它的阡陌的味道,只是那方阡陌还在遥远的地方苍凉的遥望。青莲明白,总有一天自己等待着的那方陌,那池水,会从滚滚的红尘里最后卸下所有的喧嚣,还一切一片清寂。卸下所有的繁华,卸下所有的琐碎,呈有素颜的那天。</p><p>青莲明白自己这样倔强的沉睡,为的就是找寻属于自己生命的那方阡陌。它最终需要的是不醉红尘只醉君的那份酣畅淋漓,或许此生也找不到这样的酣畅淋漓。但她自己知道,如若君不来,它就迟迟不开,不管是千年还是万年,永远的沉睡下去。如若君,一世的颠沛流离,那么它就一世的孤芳沉睡。</p><pre><code>——《陌上花开》</code></pre>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单前缀和</title>
      <link href="/AngelNI.github.io/prefix-sum/"/>
      <url>/AngelNI.github.io/prefix-sum/</url>
      
        <content type="html"><![CDATA[<p>一切都在潜移默化中ing<a id="more"></a></p><p>【问题引入】</p><p>给定n个数，再给出m个询问，每个询问给出区间（i，j）和x，要求 i 到 j  的每一个值都加上x，最后给出每一个询问区间（i，j）的区间和。</p><p>暴力：O（n^2）;线段树或者树状数组O（logn）；差分O（n）；</p><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>下图为前缀和的定义式和递推式</p><p><img src="https://s2.ax1x.com/2019/11/30/QVvQpj.png" alt></p><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p>什么是差分？差分是一个数组相邻两元素的差，一般为下标靠后的减去靠前的一个。设差分数组p[]，即：</p><p><strong>p[i] = a[i] - a[i - 1]</strong></p><p>前缀和 和 差分 的联系</p><p>令F(a)表示前缀和数组，G(a)表示差分数组，则     <strong>F(G(a)) = G(F(a)) = a</strong></p><p><strong>前缀和 和 差分 是一对互逆过程。</strong></p><h1 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h1><p>根据上述表达式我们可以以O(1)求出区间[i,j]的区间和 <strong>sum(i,j) = a[j] - a[i-1]</strong></p><p>通过一维前缀和可求得数组中前 i 个元素的和</p><h1 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h1><p><strong>b[ i ] [ j ] = b[ i  - 1 ] [ j]  +b[ j ] [  j - 1] -b[ i-1] [ j - 1] + a[ i ] [  j ]</strong></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="51nod1081子段求和"><a href="#51nod1081子段求和" class="headerlink" title="51nod1081子段求和"></a><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1081" target="_blank" rel="noopener">51nod1081子段求和</a></h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll m,n,a[<span class="hljs-number">100000</span>],b[<span class="hljs-number">100000</span>];</span><br><span class="line">ll x,y;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    b[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[i] = b[i<span class="hljs-number">-1</span>]+a[i];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// for(int i =1;i&lt;=n;++i)</span></span><br><span class="line">    <span class="hljs-comment">//     cout&lt;&lt;b[i]&lt;&lt;" ";</span></span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="hljs-keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,b[x+y<span class="hljs-number">-1</span>]-b[x<span class="hljs-number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HDU1559最大子矩阵"><a href="#HDU1559最大子矩阵" class="headerlink" title="HDU1559最大子矩阵"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1559" target="_blank" rel="noopener">HDU1559最大子矩阵</a></h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-keyword">int</span> mp[<span class="hljs-number">1005</span>][<span class="hljs-number">1004</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> b[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,x,y;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="hljs-keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(b));</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">                b[i][j] = b[i<span class="hljs-number">-1</span>][j]+b[i][j<span class="hljs-number">-1</span>]-b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+mp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =x;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =y;j&lt;=n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=max(ans,b[i][j]-b[i-x][j]-b[i][j-y]+b[i-x][j-y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="hljs-string">"pause"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prefix_sum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-1</title>
      <link href="/AngelNI.github.io/sort-1/"/>
      <url>/AngelNI.github.io/sort-1/</url>
      
        <content type="html"><![CDATA[<p>记住一切都会好起来。给他一点时间。<a id="more"></a></p><p>排序一共有十种排序算法，虽然都没有Algorithm的sort简单好用，但多学无害。</p><p>如果你对代码理解起来比较难，你可以参考这篇博文，介绍了十种排序算法排序的动画演示GIF.<a href="https://uppez.github.io/2019/10/21/%E6%8E%92%E5%BA%8F%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/" target="_blank" rel="noopener">排序动画演示</a></p><p>下面就看是介绍比较简单的三种排序算法，分别是冒泡排序，选择排序，计数排序，简单插入排序，折半插入排序，希尔排序，快速排序，话不多说，上代码。</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序有两种方法，一种是最原始的，还有一种是改进过的。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,x,y) for(ll i =x;i&lt;=y;++i)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 1000000</span></span><br><span class="line">ll a[MAX],n;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(ll i ,ll j)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ll t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//ordinary sort </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubblesort</span><span class="hljs-params">(ll a[])</span><span class="hljs-comment">//</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll j =n<span class="hljs-number">-1</span>;j&gt;=i;--j)</span><br><span class="line">        <span class="hljs-comment">// for(ll j =1;i&lt;=n-j;++j)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(j,j+<span class="hljs-number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//Optimized sort</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubblesort_1</span><span class="hljs-params">(ll a[])</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag =<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">1</span>;i&lt;n&amp;&amp;flag;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll j = n<span class="hljs-number">-1</span>;j&gt;=i;--j )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(j,j+<span class="hljs-number">1</span>);</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"please input the size of the data："</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        ll i;</span><br><span class="line">        rep(i,<span class="hljs-number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//two measures of sorting data</span></span><br><span class="line">        <span class="hljs-comment">//first </span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//bubblesort(a);</span></span><br><span class="line">        <span class="hljs-comment">//second</span></span><br><span class="line">        bubblesort_1(a);</span><br><span class="line">        </span><br><span class="line">        rep(i,<span class="hljs-number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Please input the size of the data:"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"> ll a[<span class="hljs-number">10000</span>],n;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(ll i,ll j)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ll t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectsort</span><span class="hljs-params">(ll a[])</span></span></span><br><span class="line"><span class="hljs-function"> </span>&#123;</span><br><span class="line">     ll k,t;</span><br><span class="line">     <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">1</span>;i&lt;n;++i)</span><br><span class="line">     &#123;</span><br><span class="line">         k =i;</span><br><span class="line">         <span class="hljs-keyword">for</span>(ll j =i+<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="hljs-keyword">if</span>(a[j]&gt;a[k])</span><br><span class="line">                k = j;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="hljs-keyword">if</span>(k!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(k,i);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        selectsort(a);</span><br><span class="line">        <span class="hljs-comment">//select_sort(a);</span></span><br><span class="line">        <span class="hljs-keyword">for</span>(ll i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-comment">//bilibili</span></span><br><span class="line"><span class="hljs-comment">//https://www.bilibili.com/video/av54557540/?spm_id_from=333.788.videocard.1</span></span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getarray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-comment">//unsigned sr = time(NULL);</span></span><br><span class="line"><span class="hljs-keyword">int</span> t=<span class="hljs-number">1000</span>; srand(time(<span class="hljs-literal">NULL</span>));</span><br><span class="line"><span class="hljs-keyword">while</span>(t&lt;<span class="hljs-number">1</span>||t&gt;<span class="hljs-number">100</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"> t=rand()%<span class="hljs-number">100</span>;</span><br><span class="line"> a[i] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Random array is: "</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">countsort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A,<span class="hljs-keyword">int</span> *Aux,<span class="hljs-keyword">int</span> *sortedA,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> k =<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">k = max(k,A[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;++i)</span><br><span class="line">&#123;</span><br><span class="line">Aux[i] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">Aux[A[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=k;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> t = Aux[i];</span><br><span class="line"><span class="hljs-keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">sortedA[j] = i;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数量"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">getarray(a,n);</span><br><span class="line"><span class="hljs-keyword">int</span> b[<span class="hljs-number">10000</span>],c[<span class="hljs-number">1000</span>];</span><br><span class="line">countsort(a,b,c,n);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"排序结果为：\n"</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;c[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>; </span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数量"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简单插入排序"><a href="#简单插入排序" class="headerlink" title="简单插入排序"></a>简单插入排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX  100000</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,x,y) for(int i =x;i&lt;=y;++i)</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    ll aa;</span><br><span class="line">&#125;data;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    data a[MAX];</span><br><span class="line">    ll length;</span><br><span class="line">&#125;List;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertsort</span><span class="hljs-params">(List &amp;L)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ll i,j;</span><br><span class="line">    rep(i,<span class="hljs-number">2</span>,L.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(L.a[i].aa&lt;L.a[i<span class="hljs-number">-1</span>].aa)</span><br><span class="line">        &#123;</span><br><span class="line">            L.a[<span class="hljs-number">0</span>] = L.a[i];</span><br><span class="line">            L.a[i] = L.a[i<span class="hljs-number">-1</span>];</span><br><span class="line">            <span class="hljs-keyword">for</span>( j =i<span class="hljs-number">-2</span>;L.a[<span class="hljs-number">0</span>].aa&lt;L.a[j].aa;--j)</span><br><span class="line">            &#123;</span><br><span class="line">                L.a[j+<span class="hljs-number">1</span>] = L.a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            L.a[j+<span class="hljs-number">1</span>] = L.a[<span class="hljs-number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    List L;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数据大小"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        ll i;</span><br><span class="line">        L.length = n;</span><br><span class="line">        rep(i,<span class="hljs-number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;L.a[i].aa;</span><br><span class="line">        &#125;</span><br><span class="line">        insertsort(L);</span><br><span class="line">        rep(i,<span class="hljs-number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;L.a[i].aa&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数据大小"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,x,y)  for(int i =x;i&lt;=y;++i)</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    ll aa;</span><br><span class="line">&#125;data;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    data a[MAX];</span><br><span class="line">    ll length;</span><br><span class="line">&#125;List;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">binary_insert_sort</span><span class="hljs-params">(List &amp;L)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ll i;</span><br><span class="line">    ll low,high,m;</span><br><span class="line">    rep(i,<span class="hljs-number">2</span>,L.length)</span><br><span class="line">    &#123;</span><br><span class="line">        L.a[<span class="hljs-number">0</span>] = L.a[i];</span><br><span class="line">        low = <span class="hljs-number">1</span>;high = i<span class="hljs-number">-1</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span>(low&lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            m = (low+high)/<span class="hljs-number">2</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span>(L.a[<span class="hljs-number">0</span>].aa&lt;L.a[m].aa) high = m<span class="hljs-number">-1</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span> low = m+<span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll j = i<span class="hljs-number">-1</span>;j&gt;=high+<span class="hljs-number">1</span>;--j)</span><br><span class="line">            L.a[j+<span class="hljs-number">1</span>] = L.a[j];</span><br><span class="line">        L.a[high+<span class="hljs-number">1</span>] = L.a[<span class="hljs-number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    List L;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数据大小"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        ll i;</span><br><span class="line">        L.length = n;</span><br><span class="line">        rep(i,<span class="hljs-number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;L.a[i].aa;</span><br><span class="line">        &#125;</span><br><span class="line">        binary_insert_sort(L);</span><br><span class="line">        rep(i,<span class="hljs-number">1</span>,n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;L.a[i].aa&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数据大小"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll n,a[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellsort</span><span class="hljs-params">(ll a[])</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> t;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> gap = n/<span class="hljs-number">2</span>;gap&gt;<span class="hljs-number">0</span>;gap/=<span class="hljs-number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=gap;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i-gap;j&gt;=<span class="hljs-number">0</span>&amp;&amp;a[j]&gt;a[j+gap];j-=gap )</span><br><span class="line">            &#123;</span><br><span class="line">                t = a[j];</span><br><span class="line">                a[j] = a[j+gap];</span><br><span class="line">                a[j+gap] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数据大小"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        shellsort(a);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入数据大小"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll n,a[<span class="hljs-number">100000</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">partition</span><span class="hljs-params">(ll a[],ll begin,ll end)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    a[<span class="hljs-number">0</span>] = a[begin];</span><br><span class="line">    ll key = a[begin];</span><br><span class="line">    <span class="hljs-keyword">while</span>(begin&lt;end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(begin&lt;end&amp;&amp;a[end]&gt;=a[<span class="hljs-number">0</span>]) end--;</span><br><span class="line">        a[begin] = a[end];</span><br><span class="line">        <span class="hljs-keyword">while</span>(begin&lt;end&amp;&amp;a[begin]&lt;=a[<span class="hljs-number">0</span>]) begin++;</span><br><span class="line">        a[end] = a[begin];</span><br><span class="line">    &#125;</span><br><span class="line">    a[end] = a[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-keyword">return</span> end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(ll a[],ll begin, ll end)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(begin&lt;end)</span><br><span class="line">    &#123;</span><br><span class="line">        ll pivotkey = partition(a,begin,end);</span><br><span class="line">        quicksort(a,begin,pivotkey<span class="hljs-number">-1</span>);</span><br><span class="line">        quicksort(a,pivotkey+<span class="hljs-number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Please input the size of the data"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        quicksort(a,<span class="hljs-number">1</span>,n);</span><br><span class="line">        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Please input the size of the data"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周练19.11.24</title>
      <link href="/AngelNI.github.io/3/"/>
      <url>/AngelNI.github.io/3/</url>
      
        <content type="html"><![CDATA[<p>积薄而为厚，积少而为多。<a id="more"></a></p><h1 id="CodeForces-1180A"><a href="#CodeForces-1180A" class="headerlink" title="CodeForces - 1180A "></a><a href="https://vjudge.net/problem/2502036/origin" target="_blank" rel="noopener">CodeForces - 1180A </a></h1><p>While playing with geometric figures Alex has accidentally invented a concept of a nn-th order rhombus in a cell grid.</p><p>A 11-st order rhombus is just a square 1×11×1 (i.e just a cell).</p><p>A nn-th order rhombus for all n≥2n≥2 one obtains from a n−1n−1-th order rhombus adding all cells which have a common side with it to it (look at the picture to understand it better).</p><p><img src="https://vj.z180.cn/aafbf394244011b7c56157b1a3da02d7?v=1574585563" alt="img"></p><p>Alex asks you to compute the number of cells in a nn-th order rhombus.</p><p><strong>Input</strong></p><p>The first and only input line contains integer nn (1≤n≤1001≤n≤100) — order of a rhombus whose numbers of cells should be computed.</p><p><strong>Output</strong></p><p>Print exactly one integer — the number of cells in a nn-th order rhombus.</p><p><strong>Examples</strong></p><p><strong>Input</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>Input</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>Input</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><p>Images of rhombus corresponding to the examples are given in the statement.</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll n;</span><br><span class="line">ll num;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">num = <span class="hljs-number">2</span>*(n<span class="hljs-number">-1</span>)*(n<span class="hljs-number">-1</span>)+<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="CodeForces-1180B"><a href="#CodeForces-1180B" class="headerlink" title="CodeForces - 1180B"></a><a href="https://vjudge.net/problem/2502037/origin" target="_blank" rel="noopener">CodeForces - 1180B</a></h1><p>Nick had received an awesome array of integers a=[a1,a2,…,an]a=[a1,a2,…,an] as a gift for his 55 birthday from his mother. He was already going to explore its various properties but after unpacking he was disappointed a lot because the product a1⋅a2⋅…ana1⋅a2⋅…an of its elements seemed to him not large enough.</p><p>He was ready to throw out the array, but his mother reassured him. She told him, that array would not be spoiled after the following operation: choose any index ii (1≤i≤n1≤i≤n) and do ai:=−ai−1ai:=−ai−1.</p><p>For example, he can change array [3,−1,−4,1][3,−1,−4,1] to an array [−4,−1,3,1][−4,−1,3,1] after applying this operation to elements with indices i=1i=1 and i=3i=3.</p><p>Kolya had immediately understood that sometimes it’s possible to increase the product of integers of the array a lot. Now he has decided that he wants to get an array with the maximal possible product of integers using only this operation with its elements (possibly zero, one or more times, as many as he wants), it is not forbidden to do this operation several times for the same index.</p><p>Help Kolya and print the array with the maximal possible product of elements a1⋅a2⋅…ana1⋅a2⋅…an which can be received using only this operation in some order.</p><p>If there are multiple answers, print any of them.</p><p>Input</p><p>The first line contains integer nn (1≤n≤1051≤n≤105) — number of integers in the array.</p><p>The second line contains nn integers a1,a2,…,ana1,a2,…,an (−106≤ai≤106−106≤ai≤106) — elements of the array</p><p>Output</p><p>Print nn numbers — elements of the array with the maximal possible product of elements which can be received using only this operation in some order from the given array.</p><p>If there are multiple answers, print any of them.</p><p>Examples</p><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 2 2 2</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3 -3 -3 -3</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">-3 -3 2</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3 -3 2</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll n;</span><br><span class="line">ll a[<span class="hljs-number">200000</span>],b[<span class="hljs-number">200000</span>];</span><br><span class="line">ll Max1,Max2;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">ll Min = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]&gt;=<span class="hljs-number">0</span>)</span><br><span class="line">a[i] = -a[i] - <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]&lt;<span class="hljs-number">0</span>)</span><br><span class="line">Min= min(a[i],Min);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]==Min)</span><br><span class="line">&#123;a[i] = -a[i] - <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CodeForces-1169B"><a href="#CodeForces-1169B" class="headerlink" title="CodeForces - 1169B"></a><a href="https://vjudge.net/problem/2465025/origin" target="_blank" rel="noopener">CodeForces - 1169B</a></h1><p>Toad Ivan has mm pairs of integers, each integer is between 11 and nn, inclusive. The pairs are (a1,b1),(a2,b2),…,(am,bm)(a1,b1),(a2,b2),…,(am,bm).</p><p>He asks you to check if there exist two integers xx and yy (1≤x&lt;y≤n1≤x&lt;y≤n) such that in each given pair at least one integer is equal to xx or yy.</p><p>Input</p><p>The first line contains two space-separated integers nn and mm (2≤n≤3000002≤n≤300000, 1≤m≤3000001≤m≤300000) — the upper bound on the values of integers in the pairs, and the number of given pairs.</p><p>The next mm lines contain two integers each, the ii-th of them contains two space-separated integers aiaiand bibi (1≤ai,bi≤n,ai≠bi1≤ai,bi≤n,ai≠bi) — the integers in the ii-th pair.</p><p>Output</p><p>Output “YES” if there exist two integers xx and yy (1≤x&lt;y≤n1≤x&lt;y≤n) such that in each given pair at least one integer is equal to xx or yy. Otherwise, print “NO”. You can print each letter in any case (upper or lower).</p><p>Examples</p><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">300000 5</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><p>Note</p><p>In the first example, you can’t choose any xx, yy because for each such pair you can find a given pair where both numbers are different from chosen integers.</p><p>In the second example, you can choose x=2x=2 and y=4y=4.</p><p>In the third example, you can choose x=1x=1 and y=2y=2.</p><p>The circle line of the Roflanpolis subway has nn stations.</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll n,m;</span><br><span class="line">ll a[<span class="hljs-number">400000</span>],b1[<span class="hljs-number">400000</span>],b2[<span class="hljs-number">400000</span>];</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line">&#125;mm[<span class="hljs-number">300006</span>];</span><br><span class="line">ll con,num,flag;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">num = <span class="hljs-number">0</span>;</span><br><span class="line">flag = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;mm[i].x&gt;&gt;mm[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(mm[i].x!=mm[<span class="hljs-number">1</span>].x&amp;&amp;mm[i].y!=mm[<span class="hljs-number">1</span>].x)</span><br><span class="line">&#123;</span><br><span class="line">a[num++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;num;++i)</span><br><span class="line">&#123;</span><br><span class="line">b1[mm[a[i]].x]++;</span><br><span class="line">b1[mm[a[i]].y]++;</span><br><span class="line"><span class="hljs-keyword">if</span>(b1[mm[a[i]].x] == num||b1[mm[a[i]].y]==num)</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(num ==<span class="hljs-number">0</span>) </span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">num = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(mm[i].x!=mm[<span class="hljs-number">1</span>].y&amp;&amp;mm[i].y!=mm[<span class="hljs-number">1</span>].y)</span><br><span class="line">&#123;</span><br><span class="line">a[num++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;num;++i)</span><br><span class="line">&#123;</span><br><span class="line">b2[mm[a[i]].x]++;</span><br><span class="line">b2[mm[a[i]].y]++;</span><br><span class="line"><span class="hljs-keyword">if</span>(b2[mm[a[i]].x] == num||b2[mm[a[i]].y]==num)</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CodeForces-1169A"><a href="#CodeForces-1169A" class="headerlink" title="CodeForces - 1169A "></a><a href="https://vjudge.net/problem/2465024/origin" target="_blank" rel="noopener">CodeForces - 1169A </a></h1><p>There are two parallel routes in the subway. The first one visits stations in order 1→2→…→n→1→2→…1→2→…→n→1→2→… (so the next stop after station xx is equal to (x+1)(x+1) if x&lt;nx&lt;n and 11otherwise). The second route visits stations in order n→(n−1)→…→1→n→(n−1)→…n→(n−1)→…→1→n→(n−1)→…(so the next stop after station xx is equal to (x−1)(x−1) if x&gt;1x&gt;1 and nn otherwise). All trains depart their stations simultaneously, and it takes exactly 11 minute to arrive at the next station.</p><p>Two toads live in this city, their names are Daniel and Vlad.</p><p>Daniel is currently in a train of the first route at station aa and will exit the subway when his train reaches station xx.</p><p>Coincidentally, Vlad is currently in a train of the second route at station bb and he will exit the subway when his train reaches station yy.</p><p>Surprisingly, all numbers a,x,b,ya,x,b,y are distinct.</p><p>Toad Ilya asks you to check if Daniel and Vlad will ever be at the same station at the same time during their journey. In other words, check if there is a moment when their trains stop at the same station. Note that this includes the moments when Daniel or Vlad enter or leave the subway.</p><p>Input</p><p>The first line contains five space-separated integers nn, aa, xx, bb, yy (4≤n≤1004≤n≤100, 1≤a,x,b,y≤n1≤a,x,b,y≤n, all numbers among aa, xx, bb, yy are distinct) — the number of stations in Roflanpolis, Daniel’s start station, Daniel’s finish station, Vlad’s start station and Vlad’s finish station, respectively.</p><p>Output</p><p>Output “YES” if there is a time moment when Vlad and Daniel are at the same station, and “NO” otherwise. You can print each letter in any case (upper or lower).</p><p>Examples</p><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 1 4 3 2</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><p>Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 2 1 9 10</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><p>Note</p><p>In the first example, Daniel and Vlad start at the stations (1,3)(1,3). One minute later they are at stations (2,2)(2,2). They are at the same station at this moment. Note that Vlad leaves the subway right after that.</p><p>Consider the second example, let’s look at the stations Vlad and Daniel are at. They are:</p><ul><li>initially (2,9)(2,9),</li><li>after 11 minute (3,8)(3,8),</li><li>after 22 minutes (4,7)(4,7),</li><li>after 33 minutes (5,6)(5,6),</li><li>after 44 minutes (6,5)(6,5),</li><li>after 55 minutes (7,4)(7,4),</li><li>after 66 minutes (8,3)(8,3),</li><li>after 77 minutes (9,2)(9,2),</li><li>after 88 minutes (10,1)(10,1),</li><li>after 99 minutes (1,10)(1,10).</li></ul><p>After that, they both leave the subway because they are at their finish stations, so there is no moment when they both are at the same station.</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line">ll aa[<span class="hljs-number">105</span>];</span><br><span class="line">ll n;</span><br><span class="line">ll a,x,b,y;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;x&gt;&gt;b&gt;&gt;y;</span><br><span class="line"><span class="hljs-keyword">for</span>(ll i =a,j = b;;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i&gt;n) i = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>) j=n;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==j)</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==x||j==y)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-keyword">if</span>(flag)</span><br><span class="line"> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周练19.11.17</title>
      <link href="/AngelNI.github.io/2/"/>
      <url>/AngelNI.github.io/2/</url>
      
        <content type="html"><![CDATA[<p>愿能把握当下，珍惜每一段追逐的时光，铭记每一次美好的相遇，不给人生留下遗憾。<a id="more"></a></p><h1 id="B-Consecutive-Integers"><a href="#B-Consecutive-Integers" class="headerlink" title="B - Consecutive Integers"></a>B - Consecutive Integers</h1><p><strong>Problem Statement</strong></p><p>Snuke has <em>N</em> integers: 1,2,[ldots],<em>N</em>. He will choose <em>K</em> of them and give those to Takahashi.</p><p>How many ways are there to choose <em>K</em> consecutive integers?</p><p><strong>Constraints</strong></p><ul><li>All values in input are integers.</li><li>1≤<em>K</em>≤<em>N</em>≤50</li></ul><p><strong>Input</strong></p><p>Input is given from Standard Input in the following format:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N K</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><p>Print the answer.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>There are two ways to choose two consecutive integers: (1,2) and (2,3).</p><p><strong>Sample Input 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 3</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><p><strong>AC</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,k;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;(n-k)+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-ModSum"><a href="#C-ModSum" class="headerlink" title="C - ModSum"></a>C - ModSum</h1><p> <strong>Problem Statement</strong></p><p>For an integer <em>N</em>, we will choose a permutation {<em>P</em>1,<em>P</em>2,…,<em>P**N</em>} of {1,2,…,<em>N</em>}.</p><p>Then, for each <em>i</em>=1,2,…,<em>N</em>, let <em>M**i</em> be the remainder when <em>i</em> is divided by <em>P**i</em>.</p><p>Find the maximum possible value of <em>M</em>1+<em>M</em>2+[cdots]+<em>M**N</em>.</p><p><strong>Constraints</strong></p><ul><li><em>N</em> is an integer satisfying 1≤<em>N</em>≤109.</li></ul><p><strong>Input</strong></p><p>Input is given from Standard Input in the following format:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><p>Print the maximum possible value of <em>M</em>1+<em>M</em>2+[cdots]+<em>M**N</em>.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>When the permutation {<em>P</em>1,<em>P</em>2}={2,1} is chosen, <em>M</em>1+<em>M</em>2=1+0=1.</p><p><strong>Sample Input 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">78</span><br></pre></td></tr></table></figure><p><strong>Sample Input 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>Sample Output 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>AC</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span> ;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)</span><br><span class="line">  sum+=i;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Monsters-Battle-Royale"><a href="#F-Monsters-Battle-Royale" class="headerlink" title="F - Monsters Battle Royale"></a>F - Monsters Battle Royale</h1><p><strong>Problem Statement</strong></p><p>There are <em>N</em> monsters, numbered 1,2,…,<em>N</em>.</p><p>Initially, the health of Monster <em>i</em> is <em>A**i</em>.</p><p>Below, a monster with at least 1 health is called alive.</p><p>Until there is only one alive monster, the following is repeated:</p><ul><li>A random alive monster attacks another random alive monster.</li><li>As a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.</li></ul><p>Find the minimum possible final health of the last monster alive.</p><p><strong>Constraints</strong></p><ul><li>All values in input are integers.</li><li>2≤<em>N</em>≤105</li><li>1≤<em>A*</em>i*≤109</li></ul><p><strong>Input</strong></p><p>Input is given from Standard Input in the following format:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N</span><br><span class="line">A1 A2 … AN</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><p>Print the minimum possible final health of the last monster alive.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2 10 8 40</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>When only the first monster keeps on attacking, the final health of the last monster will be 2, which is minimum.</p><p><strong>Sample Input 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5 13 8 1000000000</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>Sample Input 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1000000000 1000000000 1000000000</span><br></pre></td></tr></table></figure><p><strong>Sample Output 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000000000</span><br></pre></td></tr></table></figure><p><strong>AC</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> a[(<span class="hljs-keyword">int</span>)<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n)) </span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> ans;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;</span><br><span class="line">        sort(a + begin, a + n);</span><br><span class="line">        <span class="hljs-keyword">while</span> (a[begin] == <span class="hljs-number">0</span>) begin++;</span><br><span class="line">        <span class="hljs-keyword">if</span> (begin == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = begin + <span class="hljs-number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] %= a[begin];</span><br><span class="line">            <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span>) &#123;</span><br><span class="line">                ans = <span class="hljs-number">1</span>;</span><br><span class="line">                flag = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(flag)</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!flag)</span><br><span class="line">    ans = a[n<span class="hljs-number">-1</span>];</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-Powerful-Discount-Tickets"><a href="#G-Powerful-Discount-Tickets" class="headerlink" title="G - Powerful Discount Tickets"></a>G - Powerful Discount Tickets</h1><p><strong>Problem Statement</strong></p><p>Takahashi is going to buy <em>N</em> items one by one.</p><p>The price of the <em>i</em>-th item he buys is <em>A**i</em> yen (the currency of Japan).</p><p>He has <em>M</em> discount tickets, and he can use any number of them when buying an item.</p><p>If <em>Y</em> tickets are used when buying an item priced <em>X</em> yen, he can get the item for X/2^Y </p><p>(rounded down to the nearest integer) yen</p><p>What is the minimum amount of money required to buy all the items?</p><p><strong>Constraints</strong></p><ul><li>All values in input are integers.</li><li>1≤<em>N</em>,<em>M</em>≤105</li><li>1≤<em>A*</em>i*≤109</li></ul><p><strong>Input</strong></p><p>Input is given from Standard Input in the following format:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N M</span><br><span class="line">A1 A2 … AN</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><p>Print the minimum amount of money required to buy all the items.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">2 13 8</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><p>We can buy all the items for 9 yen, as follows:</p><ul><li>Buy the 1-st item for 2 yen without tickets.</li><li>Buy the 2-nd item for 3 yen with 2 tickets.</li><li>Buy the 3-rd item for 4 yen with 1 ticket.</li></ul><p><strong>Sample Input 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 9 3 5</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p><strong>Sample Input 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 100000</span><br><span class="line">1000000000</span><br></pre></td></tr></table></figure><p><strong>Sample Output 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>We can buy the item priced 1000000000 yen for 0 yen with 100000 tickets.</p><p><strong>Sample Input 4</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 1</span><br><span class="line">1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000</span><br></pre></td></tr></table></figure><p><strong>Sample Output 4</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9500000000</span><br></pre></td></tr></table></figure><p><strong>AC</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> m,n;  </span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">&#123; </span><br><span class="line">priority_queue&lt;<span class="hljs-keyword">int</span>&gt;q;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line">q.push(t);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span>(m)</span><br><span class="line">&#123;</span><br><span class="line">t=q.top()/<span class="hljs-number">2</span>;</span><br><span class="line">q.pop();</span><br><span class="line">q.push(t);</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">sum+=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-Lower"><a href="#I-Lower" class="headerlink" title="I - Lower"></a>I - Lower</h1><p><strong>Problem Statement</strong></p><p>There are <em>N</em> squares arranged in a row from left to right.</p><p>The height of the <em>i</em>-th square from the left is <em>H**i</em>.</p><p>You will land on a square of your choice, then repeat moving to the adjacent square <strong>on the right</strong> as long as the height of the next square is not greater than that of the current square.</p><p>Find the maximum number of times you can move.</p><p><strong>Constraints</strong></p><ul><li>All values in input are integers.</li><li>1≤<em>N</em>≤105</li><li>1≤<em>H*</em>i*≤109</li></ul><p><strong>Input</strong></p><p>Input is given from Standard Input in the following format:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N</span><br><span class="line">H1 H2 … HN</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><p>Print the maximum number of times you can move.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 4 8 7 3</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>By landing on the third square from the left, you can move to the right twice.</p><p><strong>Sample Input 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">4 4 5 6 6 5 5</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>By landing on the fourth square from the left, you can move to the right three times.</p><p><strong>Sample Input 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><p><strong>Sample Output 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>AC</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100000009</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> con=<span class="hljs-number">0</span>,num=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> k = a[<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i&lt;=t;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(k&gt;=a[i])</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">k=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(k&lt;a[i])</span><br><span class="line">&#123;</span><br><span class="line">con = max(num,con);</span><br><span class="line">num = <span class="hljs-number">0</span>;</span><br><span class="line">k = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">con = max(con,num);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;con&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="M-AB-Substrings"><a href="#M-AB-Substrings" class="headerlink" title="M - AB Substrings"></a>M - AB Substrings</h1><p><strong>Problem Statement</strong></p><p>Snuke has <em>N</em> strings. The <em>i</em>-th string is <em>s**i</em>.</p><p>Let us concatenate these strings into one string after arranging them in some order. Find the maximum possible number of occurrences of <code>AB</code> in the resulting string.</p><p><strong>Constraints</strong></p><ul><li>1≤<em>N</em>≤104</li><li>2≤|<em>s**i</em>|≤10</li><li><em>s**i</em> consists of uppercase English letters.</li></ul><p><strong>Input</strong></p><p>Input is given from Standard Input in the following format:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N</span><br><span class="line">s1</span><br><span class="line">\vdots</span><br><span class="line">s_N</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><p>Print the answer.</p><p><strong>Sample Input 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">ABCA</span><br><span class="line">XBAZ</span><br><span class="line">BAD</span><br></pre></td></tr></table></figure><p><strong>Sample Output 1</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>For example, if we concatenate <code>ABCA</code>, <code>BAD</code> and <code>XBAZ</code> in this order, the resulting string <code>ABCABADXBAZ</code> has two occurrences of <code>AB</code>.</p><p><strong>Sample Input 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">BEWPVCRWH</span><br><span class="line">ZZNQYIJX</span><br><span class="line">BAVREA</span><br><span class="line">PA</span><br><span class="line">HJMYITEOX</span><br><span class="line">BCJHMRMNK</span><br><span class="line">BP</span><br><span class="line">QVFABZ</span><br><span class="line">PRGKSPUNA</span><br></pre></td></tr></table></figure><p><strong>Sample Output 2</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p><strong>Sample Input 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">RABYBBE</span><br><span class="line">JOZ</span><br><span class="line">BMHQUVA</span><br><span class="line">BPA</span><br><span class="line">ISU</span><br><span class="line">MCMABAOBHZ</span><br><span class="line">SZMEHMA</span><br></pre></td></tr></table></figure><p><strong>Sample Output 3</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p><strong>AC</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">1100</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> head=<span class="hljs-number">0</span>,tail=<span class="hljs-number">0</span>,mid=<span class="hljs-number">0</span>,con=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,&amp;a);</span><br><span class="line"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(a);</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">'B'</span>&amp;&amp;a[len<span class="hljs-number">-1</span>]==<span class="hljs-string">'A'</span>)</span><br><span class="line">con++;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-string">'B'</span>&amp;&amp;a[len<span class="hljs-number">-1</span>]!=<span class="hljs-string">'A'</span>)</span><br><span class="line">head++;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[len<span class="hljs-number">-1</span>]==<span class="hljs-string">'A'</span>&amp;&amp;a[<span class="hljs-number">0</span>]!=<span class="hljs-string">'B'</span>)</span><br><span class="line">tail++;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;len<span class="hljs-number">-1</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[j]==<span class="hljs-string">'B'</span>&amp;&amp;a[j<span class="hljs-number">-1</span>]==<span class="hljs-string">'A'</span>)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> h=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(con)</span><br><span class="line">&#123;</span><br><span class="line">ans = ans+con<span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(head)</span><br><span class="line">t = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(tail)</span><br><span class="line">h = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">head = head+h;</span><br><span class="line">tail = tail+t;</span><br><span class="line"></span><br><span class="line">ans = ans+min(head,tail);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找（下）</title>
      <link href="/AngelNI.github.io/Find-2/"/>
      <url>/AngelNI.github.io/Find-2/</url>
      
        <content type="html"><![CDATA[<p>可倒一定连续，连续不一定可倒<a id="more"></a></p><h1 id="查找（下）"><a href="#查找（下）" class="headerlink" title="查找（下）"></a>查找（下）</h1><h2 id="1-排序二叉树"><a href="#1-排序二叉树" class="headerlink" title="1.排序二叉树"></a>1.排序二叉树</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找（上）</title>
      <link href="/AngelNI.github.io/find-1/"/>
      <url>/AngelNI.github.io/find-1/</url>
      
        <content type="html"><![CDATA[<p>我该如何是好~</p><p>插入查找？斐波那契查找？<a id="more"></a></p><h1 id="查找（静态查找）"><a href="#查找（静态查找）" class="headerlink" title="查找（静态查找）"></a>查找（静态查找）</h1><h2 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1.顺序查找"></a>1.顺序查找</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>] =&#123;<span class="hljs-number">5</span>,<span class="hljs-number">16</span>,<span class="hljs-number">20</span>,<span class="hljs-number">27</span>,<span class="hljs-number">30</span>,<span class="hljs-number">36</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">60</span>,<span class="hljs-number">67</span>,<span class="hljs-number">74</span>&#125;;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; b(a,a+<span class="hljs-number">11</span>);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"5,16,20,27,30,36,44,55,60,67,74"</span> &lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入要查找的数字"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> k;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;=b.size();++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(b[i]==k)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"位于第"</span>&lt;&lt;i+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">"个"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-哨兵查找"><a href="#2-哨兵查找" class="headerlink" title="2.哨兵查找"></a>2.哨兵查找</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入序列长度"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> l ;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;l; </span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入查找的序列"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=l;++i)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入要查找的数字"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> k;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;k;</span><br><span class="line">a[<span class="hljs-number">0</span>]=k;<span class="hljs-comment">//定义哨兵</span></span><br><span class="line"><span class="hljs-keyword">int</span> j;</span><br><span class="line"><span class="hljs-keyword">for</span>( j =l;a[j]!=k;--j);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"位于第"</span>&lt;&lt;j&lt;&lt;<span class="hljs-string">"个"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3.二分查找"></a>3.二分查找</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> len ;</span><br><span class="line"><span class="hljs-keyword">int</span> k ;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search_bin</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,r = len;</span><br><span class="line"><span class="hljs-keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid = (l+r)/<span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[mid]==k)<span class="hljs-keyword">return</span> mid;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k&lt;a[mid]) r = mid<span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> l = mid+<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入序列长度"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;len; </span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入查找的序列"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入要查找的数字"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="hljs-comment">//二分对有序序列查找 ，先排序，在查找</span></span><br><span class="line">sort(a,a+len);</span><br><span class="line"><span class="hljs-keyword">int</span> ans = search_bin();</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"位于第"</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4.    斐波那契查找"></a>4.    斐波那契查找</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> F[<span class="hljs-number">100</span>]; </span><br><span class="line"><span class="hljs-keyword">int</span> len ;</span><br><span class="line"><span class="hljs-keyword">int</span> k ;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Fibonacci_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> low,high,mid,i,k=<span class="hljs-number">0</span>;</span><br><span class="line">low=<span class="hljs-number">1</span>;<span class="hljs-comment">/* 定义最低下标为记录首位 */</span></span><br><span class="line">high=n;<span class="hljs-comment">/* 定义最高下标为记录末位 */</span></span><br><span class="line"><span class="hljs-keyword">while</span>(n&gt;F[k]<span class="hljs-number">-1</span>)</span><br><span class="line">k++;</span><br><span class="line"><span class="hljs-keyword">for</span> (i=n;i&lt;F[k]<span class="hljs-number">-1</span>;i++)</span><br><span class="line">a[i]=a[n];</span><br><span class="line"><span class="hljs-keyword">while</span>(low&lt;=high)</span><br><span class="line">&#123;</span><br><span class="line">mid=low+F[k<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (key&lt;a[mid])</span><br><span class="line">&#123;</span><br><span class="line">high=mid<span class="hljs-number">-1</span>;</span><br><span class="line">k=k<span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key&gt;a[mid])</span><br><span class="line">&#123;</span><br><span class="line">low=mid+<span class="hljs-number">1</span>;</span><br><span class="line">k=k<span class="hljs-number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (mid&lt;=n)</span><br><span class="line"><span class="hljs-keyword">return</span> mid;<span class="hljs-comment">/* 若相等则说明mid即为查找到的位置 */</span></span><br><span class="line"><span class="hljs-keyword">else</span> </span><br><span class="line"><span class="hljs-keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">F[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;</span><br><span class="line">F[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt; <span class="hljs-number">100</span>;i++)  </span><br><span class="line">&#123; </span><br><span class="line">F[i] = F[i<span class="hljs-number">-1</span>] + F[i<span class="hljs-number">-2</span>];  </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入序列长度"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;len; </span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入查找的序列"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入要查找的数字"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;k;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> result=Fibonacci_Search(a,len,k);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"位于第:%d 位\n"</span>,result); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-插入查找"><a href="#5-插入查找" class="headerlink" title="5.插入查找"></a>5.插入查找</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> F[<span class="hljs-number">100</span>]; </span><br><span class="line"><span class="hljs-keyword">int</span> len ;</span><br><span class="line"><span class="hljs-keyword">int</span> k ;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">inter_Search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> key)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> low,high,mid;</span><br><span class="line">low=<span class="hljs-number">1</span>;<span class="hljs-comment">/* 定义最低下标为记录首位 */</span></span><br><span class="line">high=n;<span class="hljs-comment">/* 定义最高下标为记录末位 */</span></span><br><span class="line"><span class="hljs-keyword">while</span>(low&lt;=high)</span><br><span class="line">&#123;</span><br><span class="line">mid=low+ (high-low)*(key-a[low])/(a[high]-a[low]); <span class="hljs-comment">/* 插值 */</span></span><br><span class="line"><span class="hljs-keyword">if</span> (key&lt;a[mid])<span class="hljs-comment">/* 若查找值比插值小 */</span></span><br><span class="line">high=mid<span class="hljs-number">-1</span>;<span class="hljs-comment">/* 最高下标调整到插值下标小一位 */</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key&gt;a[mid])<span class="hljs-comment">/* 若查找值比插值大 */</span></span><br><span class="line">low=mid+<span class="hljs-number">1</span>;<span class="hljs-comment">/* 最低下标调整到插值下标大一位 */</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-keyword">return</span> mid;<span class="hljs-comment">/* 若相等则说明mid即为查找到的位置 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入序列长度"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;len; </span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入查找的序列"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入要查找的数字"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="hljs-keyword">int</span> result=inter_Search(a,len,k);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"位于第 %d 位\n"</span>,result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周练19.11.03/10</title>
      <link href="/AngelNI.github.io/1/"/>
      <url>/AngelNI.github.io/1/</url>
      
        <content type="html"><![CDATA[<p>花于无声处绽放最美，人于宁静中沉淀愈浓。<a id="more"></a></p><h1 id="POJ3984"><a href="#POJ3984" class="headerlink" title="POJ3984"></a><a href="http://poj.org/problem?id=3984" target="_blank" rel="noopener">POJ3984</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>定义一个二维数组：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int maze[5][5] = &#123;</span><br><span class="line"></span><br><span class="line">0, 1, 0, 0, 0,</span><br><span class="line"></span><br><span class="line">0, 1, 0, 1, 0,</span><br><span class="line"></span><br><span class="line">0, 0, 0, 0, 0,</span><br><span class="line"></span><br><span class="line">0, 1, 1, 1, 0,</span><br><span class="line"></span><br><span class="line">0, 0, 0, 1, 0,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>一个5 × 5的二维数组，表示一个迷宫。数据保证有唯一解。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>左上角到右下角的最短路径，格式如样例所示。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 1 1 0</span><br><span class="line">0 0 0 1 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(0, 0)</span><br><span class="line">(1, 0)</span><br><span class="line">(2, 0)</span><br><span class="line">(2, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(2, 3)</span><br><span class="line">(2, 4)</span><br><span class="line">(3, 4)</span><br><span class="line">(4, 4)</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> mp[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> d[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> x,y;</span><br><span class="line">&#125;now,nt,path[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>&amp;&amp;y==<span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"(0, 0)"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    show(path[x][y].x,path[x][y].y);</span><br><span class="line">    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"("</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">")"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(mp,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span>(mp));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//BFS</span></span><br><span class="line"><span class="hljs-built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">now.x = <span class="hljs-number">0</span>;</span><br><span class="line">now.y = <span class="hljs-number">0</span>;</span><br><span class="line">q.push(now);</span><br><span class="line">mp[now.x][now.y] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">now = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="hljs-keyword">if</span>(now.x==<span class="hljs-number">4</span>&amp;&amp;now.y==<span class="hljs-number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">nt.x = now.x+d[i][<span class="hljs-number">0</span>];</span><br><span class="line">nt.y = now.y+d[i][<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">if</span>(nt.x&gt;=<span class="hljs-number">0</span> &amp;&amp; nt.y&gt;=<span class="hljs-number">0</span> &amp;&amp; nt.x&lt;<span class="hljs-number">5</span> &amp;&amp; nt.y&lt;<span class="hljs-number">5</span> &amp;&amp;mp[nt.x][nt.y]==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mp[nt.x][nt.y]=<span class="hljs-number">1</span>;</span><br><span class="line">path[nt.x][nt.y].x = now.x;</span><br><span class="line">path[nt.x][nt.y].y = now.y;</span><br><span class="line">q.push(nt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-comment">//</span></span><br></pre></td></tr></table></figure><h1 id="CodeForce"><a href="#CodeForce" class="headerlink" title="CodeForce"></a><a href="http://codeforces.com/gym/102394/problem/F" target="_blank" rel="noopener">CodeForce</a></h1><p>Harbin, whose name was originally a Manchu word meaning “a place for drying fishing nets”, grew from a small rural settlement on the Songhua River to become one of the largest cities in Northeast China. Founded in 1898 with the coming of the Chinese Eastern Railway, the city first prospered as a region inhabited by an overwhelming majority of the immigrants from the Russian Empire. Now, Harbin is the capital of Heilongjiang province and the largest city in the northeastern region of the People’s Republic of China. It serves as a key political, economic, scientific, cultural, and communications hub in Northeast China, as well as an important industrial base of the nation.</p><p>This year, a CCPC regional contest is going to be held in this wonderful city, hosted by Northeast Forestry University. To ensure the contest will be a success and enjoyed by programmers around the country, preparations for the event are well underway months before the contest.</p><p>You are the leader of a student volunteer group in charge of making banners to decorate the campus during the event. Unfortunately, your group made a mistake and misprinted one of the banners. To be precise, the word “harbin” is missing in that banner. Because you don’t have time to reprint it, the only way to fix it is to cut letters from some used old banners and paste them onto the misprinted banner. You have exactly six banners, and for some reason, you must cut exactly one letter from each banner. Then, you can arrange and paste the six letters onto the misprinted banner and try to make the missing word “harbin”. However, before you start cutting, you decide to write a program to see if this is possible at all.</p><h2 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h2><p>The input contains multiple cases. The first line of the input contains a single integer T (1≤T≤50000)T (1≤T≤50000), the number of cases.</p><p>For each case, the input contains six lines. Each line contains a non-empty string consisting only of lowercase English letters, describing the letters on one of the old banners.</p><p>The total length of all strings in all cases doesn’t exceed 2⋅1062⋅106.</p><h2 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h2><p>For each case, print the string “Yes” (without quotes) if it is possible to make the word “harbin”, otherwise print the string “No” (without quotes).</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h2 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">welcome</span><br><span class="line">toparticipate</span><br><span class="line">inthe</span><br><span class="line">ccpccontest</span><br><span class="line">inharbin</span><br><span class="line">inoctober</span><br><span class="line">harvest</span><br><span class="line">belong</span><br><span class="line">ninja</span><br><span class="line">reset</span><br><span class="line">amazing</span><br><span class="line">intriguing</span><br></pre></td></tr></table></figure><h2 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><p>这道题比较简单，一开始用dfs搜图没搜出来，看了学长的代码，使用全排列写的，记录一下。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e6</span>+<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> t,mp[<span class="hljs-number">6</span>][<span class="hljs-number">30</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="hljs-keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(mp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> mp);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> st[maxn];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,st);</span><br><span class="line"><span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(st);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len;j++)</span><br><span class="line">mp[i][st[j]-<span class="hljs-string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">char</span> s[<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">"abhinr"</span>&#125;;<span class="hljs-comment">//一定得字典序最小,不然有些情况便利不到 </span></span><br><span class="line"><span class="hljs-keyword">bool</span> flag;</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(!mp[i][s[i]-<span class="hljs-string">'a'</span>])</span><br><span class="line">flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;<span class="hljs-keyword">while</span>(next_permutation(s,s+<span class="hljs-number">6</span>));</span><br><span class="line"><span class="hljs-keyword">if</span>(flag)</span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"Yes"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HDU6575"><a href="#HDU6575" class="headerlink" title="HDU6575"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6575" target="_blank" rel="noopener">HDU6575</a></h1><p>Avin’s company has many ongoing projects with different budgets. His company records the budgets using numbers rounded to 3 digits after the decimal place. However, the company is updating the system and all budgets will be rounded to 2 digits after the decimal place. For example, 1.004 will be rounded down<br>to 1.00 while 1.995 will be rounded up to 2.00. Avin wants to know the difference of the total budget caused by the update.</p><h2 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer n (1 ≤ n ≤ 1, 000). The second line contains n decimals, and the i-th decimal ai (0 ≤ ai ≤ 1e18) represents the budget of the i -th project. All decimals are rounded to 3 digits.</p><h2 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h2><p>Print the difference rounded to 3 digits..</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1.001</span><br><span class="line">1</span><br><span class="line">0.999</span><br><span class="line">2</span><br><span class="line">1.001 0.999</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-0.001</span><br><span class="line">0.001</span><br><span class="line">0.000</span><br></pre></td></tr></table></figure><p>自我感觉这道题太坑了，一开始用double，不行，换成float，WA，最后竟然要用字符串来做，傻眼了。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxx=<span class="hljs-number">1e3</span>+<span class="hljs-number">100</span>;</span><br><span class="line"><span class="hljs-built_in">string</span> s;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">double</span> ans=<span class="hljs-number">0.0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> len;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;s;</span><br><span class="line">len=s.length();</span><br><span class="line">             <span class="hljs-keyword">int</span> x = s[len<span class="hljs-number">-1</span>] - <span class="hljs-string">'0'</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">5</span>&amp;&amp;x&lt;=<span class="hljs-number">9</span>) ans+=<span class="hljs-number">0.001</span>*(<span class="hljs-number">10</span>-x);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">5</span>&amp;&amp;x&gt;<span class="hljs-number">0</span>) ans-=<span class="hljs-number">0.001</span>*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.3lf\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HDU6573"><a href="#HDU6573" class="headerlink" title="HDU6573"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6573" target="_blank" rel="noopener">HDU6573</a></h1><p>Avin is observing the cars at a crossroads. He finds that there are n cars running in the east-west direction with the i-th car passing the intersection at time ai . There are another m cars running in the north-south direction with the i-th car passing the intersection at time bi . If two cars passing the intersections at the same time, a traffic crash occurs. In order to achieve world peace and harmony, all the cars running in the north-south direction wait the same amount of integral time so that no two cars bump. You are asked the minimum waiting time.</p><h2 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h2><p>The first line contains two integers n and m (1 ≤ n, m ≤ 1, 000). The second line contains n distinct integers ai (1 ≤ ai ≤ 1, 000). The third line contains m distinct integers bi (1 ≤ bi ≤ 1, 000).</p><h2 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h2><p>Print a non-negative integer denoting the minimum waiting time.</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1 2</span><br><span class="line">2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>这道题不难，但是读懂题很重要。</p><p>我语文是体育老师教的哈哈~</p><p>模拟一下就可以了</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxx=<span class="hljs-number">5e3</span>+<span class="hljs-number">100</span>;</span><br><span class="line"><span class="hljs-keyword">bool</span> vis1[maxx];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis2[maxx];</span><br><span class="line"><span class="hljs-keyword">int</span> a[maxx];</span><br><span class="line"><span class="hljs-keyword">int</span> b[maxx];</span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(vis1,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis1));</span><br><span class="line"><span class="hljs-built_in">memset</span>(vis2,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis2));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]),vis1[a[i]]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;t&lt;=<span class="hljs-number">3008</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(vis2,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis2));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">vis2[b[i]+t]=<span class="hljs-number">1</span>;<span class="hljs-comment">//对南北方向进行标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>; </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t+<span class="hljs-number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(vis1[i]&amp;&amp;vis2[i])<span class="hljs-comment">//如何南北方向和东西方向同时有车通过，相撞</span></span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,t);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RKGE_论文阅读笔记</title>
      <link href="/AngelNI.github.io/RKGE/"/>
      <url>/AngelNI.github.io/RKGE/</url>
      
        <content type="html"><![CDATA[<p>while(1) {   cout&lt;&lt;”Never Give Up”&lt;&lt;endl;   }  <a id="more"></a></p><h1 id="RKGE"><a href="#RKGE" class="headerlink" title="RKGE"></a>RKGE</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>首先，知识图谱已经被证明，可以有效的提高推荐系统的推荐能力。但是也有不足，主要是知识图谱的手动设计的特征（Existing methods mainly rely on hand-engineered features from KGs (e.g., meta paths),）。据此，提出了本篇文章的知识图谱嵌入方法，来自动的学习实体路径的语义表示和实体之间的路径，以描述用户对项目的偏好，解决上述问题。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>首先介绍了目前最先进的方法是基于元路径的方法，但是，摘要中提到的，基于元路径的方法严重依赖于手工构造特征来表示路径语义，而路径语义有进一步依赖于领域知识，并且手工设计的特征可能不是很充分，无法覆盖所有可能的实体关系，这也是主要缺点。</p><p> 下文又介绍了知识图谱嵌入的方法来推荐，尽管相比于元路径提高了性能，但局限性是忽略了实体之间的语义关系。为此，解决上述方法提出了，RKGE</p><p><img src="https://s2.ax1x.com/2019/11/06/MCz154.png" alt></p><p>就拿上图举例子，我们可以找到这样的路径</p><p>P(people)——&gt; M（moive）——&gt; C（categories）——&gt;M（Moive）</p><p>P——&gt;M——&gt;D(director)——&gt;M</p><p>P——&gt;M——&gt;A(actor)——&gt;M</p><p>………..</p><p>等等这些不同长度，不同语义路径关系，可以有很多条，可以有效的找出用户的喜好品味，同时，可以作出不同的电影推荐。这里就有一个问题，这个人会喜欢这些推荐的所有电影吗？答案当然是不是，每个人都有一个偏好。</p><p>为此，用递归神经网络来学习实体语义关系，通过循环网路找出不同的语义路径。建立路径模型。提出递归知识图谱嵌入的框架RKGE，捕获路径。为区别不同路径的权重，采用池化操作来区分</p><h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><h3 id="基于图的方法"><a href="#基于图的方法" class="headerlink" title="基于图的方法"></a>基于图的方法</h3><p>主要通过随机游走模型，但容易被流行的实体和中间的实体所偏离。</p><p>他们只考虑了KG的拓扑结构，而没有考虑对知识图谱中实体的语义和实体关系进行建模，从而没有充分利用知识图谱进行推荐</p><h3 id="基于元路径的方法"><a href="#基于元路径的方法" class="headerlink" title="基于元路径的方法"></a>基于元路径的方法</h3><p>元路径限制于手工设计特征，限制了推荐系统推荐能力的提高。</p><h3 id="基于知识图谱嵌入的方法"><a href="#基于知识图谱嵌入的方法" class="headerlink" title="基于知识图谱嵌入的方法"></a>基于知识图谱嵌入的方法</h3><p>不能完全捕获实体之间的关系，忽略了实体对之间的关系。</p><p>最后总结，RKGE可以解决目前state-of-the-art推荐方法的一些缺点。</p><h2 id="RKGE-1"><a href="#RKGE-1" class="headerlink" title="RKGE"></a>RKGE</h2><p>通过给定的数据，利用知识图谱编码的异构信息信息来帮助学习用户和项目之间的更贴切关系，然后用它们来进行更好的推荐。所提取的特征可以完全捕获知识图谱中所编码的实体和实体关系的语义。</p><p><strong>操作过程</strong></p><p>具体来说，RKGE采用了一种新的递归网络架构，该架构包含一批递归网络，用于对链接相同实体对的路径的语义建模，这些路径无缝地融合到推荐中。它还使用了一个池操作符来区分不同路径在描述用户对项目的偏好时的重要性。</p><p>为了更好的挖掘数据中用户与项目之间的关系，提出了两种语义路径挖掘的方法：</p><ol><li><strong>只考虑用户到项目之间的路径和这个用户评过分的项目。同时，还会得到用户-用户，项目-项目，这些用户到项目的子序列。</strong></li><li><strong>设定阈值。避免引入大量的噪声，失去语义意义。</strong></li></ol><h3 id="2-递归网络"><a href="#2-递归网络" class="headerlink" title="2.递归网络"></a>2.递归网络</h3><p><img src="https://s2.ax1x.com/2019/11/06/MPeCSf.png" alt></p><p><strong>主要优点：</strong>它们对不同长度的序列进行建模的，以及捕获实体和实体对之间的整个路径的语义的能力</p><p>设计了一个网络体系结构来搜索所有可能的关系，它包含了一批递归网络，每个递归网络学习单个路径的语义表示。</p><p>递归网络通过学习每个实体的语义表示和整个路径的单一表示对路径进行编码。在RKGE中，这些目标是通过两个网络层来实现的，即嵌入层和注意门控隐藏层。</p><h4 id="嵌入层"><a href="#嵌入层" class="headerlink" title="嵌入层"></a>嵌入层</h4><p>对于p中的每个实体e，嵌入层学习一个分布式表示p，将e映射为一个低维向量，该向量的每个元素表示该实体与潜在语义的密切关系，从而捕获实体的语义意义。</p><h4 id="注意门控隐藏层"><a href="#注意门控隐藏层" class="headerlink" title="注意门控隐藏层"></a>注意门控隐藏层</h4><p>为了学习路径表示，隐含层考虑了路径中实体的嵌入和这些实体的顺序。采用基于流的方法，从路径开始到结束的序列编码。采用注意门机制来控制信息流</p><h3 id="3-决策方案"><a href="#3-决策方案" class="headerlink" title="3.决策方案"></a>3.决策方案</h3><p>研究表明较短的路径可能比较长的路径具有更大的影响，因为较短的路径通常表示具有更强的连接性和更清晰的语义。</p><p>注意力机制也能解决这个问题。但是，它的目标通常是识别单个序列中每个元素的重要性，与目标相背。</p><p>所以通过池化操作来实现这个操作。</p><p>池化有两个操作，实验证明，最大池化相比于平均池化有更好的效果。</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p><strong>核心算法</strong></p><p><img src="https://s2.ax1x.com/2019/11/06/MPqxQf.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RKGE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关键路径</title>
      <link href="/AngelNI.github.io/critical-path/"/>
      <url>/AngelNI.github.io/critical-path/</url>
      
        <content type="html"><![CDATA[<p>褪去一切繁华，虚无的外表，不知你还有多少真。<a id="more"></a></p><h1 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h1><p>有向图中，用顶点表示事件，用有向边表示活动之间开始的先后顺序，则称这种有向图为AOV（Activity On Vertex）网络；AOV网络可以反应任务完成的先后顺序（拓扑排序）。</p><p>在AOV网的边上加上权值表示完成该活动所需的时间，则称这样的AOV网为AOE（Activity On Edge）网，如图：　</p><p><img src="https://s2.ax1x.com/2019/11/02/KbIFMQ.png" alt></p><p>如何求AOE网中各事件（节点）和各活动（边）的最早开始时间和最迟开始时间以及工程的关键路径？</p><p>整个活动的完成时间是AOE图中从始点到终点的最长路径的长度，这条路径称为关键路径。关键路径上的活动称作关键活动。</p><p><strong>注意：关键路径不一定只有一条。</strong></p><p><strong>1.最早发生时间：从前往后，前驱结点到当前结点所需时间，取最大值。</strong><br>    <strong>结束节点（10）的最早发生时间和最迟发生时间相同。</strong></p><p><strong>2.最迟发生时间：从后往前，后继结点的最迟发生时间-边权值，取最小值。</strong></p><table><thead><tr><th align="left">事件</th><th align="center">1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td align="left">最早发生时间</td><td align="center">0</td><td>5</td><td>6</td><td>12</td><td>15</td><td>16</td><td>17</td><td>19</td><td>22</td><td>24</td></tr><tr><td align="left">最晚发生时间</td><td align="center">0</td><td>9</td><td>6</td><td>12</td><td>16</td><td>20</td><td>17</td><td>20</td><td>22</td><td>24</td></tr></tbody></table><p><strong>3.关键路径：最早发生时间和最迟发生时间相同的结点即为关键路径上的节点。</strong></p><p>这样我们就可以找到关键路径上的结点，通过关键结点也就可以找到关键活动。但是要记住，关键路径不为一(重要的事情说两遍)</p><p>不难看出，关键路径上的结点为</p><p><img src="https://s2.ax1x.com/2019/11/02/KbIseA.png" alt></p><p><img src="https://s2.ax1x.com/2019/11/02/KbIydI.png" alt></p><p><strong>4.最早开始时间</strong>：等于当前边起始结点的最早发生时间。(Max)</p><p><strong>5.最晚开始时间</strong>：等于当前边指向结点的最迟发生时间-当前边的权值。</p><p><strong>6.最早完工时间</strong>：等于当前边指向结点的最早发生时间。</p><p><strong>7.最晚完工时间</strong>：等于当前边指向结点的最迟发生时间。</p><table><thead><tr><th>活动</th><th>a1</th><th>a2</th><th>a3</th><th>a4</th><th>a5</th><th>a6</th><th>a7</th><th>a8</th><th>a9</th><th>a10</th><th>a11</th><th>a12</th><th>a13</th><th>a14</th></tr></thead><tbody><tr><td>最早开始</td><td>0</td><td>0</td><td>5</td><td>6</td><td>6</td><td>12</td><td>12</td><td>12</td><td>15</td><td>15</td><td>17</td><td>19</td><td>16</td><td>22</td></tr><tr><td>最晚开始</td><td>4</td><td>0</td><td>9</td><td>6</td><td>13</td><td>16</td><td>13</td><td>12</td><td>16</td><td>16</td><td>17</td><td>20</td><td>20</td><td>22</td></tr><tr><td>最早完工</td><td>5</td><td>6</td><td>12</td><td>12</td><td>15</td><td>16</td><td>15</td><td>17</td><td>17</td><td>19</td><td>22</td><td>22</td><td>24</td><td>24</td></tr><tr><td>最晚完工</td><td>9</td><td>6</td><td>12</td><td>12</td><td>16</td><td>20</td><td>16</td><td>17</td><td>17</td><td>20</td><td>22</td><td>22</td><td>24</td><td>24</td></tr></tbody></table><p>还有一种找关键路径的方法，就是先找到关键活动，最早最晚开始时间相减为0的活动为关键活动。也就找到了关键事件。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>后续补上</strong></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> critical-path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补） -7</title>
      <link href="/AngelNI.github.io/DSU/"/>
      <url>/AngelNI.github.io/DSU/</url>
      
        <content type="html"><![CDATA[<p>期待已久的并查集如期到来。<a id="more"></a></p><h1 id="并查集-DSU"><a href="#并查集-DSU" class="headerlink" title="并查集(DSU)"></a>并查集(DSU)</h1><p>并查集的英文是Disjoint Set Union， 因此又称（DSU）。</p><p>并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。简单的来说就是分门别类的问题。</p><p>并查集有两种优化策略：</p><p><strong>1.</strong>按秩合并 Union by Rank</p><p><strong>2.</strong>路径压缩 Path Compression</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>江湖中有许多厉害的大侠，他们相互争斗，争个江湖第一，但是这些大侠又有许多的朋友徒弟等熟人，他们见了面不能打架，好了问题来，江湖中有很多大侠，我们该如何区分敌人和朋友呢？</p><p>其实这是一个并查集的问题，将朋友徒弟等熟人归为一个门派（这里其实是集合），如果他们属于一个门派，那么他们就不能打架，否则是敌人，要打架的。</p><p><img src="https://s2.ax1x.com/2019/10/30/K4aWG9.png" alt></p><p>并查集有两个关键的函数，分别的Find（）和Join（）函数</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//find函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> r = x;</span><br><span class="line"><span class="hljs-keyword">while</span>(pre[r]!=r)</span><br><span class="line">r = pre[r];</span><br><span class="line"><span class="hljs-keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//join函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> fx = find(x),fy = find(y);</span><br><span class="line"><span class="hljs-keyword">if</span>(x!=fy)</span><br><span class="line">pre[fx] = fy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是并查集的核心代码。</p><h3 id="HDU1232"><a href="#HDU1232" class="headerlink" title="HDU1232"></a>HDU1232</h3><p>好了来一到并查集的经典题练练手。</p><p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ </p><p><strong>Input</strong></p><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。 </p><p><strong>Output</strong></p><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。 </p><p><strong>Sample Input</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 3</span><br><span class="line">4 3</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">5 2</span><br><span class="line">1 2</span><br><span class="line">3 5</span><br><span class="line">999 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">998</span><br></pre></td></tr></table></figure><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p>这里有一个问题，想没想过数据量非常大，如果按照上述代码，所有的集合会变成一字长蛇，这就是按秩合并，但这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。</p><p><img src="https://s2.ax1x.com/2019/10/30/K4BFiD.png" alt></p><p>好了上代码</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*路径压缩是对find()函数的优化*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(pre[x] == x)</span><br><span class="line"><span class="hljs-keyword">return</span> x;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-keyword">return</span> pre[x] = find(pre[x]);</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> fx = find(x),fy = find(y);</span><br><span class="line"><span class="hljs-keyword">if</span>(x!=fy)</span><br><span class="line">pre[fx] = fy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DSU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现贪吃蛇小游戏</title>
      <link href="/AngelNI.github.io/snake-game/"/>
      <url>/AngelNI.github.io/snake-game/</url>
      
        <content type="html"><![CDATA[<p>一起来玩游戏？<a id="more"></a></p><h1 id="python实现贪吃蛇小游戏"><a href="#python实现贪吃蛇小游戏" class="headerlink" title="python实现贪吃蛇小游戏"></a>python实现贪吃蛇小游戏</h1><p>先来看看这个小游戏</p><p><img src="https://s2.ax1x.com/2019/10/28/KcGho8.gif" alt></p><p>没错这就是强大的python，实现所有不可能。</p><p>先前，有了解到用人工智能训练贪吃蛇，没错就是snake，可以达到很高的分数，并且损失函数随训练次数的增加，逐渐降低，贪吃蛇能够更准确的吃到食物，简直太神奇了。</p><p>最近学习了DFS，BFS，这两个搜索图的算法，完全可以用这两个基础算法来实现人工智能的贪吃蛇，A*也可以。算法的主要思路就是通过获取蛇的头部和食物的位置，在避免碰到自己和边缘的前提下进行路径规划。好了就说到这。</p><p>下面给出这个贪吃蛇的代码，不是AI-snake哦。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> pygame</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"><span class="hljs-keyword">import</span> math</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">pygame.display.set_caption(<span class="hljs-string">"$nAke bRo color fUll--FASAL "</span>)</span><br><span class="line">pygame.font.init()</span><br><span class="line">random.seed()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#global</span></span><br><span class="line">SPEED = <span class="hljs-number">0.36</span></span><br><span class="line">SNAKE_SIZE = <span class="hljs-number">9</span></span><br><span class="line">APPLE_SIZE = SNAKE_SIZE</span><br><span class="line">SEPARATION = <span class="hljs-number">10</span></span><br><span class="line">SCREEN_HEIGHT = <span class="hljs-number">600</span></span><br><span class="line">SCREEN_WIDTH = <span class="hljs-number">800</span></span><br><span class="line">FPS = <span class="hljs-number">25</span></span><br><span class="line">KEY = &#123;<span class="hljs-string">"UP"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"DOWN"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"LEFT"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"RIGHT"</span>:<span class="hljs-number">4</span>&#125;</span><br><span class="line"><span class="hljs-comment">#Screen initialization</span></span><br><span class="line">screen = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT),pygame.HWSURFACE)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Resources</span></span><br><span class="line">score_font = pygame.font.Font(<span class="hljs-literal">None</span>,<span class="hljs-number">38</span>)</span><br><span class="line">score_numb_font = pygame.font.Font(<span class="hljs-literal">None</span>,<span class="hljs-number">28</span>)</span><br><span class="line">game_over_font = pygame.font.Font(<span class="hljs-literal">None</span>,<span class="hljs-number">46</span>)</span><br><span class="line">play_again_font = score_numb_font</span><br><span class="line">score_msg = score_font.render(<span class="hljs-string">"Score:"</span>,<span class="hljs-number">1</span>,pygame.Color(<span class="hljs-string">"red"</span>))</span><br><span class="line">score_msg_size = score_font.size(<span class="hljs-string">"Score"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#pygame coloration for aqua</span></span><br><span class="line">background_color = pygame.Color(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>)</span><br><span class="line">black = pygame.Color(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Clock</span></span><br><span class="line">gameClock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkCollision</span><span class="hljs-params">(posA,As,posB,Bs)</span>:</span></span><br><span class="line">    <span class="hljs-comment">#As size of a | Bs size of B</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(posA.x   &lt; posB.x+Bs <span class="hljs-keyword">and</span> posA.x+As &gt; posB.x <span class="hljs-keyword">and</span> posA.y &lt; posB.y + Bs <span class="hljs-keyword">and</span> posA.y+As &gt; posB.y):</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkLimits</span><span class="hljs-params">(entity)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(entity.x &gt; SCREEN_WIDTH):</span><br><span class="line">        entity.x = SNAKE_SIZE</span><br><span class="line">    <span class="hljs-keyword">if</span>(entity.x &lt; <span class="hljs-number">0</span>):</span><br><span class="line">        entity.x = SCREEN_WIDTH - SNAKE_SIZE</span><br><span class="line">    <span class="hljs-keyword">if</span>(entity.y &gt; SCREEN_HEIGHT):</span><br><span class="line">        entity.y = SNAKE_SIZE</span><br><span class="line">    <span class="hljs-keyword">if</span>(entity.y &lt; <span class="hljs-number">0</span>):</span><br><span class="line">        entity.y = SCREEN_HEIGHT - SNAKE_SIZE</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,x,y,state)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.state = state</span><br><span class="line">        self.color = pygame.color.Color(<span class="hljs-string">"red"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span><span class="hljs-params">(self,screen)</span>:</span></span><br><span class="line">        pygame.draw.rect(screen,self.color,(self.x,self.y,APPLE_SIZE,APPLE_SIZE),<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Segment</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,x,y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.direction = KEY[<span class="hljs-string">"UP"</span>]</span><br><span class="line">        self.color = <span class="hljs-string">"red"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Snake</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,x,y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.direction = KEY[<span class="hljs-string">"UP"</span>]</span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">        self.stack.append(self)</span><br><span class="line"></span><br><span class="line">        blackBox = Segment(self.x,self.y + SEPARATION)</span><br><span class="line">        blackBox.direction = KEY[<span class="hljs-string">"UP"</span>]</span><br><span class="line">        blackBox.color = <span class="hljs-string">"NULL"</span></span><br><span class="line">        self.stack.append(blackBox)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        last_element = len(self.stack)<span class="hljs-number">-1</span></span><br><span class="line">        <span class="hljs-keyword">while</span>(last_element != <span class="hljs-number">0</span>):</span><br><span class="line">            self.stack[last_element].direction = self.stack[last_element<span class="hljs-number">-1</span>].direction</span><br><span class="line">            self.stack[last_element].x = self.stack[last_element<span class="hljs-number">-1</span>].x</span><br><span class="line">            self.stack[last_element].y = self.stack[last_element<span class="hljs-number">-1</span>].y</span><br><span class="line">            last_element-=<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(len(self.stack)&lt;<span class="hljs-number">2</span>):</span><br><span class="line">            last_segment = self</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            last_segment = self.stack.pop(last_element)</span><br><span class="line">        last_segment.direction = self.stack[<span class="hljs-number">0</span>].direction</span><br><span class="line">        <span class="hljs-keyword">if</span>(self.stack[<span class="hljs-number">0</span>].direction ==KEY[<span class="hljs-string">"UP"</span>]):</span><br><span class="line">            last_segment.y = self.stack[<span class="hljs-number">0</span>].y - (SPEED * FPS)</span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.stack[<span class="hljs-number">0</span>].direction == KEY[<span class="hljs-string">"DOWN"</span>]):</span><br><span class="line">            last_segment.y = self.stack[<span class="hljs-number">0</span>].y + (SPEED * FPS)</span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.stack[<span class="hljs-number">0</span>].direction ==KEY[<span class="hljs-string">"LEFT"</span>]):</span><br><span class="line">            last_segment.x = self.stack[<span class="hljs-number">0</span>].x - (SPEED * FPS)</span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.stack[<span class="hljs-number">0</span>].direction == KEY[<span class="hljs-string">"RIGHT"</span>]):</span><br><span class="line">            last_segment.x = self.stack[<span class="hljs-number">0</span>].x + (SPEED * FPS)</span><br><span class="line">        self.stack.insert(<span class="hljs-number">0</span>,last_segment)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHead</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span>(self.stack[<span class="hljs-number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grow</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        last_element = len(self.stack)<span class="hljs-number">-1</span></span><br><span class="line">        self.stack[last_element].direction = self.stack[last_element].direction</span><br><span class="line">        <span class="hljs-keyword">if</span>(self.stack[last_element].direction == KEY[<span class="hljs-string">"UP"</span>]):</span><br><span class="line">            newSegment = Segment(self.stack[last_element].x,self.stack[last_element].y-SNAKE_SIZE)</span><br><span class="line">            blackBox = Segment(newSegment.x,newSegment.y-SEPARATION)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.stack[last_element].direction == KEY[<span class="hljs-string">"DOWN"</span>]):</span><br><span class="line">            newSegment = Segment(self.stack[last_element].x,self.stack[last_element].y+SNAKE_SIZE)</span><br><span class="line">            blackBox = Segment(newSegment.x,newSegment.y+SEPARATION)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.stack[last_element].direction == KEY[<span class="hljs-string">"LEFT"</span>]):</span><br><span class="line">            newSegment = Segment(self.stack[last_element].x-SNAKE_SIZE,self.stack[last_element].y)</span><br><span class="line">            blackBox = Segment(newSegment.x-SEPARATION,newSegment.y)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.stack[last_element].direction == KEY[<span class="hljs-string">"RIGHT"</span>]):</span><br><span class="line">            newSegment = Segment(self.stack[last_element].x+SNAKE_SIZE,self.stack[last_element].y)</span><br><span class="line">            blackBox = Segment(newSegment.x+SEPARATION,newSegment.y)</span><br><span class="line"></span><br><span class="line">        blackBox.color = <span class="hljs-string">"NULL"</span></span><br><span class="line">        self.stack.append(newSegment)</span><br><span class="line">        self.stack.append(blackBox)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">iterateSegments</span><span class="hljs-params">(self,delta)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setDirection</span><span class="hljs-params">(self,direction)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(self.direction == KEY[<span class="hljs-string">"RIGHT"</span>] <span class="hljs-keyword">and</span> direction == KEY[<span class="hljs-string">"LEFT"</span>] <span class="hljs-keyword">or</span> self.direction == KEY[<span class="hljs-string">"LEFT"</span>] <span class="hljs-keyword">and</span> direction == KEY[<span class="hljs-string">"RIGHT"</span>]):</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">        <span class="hljs-keyword">elif</span>(self.direction == KEY[<span class="hljs-string">"UP"</span>] <span class="hljs-keyword">and</span> direction == KEY[<span class="hljs-string">"DOWN"</span>] <span class="hljs-keyword">or</span> self.direction == KEY[<span class="hljs-string">"DOWN"</span>] <span class="hljs-keyword">and</span> direction == KEY[<span class="hljs-string">"UP"</span>]):</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            self.direction = direction</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_rect</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        rect = (self.x,self.y)</span><br><span class="line">        <span class="hljs-keyword">return</span> rect</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getX</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getY</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.y</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setX</span><span class="hljs-params">(self,x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setY</span><span class="hljs-params">(self,y)</span>:</span></span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkCrash</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        counter = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span>(counter &lt; len(self.stack)<span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span>(checkCollision(self.stack[<span class="hljs-number">0</span>],SNAKE_SIZE,self.stack[counter],SNAKE_SIZE)<span class="hljs-keyword">and</span> self.stack[counter].color != <span class="hljs-string">"NULL"</span>):</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br><span class="line">            counter+=<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span><span class="hljs-params">(self,screen)</span>:</span></span><br><span class="line">        pygame.draw.rect(screen,pygame.color.Color(<span class="hljs-string">"yellow"</span>),(self.stack[<span class="hljs-number">0</span>].x,self.stack[<span class="hljs-number">0</span>].y,SNAKE_SIZE,SNAKE_SIZE),<span class="hljs-number">0</span>)</span><br><span class="line">        counter = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span>(counter &lt; len(self.stack)):</span><br><span class="line">            <span class="hljs-keyword">if</span>(self.stack[counter].color == <span class="hljs-string">"NULL"</span>):</span><br><span class="line">                counter+=<span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            pygame.draw.rect(screen,pygame.color.Color(<span class="hljs-string">"white"</span>),(self.stack[counter].x,self.stack[counter].y,SNAKE_SIZE,SNAKE_SIZE),<span class="hljs-number">0</span>)</span><br><span class="line">            counter+=<span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getKey</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="hljs-keyword">if</span> event.type == pygame.KEYDOWN:</span><br><span class="line">                <span class="hljs-keyword">if</span> event.key == pygame.K_UP:</span><br><span class="line">                    <span class="hljs-keyword">return</span> KEY[<span class="hljs-string">"UP"</span>]</span><br><span class="line">                <span class="hljs-keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                    <span class="hljs-keyword">return</span> KEY[<span class="hljs-string">"DOWN"</span>]</span><br><span class="line">                <span class="hljs-keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">                    <span class="hljs-keyword">return</span> KEY[<span class="hljs-string">"LEFT"</span>]</span><br><span class="line">                <span class="hljs-keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                    <span class="hljs-keyword">return</span> KEY[<span class="hljs-string">"RIGHT"</span>]</span><br><span class="line">                <span class="hljs-keyword">elif</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-string">"exit"</span></span><br><span class="line">                <span class="hljs-keyword">elif</span> event.key == pygame.K_y:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-string">"yes"</span></span><br><span class="line">                <span class="hljs-keyword">elif</span> event.key == pygame.K_n:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-string">"no"</span></span><br><span class="line">            <span class="hljs-keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">respawnApple</span><span class="hljs-params">(apples,index,sx,sy)</span>:</span></span><br><span class="line">    radius = math.sqrt((SCREEN_WIDTH/<span class="hljs-number">2</span>*SCREEN_WIDTH/<span class="hljs-number">2</span>  + SCREEN_HEIGHT/<span class="hljs-number">2</span>*SCREEN_HEIGHT/<span class="hljs-number">2</span>))/<span class="hljs-number">2</span></span><br><span class="line">    angle = <span class="hljs-number">999</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(angle &gt; radius):</span><br><span class="line">        angle = random.uniform(<span class="hljs-number">0</span>,<span class="hljs-number">800</span>)*math.pi*<span class="hljs-number">2</span></span><br><span class="line">        x = SCREEN_WIDTH/<span class="hljs-number">2</span> + radius * math.cos(angle)</span><br><span class="line">        y = SCREEN_HEIGHT/<span class="hljs-number">2</span> + radius * math.sin(angle)</span><br><span class="line">        <span class="hljs-keyword">if</span>(x == sx <span class="hljs-keyword">and</span> y == sy):</span><br><span class="line">            <span class="hljs-keyword">continue</span></span><br><span class="line">    newApple = Apple(x,y,<span class="hljs-number">1</span>)</span><br><span class="line">    apples[index] = newApple</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">respawnApples</span><span class="hljs-params">(apples,quantity,sx,sy)</span>:</span></span><br><span class="line">    counter = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">del</span> apples[:]</span><br><span class="line">    radius = math.sqrt((SCREEN_WIDTH/<span class="hljs-number">2</span>*SCREEN_WIDTH/<span class="hljs-number">2</span>  + SCREEN_HEIGHT/<span class="hljs-number">2</span>*SCREEN_HEIGHT/<span class="hljs-number">2</span>))/<span class="hljs-number">2</span></span><br><span class="line">    angle = <span class="hljs-number">999</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(counter &lt; quantity):</span><br><span class="line">        <span class="hljs-keyword">while</span>(angle &gt; radius):</span><br><span class="line">            angle = random.uniform(<span class="hljs-number">0</span>,<span class="hljs-number">800</span>)*math.pi*<span class="hljs-number">2</span></span><br><span class="line">            x = SCREEN_WIDTH/<span class="hljs-number">2</span> + radius * math.cos(angle)</span><br><span class="line">            y = SCREEN_HEIGHT/<span class="hljs-number">2</span> + radius * math.sin(angle)</span><br><span class="line">            <span class="hljs-keyword">if</span>( (x-APPLE_SIZE == sx <span class="hljs-keyword">or</span> x+APPLE_SIZE == sx) <span class="hljs-keyword">and</span> (y-APPLE_SIZE == sy <span class="hljs-keyword">or</span> y+APPLE_SIZE == sy) <span class="hljs-keyword">or</span> radius - angle &lt;= <span class="hljs-number">10</span>):</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">        apples.append(Apple(x,y,<span class="hljs-number">1</span>))</span><br><span class="line">        angle = <span class="hljs-number">999</span></span><br><span class="line">        counter+=<span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">endGame</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    message = game_over_font.render(<span class="hljs-string">"Game Over"</span>,<span class="hljs-number">1</span>,pygame.Color(<span class="hljs-string">"white"</span>))</span><br><span class="line">    message_play_again = play_again_font.render(<span class="hljs-string">"Play Again? Y/N"</span>,<span class="hljs-number">1</span>,pygame.Color(<span class="hljs-string">"green"</span>))</span><br><span class="line">    screen.blit(message,(<span class="hljs-number">320</span>,<span class="hljs-number">240</span>))</span><br><span class="line">    screen.blit(message_play_again,(<span class="hljs-number">320</span>+<span class="hljs-number">12</span>,<span class="hljs-number">240</span>+<span class="hljs-number">40</span>))</span><br><span class="line"></span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    pygame.display.update()</span><br><span class="line"></span><br><span class="line">    myKey = getKey()</span><br><span class="line">    <span class="hljs-keyword">while</span>(myKey != <span class="hljs-string">"exit"</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span>(myKey == <span class="hljs-string">"yes"</span>):</span><br><span class="line">            main()</span><br><span class="line">        <span class="hljs-keyword">elif</span>(myKey == <span class="hljs-string">"no"</span>):</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        myKey = getKey()</span><br><span class="line">        gameClock.tick(FPS)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawScore</span><span class="hljs-params">(score)</span>:</span></span><br><span class="line">    score_numb = score_numb_font.render(str(score),<span class="hljs-number">1</span>,pygame.Color(<span class="hljs-string">"red"</span>))</span><br><span class="line">    screen.blit(score_msg, (SCREEN_WIDTH-score_msg_size[<span class="hljs-number">0</span>]<span class="hljs-number">-60</span>,<span class="hljs-number">10</span>) )</span><br><span class="line">    screen.blit(score_numb,(SCREEN_WIDTH - <span class="hljs-number">45</span>,<span class="hljs-number">14</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawGameTime</span><span class="hljs-params">(gameTime)</span>:</span></span><br><span class="line">    game_time = score_font.render(<span class="hljs-string">"Time:"</span>,<span class="hljs-number">1</span>,pygame.Color(<span class="hljs-string">"red"</span>))</span><br><span class="line">    game_time_numb = score_numb_font.render(str(gameTime/<span class="hljs-number">1000</span>),<span class="hljs-number">1</span>,pygame.Color(<span class="hljs-string">"red"</span>))</span><br><span class="line">    screen.blit(game_time,(<span class="hljs-number">30</span>,<span class="hljs-number">10</span>))</span><br><span class="line">    screen.blit(game_time_numb,(<span class="hljs-number">105</span>,<span class="hljs-number">14</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exitScreen</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    score = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#Snake initialization</span></span><br><span class="line">    mySnake = Snake(SCREEN_WIDTH/<span class="hljs-number">2</span>,SCREEN_HEIGHT/<span class="hljs-number">2</span>)</span><br><span class="line">    mySnake.setDirection(KEY[<span class="hljs-string">"UP"</span>])</span><br><span class="line">    mySnake.move()</span><br><span class="line">    start_segments=<span class="hljs-number">3</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(start_segments&gt;<span class="hljs-number">0</span>):</span><br><span class="line">        mySnake.grow()</span><br><span class="line">        mySnake.move()</span><br><span class="line">        start_segments-=<span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#Apples</span></span><br><span class="line">    max_apples = <span class="hljs-number">1</span></span><br><span class="line">    eaten_apple = <span class="hljs-literal">False</span></span><br><span class="line">    apples = [Apple(random.randint(<span class="hljs-number">60</span>,SCREEN_WIDTH),random.randint(<span class="hljs-number">60</span>,SCREEN_HEIGHT),<span class="hljs-number">1</span>)]</span><br><span class="line">    respawnApples(apples,max_apples,mySnake.x,mySnake.y)</span><br><span class="line"></span><br><span class="line">    startTime = pygame.time.get_ticks()</span><br><span class="line">    endgame = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span>(endgame!=<span class="hljs-number">1</span>):</span><br><span class="line">        gameClock.tick(FPS)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#Input</span></span><br><span class="line">        keyPress = getKey()</span><br><span class="line">        <span class="hljs-keyword">if</span> keyPress == <span class="hljs-string">"exit"</span>:</span><br><span class="line">            endgame = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#Collision check</span></span><br><span class="line">        checkLimits(mySnake)</span><br><span class="line">        <span class="hljs-keyword">if</span>(mySnake.checkCrash()== <span class="hljs-literal">True</span>):</span><br><span class="line">            endGame()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> myApple <span class="hljs-keyword">in</span> apples:</span><br><span class="line">            <span class="hljs-keyword">if</span>(myApple.state == <span class="hljs-number">1</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span>(checkCollision(mySnake.getHead(),SNAKE_SIZE,myApple,APPLE_SIZE)==<span class="hljs-literal">True</span>):</span><br><span class="line">                    mySnake.grow()</span><br><span class="line">                    myApple.state = <span class="hljs-number">0</span></span><br><span class="line">                    score+=<span class="hljs-number">5</span></span><br><span class="line">                    eaten_apple=<span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#Position Update</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(keyPress):</span><br><span class="line">            mySnake.setDirection(keyPress)</span><br><span class="line">        mySnake.move()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#Respawning apples</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(eaten_apple == <span class="hljs-literal">True</span>):</span><br><span class="line">            eaten_apple = <span class="hljs-literal">False</span></span><br><span class="line">            respawnApple(apples,<span class="hljs-number">0</span>,mySnake.getHead().x,mySnake.getHead().y)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">#Drawing</span></span><br><span class="line">        screen.fill(background_color)</span><br><span class="line">        <span class="hljs-keyword">for</span> myApple <span class="hljs-keyword">in</span> apples:</span><br><span class="line">            <span class="hljs-keyword">if</span>(myApple.state == <span class="hljs-number">1</span>):</span><br><span class="line">                myApple.draw(screen)</span><br><span class="line"></span><br><span class="line">        mySnake.draw(screen)</span><br><span class="line">        drawScore(score)</span><br><span class="line">        gameTime = pygame.time.get_ticks() - startTime</span><br><span class="line">        drawGameTime(gameTime)</span><br><span class="line"></span><br><span class="line">        pygame.display.flip()</span><br><span class="line">        pygame.display.update()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snake_game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路问题</title>
      <link href="/AngelNI.github.io/minpath/"/>
      <url>/AngelNI.github.io/minpath/</url>
      
        <content type="html"><![CDATA[<p>过去我也有美梦来着，有幻想来着，可不知神魔时候，都烟消云散了，还是遇见你之前的事。<a id="more"></a></p><h1 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h1><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><p>Floyd算法又称为插点法，是一种利用动态规划的思想寻找给定的加权图中多源点之间最短路径的算法。</p><p>Floyd算法理解起来最简单。</p><p>Floyd算法自我感觉是暴力+贪心的算法，把每一种可能都遍历一遍，在加上动态规划状态转移，把每一种遍历的结果与当前结果比较，如果遍历结果距离小于目前结果，则前一状态转移到的这一状态。</p><p>简单的说，如果  I 经过  K  到  J   的距离 小于 I  直接到  J  的 距离 ， 则I 到J 的距离 为 I 经过  K  到  J   的距离 。</p><p><strong>例如</strong>：有如下有向图，利用Floyd算法，给出每一对顶点之间的最短路径及其路径长度求解过程中的变化。</p><p><img src="https://s2.ax1x.com/2019/10/26/KDZDw6.png" alt></p><p>闲来无聊，就做个GIF图片。</p><p>第一步：0行0列不变，依次填入表格。</p><p>第二步：遍历其余表格，十字交叉，看两个值相加是否小于当前值，小于则填入，否则，不变。直到遍历所有表格。</p><p>第三步：将更新后表格的1行1列不变依次填入，重复步骤二。</p><p>直到N行N列</p><p>结束</p><p>就拿动态图中的蓝色5，根据十字交叉，与红色分别相交于1和3 ，1+3=4&lt;5,所以更新列表，将4填入。</p><p><img src="https://s2.ax1x.com/2019/10/26/KDZtW4.gif" alt></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码之前先看几道简单的OJ题</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544" target="_blank" rel="noopener">hdu最短路</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1874" target="_blank" rel="noopener">hdu畅通工程续</a></p><p><a href="http://hihocoder.com/problemset/problem/1089" target="_blank" rel="noopener">Floyd最短路</a></p><p>只要稍微改下输入输出就可以AC。</p><p>以上是三道水题，水水更开心。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"><span class="hljs-keyword">int</span> mp[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n&amp;&amp;m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i!=j)</span><br><span class="line">mp[i][j] = <span class="hljs-number">1e9</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">mp[i][j] = <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b,c;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="hljs-keyword">if</span>(mp[a][b]&gt;c)</span><br><span class="line">&#123;</span><br><span class="line">mp[a][b] = c;</span><br><span class="line">mp[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k =<span class="hljs-number">1</span>;k&lt;=n;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(mp[i][k]+mp[k][j]&lt;mp[i][j])</span><br><span class="line">&#123;</span><br><span class="line">mp[i][j] = mp[i][k]+mp[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;mp[i][j]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dijstra算法"><a href="#Dijstra算法" class="headerlink" title="Dijstra算法"></a>Dijstra算法</h1><p>迪杰斯特拉算法(Dijkstra)是由荷兰计算机科学家狄克斯特拉于1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。【来自百度百科】</p><p>Dijkstra算法虽然好，但是并不能解决负权问题，更准确的说是判断有没有负权的存在。</p><p>这个代码在学离散的时候，手动实现过，考试也考过，只是代码没写过，~纠结。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544" target="_blank" rel="noopener">hdu最短路</a></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],dis[<span class="hljs-number">105</span>],vis[<span class="hljs-number">105</span>];     <span class="hljs-comment">//map存地图，dis存源点到当前点的距离，vis存访问状态 </span></span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span> </span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i,j,k;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i]=<span class="hljs-built_in">map</span>[start][i];      <span class="hljs-comment">//对dis进行初始化 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">    vis[i]=<span class="hljs-number">0</span>;            <span class="hljs-comment">//0表示没有被访问，1表示被访问 </span></span><br><span class="line">    vis[start]=<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)   <span class="hljs-comment">//因为最多访问n-1个点，所以循环n-1次 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> mix=inf;</span><br><span class="line">        <span class="hljs-keyword">int</span> u;</span><br><span class="line">        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(vis[j]==<span class="hljs-number">0</span> &amp;&amp; mix&gt;dis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                mix=dis[j];          <span class="hljs-comment">//记录下距离源点最近的点，并且没有被访问 </span></span><br><span class="line">                u=j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u]=<span class="hljs-number">1</span>;      <span class="hljs-comment">//标记为已经被访问 </span></span><br><span class="line">        <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=n;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(vis[k]==<span class="hljs-number">0</span> &amp;&amp; dis[k]&gt;dis[u]+<span class="hljs-built_in">map</span>[u][k])</span><br><span class="line">            dis[k]=dis[u]+<span class="hljs-built_in">map</span>[u][k];            <span class="hljs-comment">//以该点为跳板，对所有点进行松弛 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i,j,k;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; n || m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(i==j)</span><br><span class="line">            <span class="hljs-built_in">map</span>[i][j]=<span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-built_in">map</span>[i][j]=inf;     <span class="hljs-comment">//初始化 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> x,y,z;</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[x][y]&gt;z)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">map</span>[x][y]=<span class="hljs-built_in">map</span>[y][x]=z;     <span class="hljs-comment">//无向图 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(<span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;dis[n]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Max 1e9</span></span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"><span class="hljs-keyword">int</span> mp[<span class="hljs-number">10005</span>][<span class="hljs-number">10005</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> dis[<span class="hljs-number">10005</span>],visit[<span class="hljs-number">10005</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)<span class="hljs-comment">//n条边 m个顶点 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][i] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;i;++j)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][j] = mp[j][i] = Max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b,c;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="hljs-keyword">if</span>(mp[a][b]&gt;c)</span><br><span class="line">mp[a][b] = mp[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = mp[<span class="hljs-number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">memset</span>(visit,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(visit));</span><br><span class="line"><span class="hljs-keyword">int</span> Min,k;</span><br><span class="line">visit[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">Min = Max;</span><br><span class="line">k = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(visit[j]==<span class="hljs-number">0</span>&amp;&amp;Min&gt;dis[j])</span><br><span class="line">&#123;</span><br><span class="line">Min = dis[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">visit[k] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(visit[j]==<span class="hljs-number">0</span>&amp;&amp;dis[j]&gt;dis[k]+mp[k][j])</span><br><span class="line">dis[j] = dis[k] + mp[k][j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;dis[m]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="Bellman-Fod算法"><a href="#Bellman-Fod算法" class="headerlink" title="Bellman_Fod算法"></a>Bellman_Fod算法</h1><p>贝尔曼-福特算法（英语：Bellman–Ford algorithm），求解单源最短路径问题的一种算法，由理查德·贝尔曼（Richard Bellman） 和 莱斯特·福特 创立的。有时候这种算法也被称为 Moore-Bellman-Ford 算法，因为 Edward F. Moore 也为这个算法的发展做出了贡献。它的原理是对图进行次松弛操作，得到所有可能的最短路径。其优于迪科斯彻算法的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达。但算法可以进行若干种优化，提高了效率。</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544" target="_blank" rel="noopener">hdu最短路</a></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 0x3f3f3f3f  </span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> max 10000  </span></span><br><span class="line"><span class="hljs-keyword">int</span> u[<span class="hljs-number">2</span>*max+<span class="hljs-number">10</span>],v[<span class="hljs-number">2</span>*max+<span class="hljs-number">10</span>],w[<span class="hljs-number">2</span>*max+<span class="hljs-number">10</span>],dis[<span class="hljs-number">105</span>];  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">//u存起点，v存终点，w存权值，dis和迪杰一样，由于是无向图，所以要 *2</span></span><br><span class="line">    <span class="hljs-keyword">int</span> n,m,i,j,k;  </span><br><span class="line">    <span class="hljs-keyword">int</span> x,y,z;  </span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp; n || m) &#123;  </span><br><span class="line">        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">2</span>*m; i++) &#123;  </span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;  </span><br><span class="line">            u[i]=x;  </span><br><span class="line">            v[i]=y;  </span><br><span class="line">            w[i]=z;  </span><br><span class="line">            j=i+<span class="hljs-number">1</span>;       <span class="hljs-comment">//构造无向图  </span></span><br><span class="line">            u[j]=y;  </span><br><span class="line">            v[j]=x;  </span><br><span class="line">            w[j]=z;  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)  </span><br><span class="line">            dis[i]=inf;  </span><br><span class="line">        dis[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;     <span class="hljs-comment">//将起点设置为零，这样可以保证从起点开始松弛  </span></span><br><span class="line">        <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>; k&lt;=n<span class="hljs-number">-1</span>; k++) &#123; <span class="hljs-comment">//最多循环n-1次  </span></span><br><span class="line">            <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">2</span>*m; i++) &#123;  </span><br><span class="line">                <span class="hljs-keyword">if</span>(dis[v[i]]&gt;dis[u[i]]+w[i])  </span><br><span class="line">                    dis[v[i]]=dis[u[i]]+w[i];     <span class="hljs-comment">//对所有的边进行松弛操作  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">2</span>*m; i++) &#123;  </span><br><span class="line">            <span class="hljs-keyword">if</span>(dis[v[i]]&gt;dis[u[i]]+w[i])  </span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;             <span class="hljs-comment">//这里检测有没有负权，不过本题用不到   </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;dis[n]&lt;&lt;<span class="hljs-built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; v[<span class="hljs-number">20000005</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> dis[<span class="hljs-number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n , m,x,y,w;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10005</span>;++i)</span><br><span class="line">dis[i] = <span class="hljs-number">1e9</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">v[i].push_back(x);</span><br><span class="line">v[i].push_back(y);</span><br><span class="line">v[i].push_back(w);</span><br><span class="line">&#125;</span><br><span class="line">dis[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(dis[v[j][<span class="hljs-number">0</span>]]+v[j][<span class="hljs-number">2</span>]&lt;dis[v[j][<span class="hljs-number">1</span>]])</span><br><span class="line">&#123;</span><br><span class="line">dis[v[j][<span class="hljs-number">1</span>]] = dis[v[j][<span class="hljs-number">0</span>]]+v[j][<span class="hljs-number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> min_path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补）-6</title>
      <link href="/AngelNI.github.io/priority-queue/"/>
      <url>/AngelNI.github.io/priority-queue/</url>
      
        <content type="html"><![CDATA[<p>非常希望在不远的明天，我的晚安可以亲口说，可以先亲一口再说。<a id="more"></a></p><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><p>优先队列是什么呢？优先队列其实是一种特殊的队列，对队列的元素按照一定的先后顺序，队列自动排序，这就是优先队列。</p><p>话不多说直接上代码。</p><h2 id="int-，double等"><a href="#int-，double等" class="headerlink" title="int ，double等"></a>int ，double等</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="hljs-keyword">int</span> &gt; q;</span><br><span class="line">q.push(<span class="hljs-number">4</span>);</span><br><span class="line">q.push(<span class="hljs-number">10</span>);</span><br><span class="line">q.push(<span class="hljs-number">6</span>);</span><br><span class="line">q.push(<span class="hljs-number">1</span>);</span><br><span class="line">q.push(<span class="hljs-number">15</span>);</span><br><span class="line"><span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a = q.top();</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 结果为   15 10 6 4 1</span></span><br></pre></td></tr></table></figure><p>我们发现对int的类型的数据默认从大到小排序，如果从小到大呢？这就需要我们重新定义优先队列的优先顺序，好像叫重载运算符。</p><p>好，我们现在开始重载”&lt;”小于运算符。运用结构体重载。</p><p><strong>输入</strong> ： 5 4 3 2 1</p><p><strong>输出</strong> ：1 2 3 4 5 </p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> x;</span><br><span class="line"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (node a,node b)<span class="hljs-comment">//friend 友元函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a.x &gt; b.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">priority_queue&lt;node&gt; p;</span><br><span class="line">node a;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">5</span>;i&gt;=<span class="hljs-number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">a.x =i;</span><br><span class="line">p.push(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(!p.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> y = p.top().x;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">p.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是优先队列对int的类型的队列优先级重载。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>如果对数组使用优先队列就比较简单了。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="hljs-keyword">int</span> ,<span class="hljs-built_in">vector</span>&lt; <span class="hljs-keyword">int</span>  &gt; , less&lt; <span class="hljs-keyword">int</span> &gt; &gt;  m;</span><br><span class="line">priority_queue&lt; <span class="hljs-keyword">int</span> ,<span class="hljs-built_in">vector</span>&lt; <span class="hljs-keyword">int</span> &gt; , greater&lt; <span class="hljs-keyword">int</span> &gt; &gt; n;</span><br></pre></td></tr></table></figure><p>以上就是对数组使用的优先队列，简单吧，就几行代码。</p><p><strong>注意</strong>：这里有一个坑，一定要注意呦。”&gt;&gt;”编译器会把他识别为右移运算符，两个”&gt;”号之间要有空格！！！</p><p>好了，上样例。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">69</span>,<span class="hljs-number">100</span>,<span class="hljs-number">-5</span>&#125;;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="hljs-keyword">int</span> ,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt;,less&lt;<span class="hljs-keyword">int</span> &gt; &gt; n;</span><br><span class="line">priority_queue&lt;<span class="hljs-keyword">int</span> ,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt;,greater&lt;<span class="hljs-keyword">int</span> &gt; &gt; m;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">n.push(a[i]);</span><br><span class="line">m.push(a[i]);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-keyword">while</span>(!n.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;n.top()&lt;&lt;<span class="hljs-string">" "</span>;n.pop();</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(!m.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;m.top()&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">m.pop();</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后不难发现，less&lt; int &gt; 是从大到小排列。greater&lt; int &gt;是从小到大排列。</p><p>我目前就自学这么多，还有许多更高级的用法，后续默默的补上&gt;&gt;&gt;&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> priority_queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用二叉树计算表达式值</title>
      <link href="/AngelNI.github.io/tree-calculate/"/>
      <url>/AngelNI.github.io/tree-calculate/</url>
      
        <content type="html"><![CDATA[<p>有时候，灵感+努力+伙伴的箴言就是成功。<a id="more"></a></p><h1 id="二叉树实现简单表达式求值"><a href="#二叉树实现简单表达式求值" class="headerlink" title="二叉树实现简单表达式求值"></a>二叉树实现简单表达式求值</h1><p>这是我们的数据结构作业，因为之前用双栈实现过（<a href="https://angelni.github.io/AngelNI.github.io/data-structure/">双栈实现计算器</a>），再写起来就轻松多了。二叉树实现表达式求值实际上是一个后序遍历二叉树的过程，根据规则左右根，找到左结点，右结点，和根节点，进行运算就可以了，好了下面就直接上代码了。</p><p><strong>注</strong>：此程序能够实现10以内的加减乘除（结果无所谓），记得要以#结尾哦。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-comment">//定义树节点 </span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">char</span> cha;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">//定义树根 最顶树根 </span></span><br><span class="line">TNode * Tree;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a, <span class="hljs-keyword">char</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i, j;</span><br><span class="line">    <span class="hljs-keyword">char</span> pre[<span class="hljs-number">7</span>][<span class="hljs-number">7</span>] =                        </span><br><span class="line">    &#123;<span class="hljs-comment">//定义运算符之间的优先级</span></span><br><span class="line">        &#123;<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'='</span>,<span class="hljs-string">'0'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'0'</span>,<span class="hljs-string">'&gt;'</span>,<span class="hljs-string">'&gt;'</span>&#125;,</span><br><span class="line">        &#123;<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'&lt;'</span>,<span class="hljs-string">'0'</span>,<span class="hljs-string">'='</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-keyword">switch</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>:</span><br><span class="line">        i = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>:</span><br><span class="line">        i = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>:</span><br><span class="line">        i = <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>:</span><br><span class="line">        i = <span class="hljs-number">3</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'('</span>:</span><br><span class="line">        i = <span class="hljs-number">4</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">')'</span>:</span><br><span class="line">        i = <span class="hljs-number">5</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'#'</span>:</span><br><span class="line">        i = <span class="hljs-number">6</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">switch</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>:</span><br><span class="line">        j = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>:</span><br><span class="line">        j = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>:</span><br><span class="line">        j = <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>:</span><br><span class="line">        j = <span class="hljs-number">3</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'('</span>:</span><br><span class="line">        j = <span class="hljs-number">4</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">')'</span>:</span><br><span class="line">        j = <span class="hljs-number">5</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'#'</span>:</span><br><span class="line">        j = <span class="hljs-number">6</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"表达式要以#结尾！！！\n"</span>);</span><br><span class="line">        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> pre[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//创建树节点 </span></span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">CreatNode</span><span class="hljs-params">(TNode *T,TNode *l,TNode *r,<span class="hljs-keyword">char</span> ch)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">T-&gt;cha = ch;</span><br><span class="line">T-&gt;lchild = l;</span><br><span class="line">T-&gt;rchild = r;</span><br><span class="line"><span class="hljs-keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//读入表达式 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_EXPT</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;TNode *&gt; EXPT;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; OPTR;</span><br><span class="line">OPTR.push(<span class="hljs-string">'#'</span>);</span><br><span class="line"><span class="hljs-keyword">char</span> ch;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;ch;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch!=<span class="hljs-string">'#'</span>||OPTR.top()!=<span class="hljs-string">'#'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">TNode *T ;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">Tree = CreatNode(T,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,ch);</span><br><span class="line">EXPT.push(Tree);</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isdigit</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(OPTR.empty())</span><br><span class="line">OPTR.push(ch);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> top;</span><br><span class="line">top = OPTR.top();</span><br><span class="line"><span class="hljs-keyword">switch</span>(compare(top,ch))</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'&lt;'</span>:</span><br><span class="line">&#123;</span><br><span class="line">OPTR.push(ch);</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;ch;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'&gt;'</span>:</span><br><span class="line">&#123;</span><br><span class="line">TNode * T ,*a,*b;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line"><span class="hljs-keyword">char</span> theta = OPTR.top();OPTR.pop();</span><br><span class="line">b = EXPT.top();EXPT.pop();</span><br><span class="line">a = EXPT.top();EXPT.pop();</span><br><span class="line">Tree = CreatNode(T,a,b,theta);</span><br><span class="line">EXPT.push(Tree);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'='</span>:</span><br><span class="line">&#123;</span><br><span class="line">OPTR.pop();</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;ch;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//计算表达式 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">getvalue</span><span class="hljs-params">(<span class="hljs-keyword">char</span> optr,<span class="hljs-keyword">float</span> a,<span class="hljs-keyword">float</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">float</span> result ;</span><br><span class="line"><span class="hljs-keyword">switch</span>(optr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>:</span><br><span class="line">&#123;</span><br><span class="line">result = (<span class="hljs-keyword">float</span>)a+(<span class="hljs-keyword">float</span>)b;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>:</span><br><span class="line">&#123;</span><br><span class="line">result = (<span class="hljs-keyword">float</span>)a-(<span class="hljs-keyword">float</span>)b;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>:</span><br><span class="line">&#123;</span><br><span class="line">result = (<span class="hljs-keyword">float</span>)a*(<span class="hljs-keyword">float</span>)b;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>:</span><br><span class="line">&#123;</span><br><span class="line">result = (<span class="hljs-keyword">float</span>)a/(<span class="hljs-keyword">float</span>)b;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">(TNode *T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">float</span> lvalue,rvalue;</span><br><span class="line">lvalue = rvalue = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(T-&gt;lchild==<span class="hljs-literal">NULL</span>&amp;&amp;T-&gt;rchild==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> T-&gt;cha - <span class="hljs-string">'0'</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lvalue = (<span class="hljs-keyword">float</span>)calculate(T-&gt;lchild);</span><br><span class="line">rvalue = (<span class="hljs-keyword">float</span>)calculate(T-&gt;rchild);</span><br><span class="line"><span class="hljs-keyword">return</span> getvalue(T-&gt;cha,lvalue,rvalue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">float</span> result;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"请输入表达式并以'#'结尾(例如：7/(5+2)#)："</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">init_EXPT();</span><br><span class="line"></span><br><span class="line">result = calculate(Tree);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary_tree_calculate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼编码</title>
      <link href="/AngelNI.github.io/haffman/"/>
      <url>/AngelNI.github.io/haffman/</url>
      
        <content type="html"><![CDATA[<p>我很笨，又笨又傻。<a id="more"></a></p><h1 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h1><p>数据结构上的代码实现。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> weight;</span><br><span class="line"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> parent,lchild,rchild;</span><br><span class="line">&#125;HTNode,*HuffmanTree;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> **HuffmanCode;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Select</span><span class="hljs-params">(HuffmanTree &amp;HT,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> &amp;s1,<span class="hljs-keyword">int</span> &amp;s2)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (HT[i].parent == <span class="hljs-number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s1=i;    </span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n; i++)        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> ((HT[s1].weight &gt; HT[i].weight) &amp;&amp; (HT[i].parent == <span class="hljs-number">0</span>))        </span><br><span class="line">        &#123;</span><br><span class="line">            s1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> ((HT[i].parent == <span class="hljs-number">0</span>)&amp;&amp;i!=s1)        </span><br><span class="line">        &#123;</span><br><span class="line">            s2 = i;    </span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;n; i++)        </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> ((HT[s2].weight &gt; HT[i].weight) &amp;&amp; (HT[i].parent == <span class="hljs-number">0</span>) &amp;&amp; (i != s1))</span><br><span class="line">        &#123;</span><br><span class="line">            s2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HuffmanCoding</span><span class="hljs-params">(HuffmanTree &amp;HT,HuffmanCode &amp;HC,<span class="hljs-keyword">int</span> *w,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> i,m,s1,s2,start;</span><br><span class="line"> <span class="hljs-keyword">char</span> *cd;</span><br><span class="line"> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, f;</span><br><span class="line"> <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line"> m=<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;</span><br><span class="line"> HT=(HuffmanTree)<span class="hljs-built_in">malloc</span>((m+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(HTNode));</span><br><span class="line"> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">  HT[i].weight=w[i<span class="hljs-number">-1</span>];</span><br><span class="line">  HT[i].parent=<span class="hljs-number">0</span>;</span><br><span class="line">  HT[i].lchild=<span class="hljs-number">0</span>;</span><br><span class="line">  HT[i].rchild=<span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-keyword">for</span>(i=n+<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> HT[i].weight=<span class="hljs-number">0</span>;</span><br><span class="line">  HT[i].parent=<span class="hljs-number">0</span>;</span><br><span class="line">  HT[i].lchild=<span class="hljs-number">0</span>;</span><br><span class="line">  HT[i].rchild=<span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-keyword">for</span> (i=n+<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line"> &#123; </span><br><span class="line">  Select(HT,i<span class="hljs-number">-1</span>,s1,s2);</span><br><span class="line">  HT[s1].parent=i; HT[s2].parent=i;</span><br><span class="line">  HT[i].lchild=s1; HT[i].rchild=s2;</span><br><span class="line">  HT[i].weight=HT[s1].weight+HT[s2].weight;</span><br><span class="line"> &#125;</span><br><span class="line"> cd=(<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>)); </span><br><span class="line"> cd[n<span class="hljs-number">-1</span>]=<span class="hljs-string">'\0'</span>; </span><br><span class="line"> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;++i)</span><br><span class="line"> &#123; </span><br><span class="line"> start=n<span class="hljs-number">-1</span>; </span><br><span class="line"> <span class="hljs-keyword">for</span> (c=i,f=HT[i].parent;f!=<span class="hljs-number">0</span>;c=f,f=HT[f].parent)</span><br><span class="line"> <span class="hljs-keyword">if</span> (HT[f].lchild==c)</span><br><span class="line">cd[--start]=<span class="hljs-string">'0'</span>;</span><br><span class="line"> <span class="hljs-keyword">else</span></span><br><span class="line">cd[--start]=<span class="hljs-string">'1'</span>;</span><br><span class="line">HC[i]=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>((n-start)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));</span><br><span class="line">  <span class="hljs-built_in">strcpy</span>(HC[i],&amp;cd[start]); </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-built_in">free</span>(cd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> i,n;</span><br><span class="line"><span class="hljs-keyword">int</span> *w;</span><br><span class="line">HuffmanTree HT;</span><br><span class="line">HuffmanCode HC;</span><br><span class="line">    <span class="hljs-comment">//汉字编码出了问题。。。。。。。</span></span><br><span class="line"><span class="hljs-comment">//printf("锟斤拷锟斤拷锟斤拷权值锟斤拷锟斤拷锟斤拷\n");</span></span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n); </span><br><span class="line">w=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)); </span><br><span class="line"><span class="hljs-comment">//printf("锟斤拷锟斤拷锟斤拷权值锟斤拷\n"); </span></span><br><span class="line"><span class="hljs-keyword">for</span> ( i=<span class="hljs-number">0</span>;i&lt;n;i++) </span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;w[i]);</span><br><span class="line"></span><br><span class="line">HC=(<span class="hljs-keyword">char</span> **)<span class="hljs-built_in">malloc</span>((n+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>*));</span><br><span class="line">HT=(HuffmanTree)<span class="hljs-built_in">malloc</span>((<span class="hljs-number">2</span>*n+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(HTNode));</span><br><span class="line">HuffmanCoding(HT, HC, w, n);</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n+<span class="hljs-number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">puts</span>(HC[i]); </span><br><span class="line"><span class="hljs-built_in">free</span>(HC[i]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">free</span>(HC);</span><br><span class="line"><span class="hljs-built_in">free</span>(HT);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> huffman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非递归遍历树</title>
      <link href="/AngelNI.github.io/travel-tree-1/"/>
      <url>/AngelNI.github.io/travel-tree-1/</url>
      
        <content type="html"><![CDATA[<p>先序非递归遍历二叉树，中序非递归遍历二叉树，后序非递归遍历二叉树及双栈法。<a id="more"></a></p><h1 id="先序非递归遍历二叉树"><a href="#先序非递归遍历二叉树" class="headerlink" title="先序非递归遍历二叉树"></a>先序非递归遍历二叉树</h1><p>先序非递归遍历比较简单，感觉与DFS类似，根据先序遍历的规则根左右，先将根节点压入栈，然后遍历左子树，再遍历左子树的左子树，一头走到NULL，把每次遍历的左子树的根节点依次入栈并把当前结点数据打印出来。最后为NULL，开始回溯，返回到前一结点（也就是当前结点的根节点），开始遍历右子树。依次类推。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data;</span><br><span class="line">TNode * rchild,*lchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-comment">//先序+中序构造二叉树</span></span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i &lt; n ; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==b[i])</span><br><span class="line">&#123;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = b[i];</span><br><span class="line">T-&gt;lchild = Creat(a+<span class="hljs-number">1</span>,b,i);</span><br><span class="line">T-&gt;rchild = Creat(a+i+<span class="hljs-number">1</span>,b+i+<span class="hljs-number">1</span>,n-i<span class="hljs-number">-1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> T; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//先序非递归遍历</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_pre</span><span class="hljs-params">(TNode * T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;TNode *&gt; s;</span><br><span class="line">TNode * p = T;</span><br><span class="line"><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>||!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(p);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * Tree;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line">Tree = <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">Tree = Creat(a,b,n);</span><br><span class="line">travel_pre(Tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//测试样例</span></span><br><span class="line"><span class="hljs-comment">//输入前三行</span></span><br><span class="line"><span class="hljs-comment">//9</span></span><br><span class="line"><span class="hljs-comment">//1 2 4 7 3 5 8 9 6 //先序</span></span><br><span class="line"><span class="hljs-comment">//4 7 2 1 8 5 9 3 6 // 中序</span></span><br><span class="line"><span class="hljs-comment">//7 4 2 8 9 5 6 3 1 // 后序</span></span><br></pre></td></tr></table></figure><h1 id="中序非递归遍历二叉树"><a href="#中序非递归遍历二叉树" class="headerlink" title="中序非递归遍历二叉树"></a>中序非递归遍历二叉树</h1><p>仔细看代码你会发现，先序遍历和中序遍历代码差不多，关键在于打印节点数据的位置不一样。中序和先序遍历一样，从左子树一直走到NULL，当前结点为NULL时，开始从栈中弹出栈顶元素，并把栈顶元素的数据打印出来，然后遍历右结点，因为当前结点是叶节点，没有右孩子，所以再把栈顶元素弹出，并打印出来，此时当前结点为最左叶节点的根节点，然后遍历右节点，以此类推最后栈为空，遍历完毕。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data;</span><br><span class="line">TNode * rchild,*lchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-comment">//先序+中序构造二叉树</span></span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i &lt; n ; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==b[i])</span><br><span class="line">&#123;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = b[i];</span><br><span class="line">T-&gt;lchild = Creat(a+<span class="hljs-number">1</span>,b,i);</span><br><span class="line">T-&gt;rchild = Creat(a+i+<span class="hljs-number">1</span>,b+i+<span class="hljs-number">1</span>,n-i<span class="hljs-number">-1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> T; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//中序遍历非递归</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_in</span><span class="hljs-params">(TNode * T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;TNode *&gt; s;</span><br><span class="line">TNode * p = T;</span><br><span class="line"><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>||!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(p);</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = s.top();</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">s.pop();</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * Tree;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line">Tree = <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">Tree = Creat(a,b,n);</span><br><span class="line">travel_in(Tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后序非递归遍历二叉树及双栈法"><a href="#后序非递归遍历二叉树及双栈法" class="headerlink" title="后序非递归遍历二叉树及双栈法"></a>后序非递归遍历二叉树及双栈法</h1><h2 id="单栈法"><a href="#单栈法" class="headerlink" title="单栈法"></a>单栈法</h2><p>后序非递归遍历和先序中序非递归开始类似，先将左子树的左孩子的的左孩子的….每个节点压入栈。不同的是，后序遍历是走有根，有先后顺序，所以要定义一个结点变量，来记录当前结点是否被访问够。当节点为NULL时，取栈顶元素，如果当前结点的右孩子为空或者被访问过才把当前结点（根节点）打印，并作被访问记录。否则，对当前结点的右孩子遍历。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data;</span><br><span class="line">TNode * rchild,*lchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-comment">//先序+中序构建二叉树</span></span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i &lt; n ; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==b[i])</span><br><span class="line">&#123;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = b[i];</span><br><span class="line">T-&gt;lchild = Creat(a+<span class="hljs-number">1</span>,b,i);</span><br><span class="line">T-&gt;rchild = Creat(a+i+<span class="hljs-number">1</span>,b+i+<span class="hljs-number">1</span>,n-i<span class="hljs-number">-1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> T; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//后序非递归</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_post</span><span class="hljs-params">(TNode *T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;TNode *&gt; s;</span><br><span class="line">TNode * p = T;</span><br><span class="line">TNode *visit = <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>||!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(p);</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">p = s.top();</span><br><span class="line"><span class="hljs-keyword">if</span>(p-&gt;rchild==<span class="hljs-literal">NULL</span>||p-&gt;rchild==visit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">visit = p;</span><br><span class="line">s.pop();</span><br><span class="line">p = <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * Tree;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line">Tree = <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">Tree = Creat(a,b,n);</span><br><span class="line">travel_post(Tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双栈法"><a href="#双栈法" class="headerlink" title="双栈法"></a>双栈法</h2><p>首先将根节点p入栈1：</p><p>步骤一： 将栈1的栈顶元素赋给p，然后将p入栈2；然后先将p左结点入栈1，后将p右结点入栈1，顺序一定不能错。</p><p>步骤二：出栈2，就获得后序遍历</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data;</span><br><span class="line">TNode * rchild,*lchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i &lt; n ; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==b[i])</span><br><span class="line">&#123;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = b[i];</span><br><span class="line">T-&gt;lchild = Creat(a+<span class="hljs-number">1</span>,b,i);</span><br><span class="line">T-&gt;rchild = Creat(a+i+<span class="hljs-number">1</span>,b+i+<span class="hljs-number">1</span>,n-i<span class="hljs-number">-1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> T; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_post</span><span class="hljs-params">(TNode *T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;TNode *&gt; s1;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;TNode *&gt; s2; </span><br><span class="line">TNode * p = T;</span><br><span class="line">s1.push(p);</span><br><span class="line"><span class="hljs-keyword">while</span>(!s1.empty())</span><br><span class="line">&#123;</span><br><span class="line">p = s1.top();</span><br><span class="line">s1.pop();</span><br><span class="line">s2.push(p);</span><br><span class="line"><span class="hljs-keyword">if</span>(p-&gt;lchild)</span><br><span class="line">s1.push(p-&gt;lchild);</span><br><span class="line"><span class="hljs-keyword">if</span>(p-&gt;rchild)</span><br><span class="line">s1.push(p-&gt;rchild);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-keyword">while</span>(!s2.empty())</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="hljs-built_in">cout</span>&lt;&lt;s2.top()-&gt;data&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line"> s2.pop();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * Tree;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line">Tree = <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">Tree = Creat(a,b,n);</span><br><span class="line">travel_post(Tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> travel-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树——构造遍历二叉树</title>
      <link href="/AngelNI.github.io/travel-tree/"/>
      <url>/AngelNI.github.io/travel-tree/</url>
      
        <content type="html"><![CDATA[<p>构造二叉树，遍历二叉树，先序+中序构造二叉树后序遍历，中序+后序构造二叉树先序遍历。<a id="more"></a></p><h1 id="构造二叉树"><a href="#构造二叉树" class="headerlink" title="构造二叉树"></a>构造二叉树</h1><p><strong>利用二叉链表构造二叉树的每一个结点</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> data;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span></span><br><span class="line">&#125;*Tree;</span><br></pre></td></tr></table></figure><p><strong>先序遍历顺序建立二叉链表</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> data;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span></span><br><span class="line">&#125;TNode,*Tree;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Create</span><span class="hljs-params">(TNode *T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> ch;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;ch);</span><br><span class="line">    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'#'</span>)</span><br><span class="line">        *T=<span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T=(TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">        <span class="hljs-keyword">if</span>(!*T)</span><br><span class="line">            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</span><br><span class="line">        T-&gt;data=ch;</span><br><span class="line">        Create(T-&gt;lchild);</span><br><span class="line">        Create(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    TNode *T;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入树(#代表空节点):"</span>);</span><br><span class="line">    Create(T);</span><br><span class="line">    <span class="hljs-comment">//我是省略号//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//二叉树的先序遍历//</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_pre</span><span class="hljs-params">(TNode T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> ;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>,T-&gt;data);</span><br><span class="line">    travel_pre(T-&gt;lchild);</span><br><span class="line">    travel_pre(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//二叉树的中序遍历//</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_in</span><span class="hljs-params">(TNode T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">       <span class="hljs-keyword">return</span> ;</span><br><span class="line">   travel_in(T-&gt;lchild);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%C "</span>,T-&gt;data);</span><br><span class="line">   travel_in(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//二叉树的后序遍历//</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_post</span><span class="hljs-params">(TNode T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    travel_post(T-&gt;lchild);</span><br><span class="line">    travel_post(T-&gt;rchild);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>,T-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="先序-中序构造二叉树"><a href="#先序-中序构造二叉树" class="headerlink" title="先序+中序构造二叉树"></a>先序+中序构造二叉树</h1><p>根据先序和中序遍历结果还原二叉树基础理论比较好理解，多做几道这些类似的题，也能孰能生巧。关键之处，还是在于代码实现。</p><p>这是一道OJ题，请移步<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1710" target="_blank" rel="noopener">HDU1710</a></p><p>因为还原二叉树是一个递归的问题，将复杂地问题简化为一个个小问题，所以就拿三个结点的二叉树举栗。</p><p><strong>先序</strong>：ABC；</p><p><strong>中序</strong>：BAC；</p><p>我们都知道先序遍历是根左右，而中序遍历是左根右，我们可以通过先序找到根节点，根据中序中根节点的位置，就可以找到根节点的左子树（左孩子），和右子树（右孩子）；根据这个规则就可以还原一颗二叉树了。</p><p>例如下面的例子。</p><p>不难发现根节点是A，那么中序中的1<del>k就为左子树，k</del>尾就为右子树。同理，先序中pre+1<del>pre+k为左子树，pre+k+1</del>尾为右子树。其他以此类推。</p><img src="https://s2.ax1x.com/2019/10/18/KeRD78.png" alt border="0"><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data;</span><br><span class="line">TNode * lchild,* rchild;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-comment">//代码的核心之处//</span></span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">TNode * T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i &lt; n ; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==b[i])</span><br><span class="line">&#123;</span><br><span class="line">T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = b[i];</span><br><span class="line">T-&gt;lchild = Creat(a+<span class="hljs-number">1</span>,b,i);</span><br><span class="line">T-&gt;rchild = Creat(a+i+<span class="hljs-number">1</span>,b+i+<span class="hljs-number">1</span>,n-i<span class="hljs-number">-1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> T; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//后序遍历二叉树</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_post</span><span class="hljs-params">(TNode *R)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(R!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">travel_post(R-&gt;lchild);</span><br><span class="line">travel_post(R-&gt;rchild);</span><br><span class="line"><span class="hljs-keyword">if</span>(R==Tree)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,R-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,R-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line">Tree = <span class="hljs-literal">NULL</span>;</span><br><span class="line">        <span class="hljs-comment">//先序</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-comment">//中序</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">Tree = Creat(a,b,n);</span><br><span class="line">travel_post(Tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中序-后序构造二叉树"><a href="#中序-后序构造二叉树" class="headerlink" title="中序+后序构造二叉树"></a>中序+后序构造二叉树</h1><p>中序+后序构造二叉树和先序+中序构造二叉树类似，关键之处在于，找到每个二叉结点的根，左孩子，右孩子的位置，然后递归就可以了。</p><img src="https://s2.ax1x.com/2019/10/18/KeRB0f.png" alt="KeRB0f.png" border="0"><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> data;</span><br><span class="line">TNode *lchild,*rchild;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000</span>],b[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-comment">//核心区</span></span><br><span class="line"><span class="hljs-function">TNode * <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    TNode * T;</span><br><span class="line">    T = (TNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TNode));</span><br><span class="line">    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    T-&gt;data = b[n<span class="hljs-number">-1</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> * p;</span><br><span class="line">    <span class="hljs-keyword">for</span>(p = a;p&lt;a+n;p++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(*p==b[n<span class="hljs-number">-1</span>])</span><br><span class="line">    <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> t = p-a;</span><br><span class="line">T-&gt;lchild = Creat(a,b,t);</span><br><span class="line">T-&gt;rchild = Creat(a+t+<span class="hljs-number">1</span>,b+t,n-t<span class="hljs-number">-1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//先序遍历</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">travel_pre</span><span class="hljs-params">(TNode * R)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(R!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(R==Tree)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,R-&gt;data);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>,R-&gt;data);</span><br><span class="line">travel_pre(R-&gt;lchild);</span><br><span class="line">travel_pre(R-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line">Tree =<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b[i]); </span><br><span class="line">&#125;</span><br><span class="line">Tree = Creat(a,b,n);</span><br><span class="line">travel_pre(Tree);    </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> travel-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异构信息网</title>
      <link href="/AngelNI.github.io/HIN/"/>
      <url>/AngelNI.github.io/HIN/</url>
      
        <content type="html"><![CDATA[<p>攒下所有梦见你的瞬间，够不够换见你一面。<a id="more"></a></p><h1 id="知识图谱定义"><a href="#知识图谱定义" class="headerlink" title="知识图谱定义"></a>知识图谱定义</h1><p>知识图谱：是<strong>结构化的语义知识库</strong>，用于<strong>迅速</strong>描述物理世界中的概念及其相互关系。</p><p>知识图谱通过对<strong>错综复杂的文档</strong>的数据进行有效的<strong>加工、处理、整合</strong>，转化为简单、清晰的“实体,关系,实体”的<strong>三元组</strong>，最后聚合大量知识，从而实现知识的快速响应和推理。</p><p>知识图谱有<strong>自顶向下</strong>和<strong>自底向上</strong>两种构建方式。所谓自顶向下构建是借助百科类网站等结构化数据源，从高质量数据中提取本体和模式信息，加入到知识库中；所谓自底向上构建，则是借助一定的技术手段，从公开采集的数据中提取出资源模式，选择其中置信度较高的新模式，经人工审核之后，加入到知识库中。</p><h1 id="异构信息网-HIN"><a href="#异构信息网-HIN" class="headerlink" title="异构信息网(HIN)"></a>异构信息网(HIN)</h1><h2 id="信息网络-Information-Network"><a href="#信息网络-Information-Network" class="headerlink" title="信息网络(Information Network)"></a>信息网络(Information Network)</h2><p>信息网络是带有对象类型映射ϕ: V → A和链接映射ψ: E → R的有向图G=(V,E)。每个对象v∈V属于某一个特定对象类型φ（v）∈A，且每个链接e∈E属于关系类型集合R：ψ（e）∈R中的特定关系类型。</p><p>如果两个链接属于相同的关系类型，这两个链接共享相同的起始对象类型以及结束对象类。</p><img src="http://chevereto.angelni.cn/images/2019/10/16/6.jpg" alt border="0"><h2 id="异构-同构信息网络-Heterogeneous-homogeneous-information-Network"><a href="#异构-同构信息网络-Heterogeneous-homogeneous-information-Network" class="headerlink" title="异构/同构信息网络(Heterogeneous/homogeneous information Network)"></a>异构/同构信息网络(Heterogeneous/homogeneous information Network)</h2><p>如果|A| &gt; 1 或者 |R| &gt; 1 ，则该信息网络为异构信息网络，或简称为异构网络，否则为同构网络。</p><p>比如下面的例子：</p><img src="http://chevereto.angelni.cn/images/2019/10/16/4.png" alt="4.png" border="0"><h2 id="网络模式-Network-schema"><a href="#网络模式-Network-schema" class="headerlink" title="网络模式(Network schema)"></a>网络模式(Network schema)</h2><p>异构信息网络（G = (V, E)with ϕ(v) ∈ A 并且 ψ(e) ∈ R）的network schema TG = (A, R)，要指定objects和links的类型约束，就是这种约束使得异构网络变为半结构化。</p><p>定义为：TG=(A,R)，是信息网络 G=(V, E)的一种 meta模板，这个信息网络有一个object类型映射函数 ϕ:V→A 和 link 类型映射函数ψ:E→R。信息网络G是一个定义在object类型A上的有向图，并且边是R 中的relation。</p><img src="http://chevereto.angelni.cn/images/2019/10/16/7.png" alt border="0"><h2 id="元路径-Meta-path"><a href="#元路径-Meta-path" class="headerlink" title="元路径(Meta path)"></a>元路径(Meta path)</h2><p>Meta Path P定义在 network schema TG=(A,R)上，具体形式为 </p><img src="http://chevereto.angelni.cn/images/2019/10/16/8.png" alt border="0"><img src="http://chevereto.angelni.cn/images/2019/10/16/9.png" alt border="0"><img src="http://chevereto.angelni.cn/images/2019/10/16/10.png" alt border="0"><img src="http://chevereto.angelni.cn/images/2019/10/16/11.png" alt border="0"><h2 id="元图-Meta-graph"><a href="#元图-Meta-graph" class="headerlink" title="元图(Meta graph)"></a>元图(Meta graph)</h2><p>相比于元路径，元图能够捕捉更复杂地关系</p><p>网络模式(Network schema)的子图 </p><img src="http://chevereto.angelni.cn/images/2019/10/16/20171103175921554.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HIN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markov-Chain</title>
      <link href="/AngelNI.github.io/Markov-Chain/"/>
      <url>/AngelNI.github.io/Markov-Chain/</url>
      
        <content type="html"><![CDATA[<p>世界让我遍体鳞伤，但伤口长出的却是翅膀。<a id="more"></a></p><h1 id="马尔可夫链（Markov-Chain）"><a href="#马尔可夫链（Markov-Chain）" class="headerlink" title="马尔可夫链（Markov Chain）"></a>马尔可夫链（Markov Chain）</h1><p>马尔可夫链（Markov Chain），又称为离散时间马尔可夫链，可以定义为一个随机过程Y，在某时间t上的任何一个点的值仅仅依赖于在时间t-1上的值。这就表示了我们的随机过程在时间t上具有状态x的概率，如果给出它之前所有的状态，那么就相当于在仅给出它在时间t-1的状态的时候，在时间t上具有状态x的概率。</p><img src="https://s2.ax1x.com/2019/10/16/KFGsUA.jpg" alt border="0"><p>如果可能的状态集S是有限的，那么，我们可以提供马尔可夫链的可视化表示结果，如下图所示：</p><img src="https://s2.ax1x.com/2019/10/16/KFG0De.jpg" alt border="0"><p>上图中的每个圆圈都代表了一个状态，在这种情况下S={A, B, C}，而箭头则表示过程从一个状态跳到另一个状态的概率。我们可以在一个称为“转移矩阵”P中收集所有的这些概率数据，如下图所示：</p><img src="https://s2.ax1x.com/2019/10/16/KFGN36.jpg" alt border="0"><p>那么，就有:</p><img src="https://s2.ax1x.com/2019/10/16/KFGrEd.jpg" alt border="0"><p>然后，在每个时间点上，我们可以描述过程的（无条件的）概率分布，这将是一个向量，其分量数等于S的维数。每个分量表示我们的过程取值等于给定状态的无条件概率。也就是:</p><img src="https://s2.ax1x.com/2019/10/16/KFGy4I.jpg" alt border="0"><p>关于上式中变量μ的比较有趣的性质是，它会通过以下等式的关系与转移矩阵相关联:</p><img src="https://s2.ax1x.com/2019/10/16/KFGUgK.jpg" alt border="0"><p>因此，一旦我们有了向量的已知初始值（这是可以理解的，因为我们是从一个可观察的状态开始的，因此将有一个包含多个0的向量，但在初始状态的位置上只有一个0），这样就可以计算过程在任何时间点上的分布了。</p><p>与此同时，我们的向量有一个特定的值，以使下面这个等式成立：</p><img src="https://s2.ax1x.com/2019/10/16/KFGwuD.jpg" alt border="0"><p>如果存在如上所述的一个值，我们将相应的变量μ称为过程的不变分布。</p><p>在讨论马尔可夫链蒙特卡罗（MCMC）方法的时候，不变分布是一个关键的概念。它包括一类从概率分布中抽样的算法，这个概率分布构造了一个马尔可夫链，而这个马尔可夫链则希望把这个分布作为它的不变分布。</p><p>事实上，蒙特卡罗方法的目标是要从不易抽样的分布中找到抽样的方法。要绕过这个问题，我们已有了一些方法，如拒绝抽样和重要性抽样等等，它们使用了一个更简单的函数，称为“proposal”</p><p>让我们模拟一个马尔可夫链，现在，考虑一个变量，今天的状态可能只取决于昨天的状态，这个变量有可能指的是天气。所以让我们考虑下面的马尔可夫链：</p><img src="https://s2.ax1x.com/2019/10/16/KFGBHH.jpg" alt border="0"><p>我们可以用以前的方法来解释上图。也就是说，如果今天是晴天，则明天也是晴天的概率是50%，而下雨的概率是15%，是多云天气的概率是35%。</p><p>另外，也有一个初始值，比如说“多云”，因此我们已经有了y的初始分布，即μ _0=[0,0,1]。</p><p>由于我们有一个初始的变量μ和一个转移矩阵，因此就可以在任意时间点t上计算μ的值。因此，有了这些之后，我想根据每个t值的概率分布来创建一个随机过程（具有马尔可夫链的属性，因此可以只依赖于前一个时间段）。</p><p>这意味着我得到的随机变量Y将会有一些等于瞬间数量的分量，而每个分量都是根据瞬间的概率分布来实现的过程。为此，我们希望从均匀分布中生成一个随机数，并设置如下规则：</p><img src="https://s2.ax1x.com/2019/10/16/KFGajO.jpg" alt border="0"><p>附上代码</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line">p = np.array([[<span class="hljs-number">0.5</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">0.35</span>],</span><br><span class="line">             [<span class="hljs-number">0.45</span>,<span class="hljs-number">0.45</span>,<span class="hljs-number">0.1</span>],</span><br><span class="line">             [<span class="hljs-number">0.1</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">0.6</span>]])</span><br><span class="line">Sunny = <span class="hljs-number">1</span></span><br><span class="line">Rainy = <span class="hljs-number">2</span></span><br><span class="line">Cloudy = <span class="hljs-number">3</span></span><br><span class="line">m = np.zeros(<span class="hljs-number">150</span>).reshape(<span class="hljs-number">50</span>,<span class="hljs-number">3</span>)</span><br><span class="line">m[<span class="hljs-number">0</span>] = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]</span><br><span class="line">ndays = <span class="hljs-number">50</span></span><br><span class="line">Y = [<span class="hljs-number">0</span>]*ndays</span><br><span class="line">u = np.random.uniform(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,ndays):</span><br><span class="line">    m[i] = m[i<span class="hljs-number">-1</span>].dot(p)</span><br><span class="line">    <span class="hljs-keyword">if</span> u[i]&lt;m[i][<span class="hljs-number">0</span>]:</span><br><span class="line">        Y[i] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> u[i]&lt;m[i][<span class="hljs-number">0</span>]+ m[i][<span class="hljs-number">1</span>]:</span><br><span class="line">        Y[i] = <span class="hljs-number">2</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        Y[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span></span><br><span class="line">[np.mean(m[:,<span class="hljs-number">0</span>]),np.mean(m[:,<span class="hljs-number">1</span>]),np.mean(m[:,<span class="hljs-number">2</span>])]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#####################</span></span><br><span class="line">output：</span><br><span class="line">[<span class="hljs-number">0.32391901234567883</span>, <span class="hljs-number">0.28887703703703688</span>, <span class="hljs-number">0.3872039506172838</span>]</span><br><span class="line"><span class="hljs-comment">#####################</span></span><br></pre></td></tr></table></figure><p>最后附上50天的天气情况</p><img src="https://s2.ax1x.com/2019/10/16/KFdQRs.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markov Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Java</title>
      <link href="/AngelNI.github.io/java/"/>
      <url>/AngelNI.github.io/java/</url>
      
        <content type="html"><![CDATA[<p>就想写个A+B，我容易吗。。。<a id="more"></a></p><p>我真的很想，很舒适的写一个大数A+B.</p><p><img src="https://s2.ax1x.com/2019/10/16/KFYdTH.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC开启上帝模式</title>
      <link href="/AngelNI.github.io/skill/"/>
      <url>/AngelNI.github.io/skill/</url>
      
        <content type="html"><![CDATA[<p>不要让一句在等等错过了最好的机遇。<a id="more"></a></p><h1 id="上帝模式"><a href="#上帝模式" class="headerlink" title="上帝模式"></a>上帝模式</h1><p>上帝模式，即”God Mode”，或称为“完全控制面板”。是Windows 系统中隐藏的一个简单的文件夹窗口，包含了几乎所有Windows系统的设置，如控制面板的功能、界面个性化、辅助功能选项等方方面面的控制设置，用户只需通过这一个窗口就能实现所有的操控，而不必再去为调整一个小小的系统设置细想半天究竟该在什么地方去打开设置，在这里就告诉大家如何造作~</p><h2 id="方式一：桌面添加上帝模式"><a href="#方式一：桌面添加上帝模式" class="headerlink" title="方式一：桌面添加上帝模式"></a>方式一：桌面添加上帝模式</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>在桌面鼠标右击选择【新建】、【文件夹】。</p><img src="https://s2.ax1x.com/2019/10/14/Kp9Fjs.jpg" alt border="0"><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>将新建的文件夹重命名为GodMode.{ED7BA470-8E54-465E-825C-99712043E01C}请使用快捷键Ctrl+C复制，然后使用快捷键Ctrl+V粘贴给刚才的文件夹重命名。</p><img src="https://s2.ax1x.com/2019/10/14/Kp9icj.jpg" alt border="0"><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>双击打开这个类似控制面板的图标。温馨提示：Win7系统会有【GodMode】的名字。</p><img src="https://s2.ax1x.com/2019/10/14/Kp9Aun.jpg" alt border="0"><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>打开上帝模式界面如下，几乎包含了所有Windows系统的设置。</p><img src="https://s2.ax1x.com/2019/10/14/KppXnI.jpg" alt border="0"><h2 id="方式二：鼠标右键添加上帝模式"><a href="#方式二：鼠标右键添加上帝模式" class="headerlink" title="方式二：鼠标右键添加上帝模式"></a><strong>方式二：鼠标右键添加上帝模式</strong></h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h3><p>鼠标右击【开始菜单】选择【运行】，在运行框中输入 regedit 然后点击【确定】。</p><img src="https://s2.ax1x.com/2019/10/14/KppzAf.jpg" alt border="0"><h3 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h3><p>依次展开路径至：</p><p>HKEY_CLASSES_ROOT\DesktopBackground\Shell</p><img src="https://s2.ax1x.com/2019/10/14/Kp9p4S.jpg" alt border="0"><h3 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h3><p>点击【shell】后在右侧窗口鼠标右击选择【新建】选择【项】。</p><img src="https://s2.ax1x.com/2019/10/14/Kp9SN8.jpg" alt border="0"><h3 id="4-1"><a href="#4-1" class="headerlink" title="4."></a>4.</h3><p>将新建的项重命名为【上帝模式】。</p><img src="https://s2.ax1x.com/2019/10/14/Kp9C9g.jpg" alt border="0"><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><p>点击【上帝模式】后双击右侧窗口中的【默认】，在数值数据处输入【上帝模式】点击【确定】。</p><img src="https://s2.ax1x.com/2019/10/14/KppvHP.jpg" alt border="0"><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><p>鼠标右击左侧【上帝模式】选择【新建】选择【项】</p><img src="https://s2.ax1x.com/2019/10/14/KppjBt.jpg" alt border="0"><h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><p>将新建的项命名为【command】。</p><img src="https://s2.ax1x.com/2019/10/14/KppLjA.jpg" alt border="0"><h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><p>点击【command】后双击右侧窗口中的【默认】，在数值数据处输入 explorer shell:::{ED7BA470-8E54-465E-825C-99712043E01C} 点击【确定】。</p><img src="https://s2.ax1x.com/2019/10/14/Kp9P3Q.jpg" alt border="0"><h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><p>在桌面空白处鼠标右击，上帝模式选项已经成功添加了。</p><img src="https://s2.ax1x.com/2019/10/14/Kppqcd.jpg" alt border="0"><p><strong>划重点：</strong> <u>如果需要取消鼠标右键菜单项，只需在注册表中把新建的项删除即可。</u></p>]]></content>
      
      
      <categories>
          
          <category> sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔+Kodcloud搭建个人网盘</title>
      <link href="/AngelNI.github.io/kodcloud/"/>
      <url>/AngelNI.github.io/kodcloud/</url>
      
        <content type="html"><![CDATA[<p>月圆思故人。<a id="more"></a></p><p><strong>KodExplorer可道云简介：</strong><br>KodExplorer可道云，原名芒果云，是基于Web技术的私有云和在线文件管理系统，由上海岱牧网络有限公司开发，发布于2012年6月。致力于为用户提供安全可控、可靠易用、高扩展性的私有云解决方案。<br>用户只需通过简单环境搭建，即可使用KodExplorer快速完成私有云/私有网盘/在线文档管理系统的部署和搭建。可道云提供了类windows经典用户界面，延续了windows平台的用户界面、操作逻辑和使用习惯，支持100余种文件格式的在线预览，解决了文件在线存储与管理、共享和跨平台访问、在线办公影音娱乐等一系列问题，使得用户的私有云产品可以拥有本地操作一样方便、快捷、安全的体验。<br>官网地址：<a href="http://www.kodcloud.com/" target="_blank" rel="noopener">http://www.kodcloud.com</a></p><img src="https://s2.ax1x.com/2019/10/13/uvGfIg.png" alt border="0"><img src="https://s2.ax1x.com/2019/10/13/uvJTte.png" alt border="0"><p>成功安装后就可登陆正常使用了</p><img src="https://s2.ax1x.com/2019/10/13/uvYkXq.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kodcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器终于备案好了</title>
      <link href="/AngelNI.github.io/sever/"/>
      <url>/AngelNI.github.io/sever/</url>
      
        <content type="html"><![CDATA[<p>已成功搭建个人网盘，个人图床，开源OJ平台。<a id="more"></a></p><p>从备案申请到备案成功，等的我好烦人啊，还好是成功备案下来。</p><p>这不正赶上周末，当然要好好造作一番了。</p><h1 id="宝塔面板-kodexplorer搭建的个人网盘。"><a href="#宝塔面板-kodexplorer搭建的个人网盘。" class="headerlink" title="宝塔面板+kodexplorer搭建的个人网盘。"></a>宝塔面板+kodexplorer搭建的个人网盘。</h1><p>参考</p><img src="https://s2.ax1x.com/2019/10/13/uv3GFJ.png" alt border="0"><h1 id="Chevereto搭建私人图床"><a href="#Chevereto搭建私人图床" class="headerlink" title="Chevereto搭建私人图床"></a>Chevereto搭建私人图床</h1><p>关于Chevereto的配置可以参考我们翻译的<a href="https://ch.cndrew.cn/" target="_blank" rel="noopener">中文文档</a></p><img src="https://s2.ax1x.com/2019/10/13/uv3JY9.png" alt border="0"><h1 id="青岛大学OJ"><a href="#青岛大学OJ" class="headerlink" title="青岛大学OJ"></a>青岛大学OJ</h1><p>还在探索中ing</p><img src="https://s2.ax1x.com/2019/10/13/uv33o4.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> serve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2048 Game</title>
      <link href="/AngelNI.github.io/problem-1/"/>
      <url>/AngelNI.github.io/problem-1/</url>
      
        <content type="html"><![CDATA[<p>间接性划水，持续性自闭。<a id="more"></a></p><h1 id="2048-Game"><a href="#2048-Game" class="headerlink" title="2048 Game"></a>2048 Game</h1><p><a href="https://codeforces.com/problemset/problem/1221/A" target="_blank" rel="noopener">题目链接</a></p><p>A. 2048 Game</p><p>time limit per test</p><p>1 second</p><p>memory limit per test</p><p>256 megabytes</p><p><strong>input</strong></p><p>standard input</p><p><strong>output</strong></p><p>standard output</p><p>You are playing a variation of game 2048. Initially you have a multiset ss of nn integers. Every integer in this multiset is a power of two.</p><p>You may perform any number (possibly, zero) operations with this multiset.</p><p>During each operation you choose two <strong>equal</strong> integers from ss, remove them from ss and insert the number equal to their sum into ss.</p><p>For example, if s={1,2,1,1,4,2,2}s={1,2,1,1,4,2,2} and you choose integers 22 and 22, then the multiset becomes {1,1,1,4,4,2}{1,1,1,4,4,2}.</p><p>You win if the number 20482048 belongs to your multiset. For example, if s={1024,512,512,4}s={1024,512,512,4} you can win as follows: choose 512512 and 512512, your multiset turns into {1024,1024,4}{1024,1024,4}. Then choose 10241024 and 10241024, your multiset turns into {2048,4}{2048,4} and you win.</p><p>You have to determine if you can win this game.</p><p>You have to answer qq independent queries.</p><p><strong>Input</strong></p><p>The first line contains one integer qq (1≤q≤1001≤q≤100) – the number of queries.</p><p>The first line of each query contains one integer nn (1≤n≤1001≤n≤100) — the number of elements in multiset.</p><p>The second line of each query contains nn integers s1,s2,…,sns1,s2,…,sn (1≤si≤2291≤si≤229) — the description of the multiset. It is guaranteed that all elements of the multiset are powers of two.</p><p><strong>Output</strong></p><p>For each query print YES if it is possible to obtain the number 20482048 in your multiset, and NO otherwise.</p><p>You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).</p><p>Example</p><p>input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br><span class="line">1024 512 64 512</span><br><span class="line">1</span><br><span class="line">2048</span><br><span class="line">3</span><br><span class="line">64 512 2</span><br><span class="line">2</span><br><span class="line">4096 4</span><br><span class="line">7</span><br><span class="line">2048 2 2048 2048 2048 2048 2048</span><br><span class="line">2</span><br><span class="line">2048 4096</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><p>In the first query you can win as follows: choose 512512 and 512512, and ss turns into {1024,64,1024}{1024,64,1024}. Then choose 10241024 and 10241024, and ssturns into {2048,64}{2048,64} and you win.</p><p>In the second query ss contains 20482048 initially.</p><p>这道题和我们玩得游戏2048一样，只要你能够凑出2048，you win！！！</p><p>一开始，没有想那多,就是想直接模拟一下。</p><h2 id="AC-1"><a href="#AC-1" class="headerlink" title="AC_1"></a>AC_1</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">1010</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a&gt;b;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="hljs-keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m,flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+m,cmp);</span><br><span class="line"><span class="hljs-keyword">int</span> k =<span class="hljs-number">2048</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(k&gt;=a[i]&amp;&amp;k%a[i]==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(k == sum)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"YES\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"NO\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="AC-2"><a href="#AC-2" class="headerlink" title="AC_2"></a>AC_2</h2><p>之后有人跟我说，这是分治，我也没听懂他在说什么，就去了CSDN，找了教程。</p><p>分治：原来就是把问题划分为相互独立的子问题进行处理。（必然联系到递归）</p><ul><li>比如，你想找是否有没有2048，此时把2048分成1024 1024，你可以找1024，然后看看集合中有几个1024，是否满足条件。</li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-comment">//int a[100005];</span></span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(mp[x] &gt;= n)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> dfs(x/<span class="hljs-number">2</span>,n*<span class="hljs-number">2</span><span class="hljs-number">-2</span>*mp[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">mp.clear(); </span><br><span class="line"><span class="hljs-keyword">int</span> m;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> s;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;s;</span><br><span class="line">mp[s]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> flag = dfs(<span class="hljs-number">2048</span>,<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(flag)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"YES\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活随笔</title>
      <link href="/AngelNI.github.io/life-essay/"/>
      <url>/AngelNI.github.io/life-essay/</url>
      
        <content type="html"><![CDATA[<p>这是你自己的选择，别谢我。<a id="more"></a></p><h1 id="这是你自己的选择，别谢我。"><a href="#这是你自己的选择，别谢我。" class="headerlink" title="这是你自己的选择，别谢我。"></a>这是你自己的选择，别谢我。</h1><p>”恐怕，这句话很难忘记了~“</p><p>今天排队打卡，排了很长的队伍，堪称壮观，我一开始排在签字的队伍（我带卡了），不过很慢，很慢，旁边的打卡的队伍移动的很快，之后看到原班的同学，见其就插到了他前边，我不好意思的说声谢谢，他说“这是你自己的选择，别谢我。”我想瞬间僵住了，内心愧疚感一发不可收拾，他怎么能说出折磨精辟的话。</p><p>不过这真是的，无论是自己选择插队，还是更风别人，终归到底还是你自己的选择。生活就是选择，不断选择，重复选择的过程，最后的结果都是由你自己决定，甜苹果还是烂苹果，都是你自己种下的果~</p><p>记录：10/11/2019</p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作命令总结</title>
      <link href="/AngelNI.github.io/linux-1/"/>
      <url>/AngelNI.github.io/linux-1/</url>
      
        <content type="html"><![CDATA[<p>前进的时候千万不要忘记自我反思 ，它会让你走的更远。<a id="more"></a></p><h1 id="Linux-命令总结"><a href="#Linux-命令总结" class="headerlink" title="Linux 命令总结"></a>Linux 命令总结</h1><h2 id="Linux一些介绍"><a href="#Linux一些介绍" class="headerlink" title="Linux一些介绍"></a>Linux一些介绍</h2><h3 id="1-Linux与windows的区别"><a href="#1-Linux与windows的区别" class="headerlink" title="1.Linux与windows的区别"></a>1.Linux与windows的区别</h3><p>Linux是一款操作系统。通常开发服务器项目部署都是在Linux操作系统上。</p><p>Windows一款操作系统，大多数人使用的操作系统。</p><h3 id="2-Linux历史及使用场景"><a href="#2-Linux历史及使用场景" class="headerlink" title="2.Linux历史及使用场景"></a>2.Linux历史及使用场景</h3><p>Linux 90年代诞生，仿制Unix操作系统。</p><p>Linux是免费、开源的</p><p>Unix收费、封闭的。</p><p>Linux使用场景：服务器操作系统（比如我正在备案中的阿里云），移动设备（安卓手机，平板），路由器（WIFI），交换机，智能家居，JAVA程序开发。</p><h3 id="3-Linux版本"><a href="#3-Linux版本" class="headerlink" title="3.Linux版本"></a>3.Linux版本</h3><p>Linnux版本分为两种：内核版本(<a href="https://www.kernel.org/)和发行版本" target="_blank" rel="noopener">https://www.kernel.org/)和发行版本</a></p><p>Linux内核版本：Linux内核运营开发小组。源码一定程度上不是开源的。</p><p>Linux发行版本：有各大互联网/软件公司定制。外围的样式功能的代码完全开源。</p><p>一个内核版本是有多种多样的发行版本。</p><p>Ubuntu：以强大的桌面应用为主，使用的Linux版本就是Ubuntu，自己主要用于Linux学习和深度学习，程序运行。</p><p>等等许多~~</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Linux命令中参数，一般都是无序的。特殊情况下除外</p><p>注意：Linux中的命令严格区分大小写的！</p><h3 id="3-1、磁盘管理命令"><a href="#3-1、磁盘管理命令" class="headerlink" title="3.1、磁盘管理命令"></a>3.1、磁盘管理命令</h3><h4 id="1-ls-列出目录内容"><a href="#1-ls-列出目录内容" class="headerlink" title="1.ls 列出目录内容"></a>1.ls 列出目录内容</h4><p>ls（list）功能：列出目录内容</p><p>2.格式：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls [参数] [文件或目录]</span><br><span class="line"># 参数</span><br><span class="line">-a或--all   查询所有文件和文件夹，包含隐藏。注意隐藏文件、特殊目录、. 和 ..</span><br><span class="line">-l           查询详细列表    ls -l--&gt;简写：ll</span><br><span class="line">-h             友好展示信息    ll -h (d目录，-普通文件, l链接)</span><br><span class="line"> </span><br><span class="line">-t          用文件和目录的更改时间排序。</span><br><span class="line">-r             反向排序</span><br><span class="line">--help       在线帮助</span><br></pre></td></tr></table></figure><p>3.常用</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l        --&gt; 此命令非常常用，提供简化版命令 ll</span><br><span class="line">ls -al</span><br><span class="line">ll /home/    --&gt; 显示指定目录下的内容</span><br></pre></td></tr></table></figure><p>4.eg</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需求：展示某个目录下的内容    ls 目录名</span><br><span class="line">所在位置：/root</span><br><span class="line">想要查看:/etc目录下的内容</span><br><span class="line">命令：ll -h /etc</span><br></pre></td></tr></table></figure><h4 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h4><p>1.cd(change directory) 功能：切换目录</p><p>2.语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">cd [目录]</span><br><span class="line"># 常用</span><br><span class="line">cd /目录名   ，任意目录切换到指定目录中     /目录名--&gt;Linux的绝对路径</span><br><span class="line">                                       windows绝对路径--&gt;c:/xxxx/xxx.jpg?raw=true</span><br><span class="line">cd ../      ，向上一层目录</span><br><span class="line">cd ~        ，切换到当前用户 家目录。root用户家目录 /root</span><br><span class="line">cd /        ，切换到Linux的 根目录</span><br><span class="line">cd -          ，切换到上一次访问的目录。   只能两个目录相互切换</span><br><span class="line">cd ..        ，上一级目录</span><br><span class="line">cd            ，缺省当前用户目录</span><br></pre></td></tr></table></figure><ul><li>Linux绝对：<br>eg：cd /etc/x1 先切换到 /目录，然后在 /目录 中找到子目录 etc，在 etc 中找 子目录x1<br>特点：在任意目录都可以随意切换</li><li>Linux相对：<br>eg：cd x1/x2 在当前目录中寻找子目录x1, 在x1中寻找子目录x2<br>特点：必须确定 当前目录 下有子目录x1</li></ul><h4 id="pwd-显示当前所在目录"><a href="#pwd-显示当前所在目录" class="headerlink" title="pwd 显示当前所在目录"></a>pwd 显示当前所在目录</h4><ul><li>pwd(print working directory) 功能：显示工作目录(当前的所在目录)。返回绝对路径</li></ul><h4 id="mkdir常见目录"><a href="#mkdir常见目录" class="headerlink" title="mkdir常见目录"></a>mkdir常见目录</h4><p>1.mkdir（make directority）功能：创建目录</p><p>2.语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">mkdir -p 文件夹名称</span><br><span class="line"># 参数</span><br><span class="line">-p  父目录不存在情况下先生成父目录 （parents）</span><br><span class="line">-v    显示命令执行过程中的详细信息</span><br></pre></td></tr></table></figure><p>3.注意</p><p>使用mkdir创建带后缀的文件时，创建的是<strong>目录</strong>，不是文件（<strong>创建文件</strong>使用<strong>touch命令</strong>）</p><p>4.其他</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">需要在/root/t1目录下创建一个t2目录</span><br><span class="line">位置：/root</span><br><span class="line">命令：相对路径：mkdir t1/t2</span><br><span class="line">绝对：mkdir /root/t1/t2</span><br><span class="line"># 2</span><br><span class="line">需要在/root/t3目录下创建一个t4目录</span><br><span class="line">位置：/root</span><br><span class="line">条件：t3和t4都不存在</span><br><span class="line">命令：mkdir -p t3/t4</span><br></pre></td></tr></table></figure><h4 id="rmdir删除空目录"><a href="#rmdir删除空目录" class="headerlink" title="rmdir删除空目录"></a>rmdir删除空目录</h4><ul><li>rmdir(remove directory) 功能：删除空目录</li></ul><h4 id="指令快捷键"><a href="#指令快捷键" class="headerlink" title="指令快捷键"></a>指令快捷键</h4><p>1.历史输入<br>使用上、下箭头可以找出上一条指令和下一条指令</p><p>2.Tab代码补全<br>使用tab键可以快速输入指令<br>比如：我要输入shutdown指令，这时，我们可以只输入shut然后按下tab键，即可自动把shutdown补全</p><p>注意：使用两下Tab补全时，如果匹配的结果有多个，这时候将会把所有匹配的结果展示出来。</p><h3 id="3-2、文件浏览-管理-命令"><a href="#3-2、文件浏览-管理-命令" class="headerlink" title="3.2、文件浏览(管理)命令"></a>3.2、文件浏览(管理)命令</h3><p>日志文件,XML,properties文件</p><h4 id="cat-快捷查看当前文件的内容"><a href="#cat-快捷查看当前文件的内容" class="headerlink" title="cat 快捷查看当前文件的内容"></a><em>cat</em> 快捷查看当前文件的内容</h4><p>1.cat（catenate）功能：快捷查看当前文件的内容<br>cat适合查看少量信息的文件</p><p>2.语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">cat 文件名</span><br></pre></td></tr></table></figure><h4 id="more-分页显示文件内容"><a href="#more-分页显示文件内容" class="headerlink" title="more 分页显示文件内容"></a><em>more</em> 分页显示文件内容</h4><p>1.more功能：分页显示文件内容，还支持直接跳转行等功能<br>2.语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></table></figure><p>3.操作</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下n行，需要定义。默认为1行</span><br><span class="line">空格键    向下滚动一屏 或 Ctrl+F</span><br><span class="line">B        返回上一屏 或 Ctrl+B</span><br><span class="line">q        退出more</span><br></pre></td></tr></table></figure><h3 id="less-分页显示文件内容"><a href="#less-分页显示文件内容" class="headerlink" title="less 分页显示文件内容"></a><em>less</em> 分页显示文件内容</h3><p>1.less功能：分页显示文件内容，操作更详细</p><p>2.语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">less -mN 文件名 </span><br><span class="line"># 参数</span><br><span class="line">-m  显示类似more命令的百分比</span><br><span class="line">-N  显示每行的行号</span><br></pre></td></tr></table></figure><p>3.操作</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下n行，需要定义。默认为1行</span><br><span class="line">空格键    向下滚动一屏 或 Ctrl+F</span><br><span class="line">    B    返回上一屏 或 Ctrl+B</span><br><span class="line">    q    退出more</span><br><span class="line"> </span><br><span class="line">    d    前进半页</span><br><span class="line">    u    后退半页</span><br><span class="line">回车键    前进一行 或 方向键向下</span><br><span class="line">    y    后退一行    或 方向键向上</span><br><span class="line">    v    进入vim编辑器</span><br><span class="line">/字符串   向下搜索</span><br><span class="line">?字符串   向上搜索</span><br><span class="line">左右方向键 相当于水平滚动条</span><br></pre></td></tr></table></figure><p>4.特点：</p><p>适用于<strong>大量数据</strong>的查看</p><h4 id="tail-指定文件末尾内容"><a href="#tail-指定文件末尾内容" class="headerlink" title="tail 指定文件末尾内容"></a><em>tail</em> 指定文件末尾内容</h4><p>1.用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件</p><p>2.语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">tail[必要参数][选择参数][文件]</span><br><span class="line"># 参数</span><br><span class="line">-n&lt;行数&gt;    显示行数</span><br><span class="line">-f         循环读取</span><br></pre></td></tr></table></figure><h3 id="3-3、文件操作命令"><a href="#3-3、文件操作命令" class="headerlink" title="3.3、文件操作命令"></a>3.3、文件操作命令</h3><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>1.隐藏文件<br>Linux中以 点. 开头的是隐藏文件，使用ls命令是查看不到的，需使用ls -a</p><p>2.目录与文件的区别<br>当我们使用ls命令列出目录中的所有子目录和文件时，如何区分哪些是文件哪些是目录？<br>可以通过详细信息中第一列的信息来区分：以 d 开头的是目录，以 - 开头的是文件</p><h4 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h4><p>1.功能：创建文件</p><p>2.语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 绝对路径/相对路径</span><br></pre></td></tr></table></figure><h4 id="cp复制"><a href="#cp复制" class="headerlink" title="cp复制"></a>cp复制</h4><p>1.cp（copy）：复制文件或者复制目录</p><p>2.复制文件：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 需要复制的文件 复制的位置</span><br></pre></td></tr></table></figure><p>注意：cp可以进行重命名操作</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/Demo1.java文件 复制到  /root/t1 目录中</span><br><span class="line">位置：/root</span><br><span class="line">命令：cp Demo1.java t1</span><br><span class="line">     cp /root/Demo1.java /root/t1</span><br><span class="line"> </span><br><span class="line">需求：把/root/Demo1.java文件 复制到  /root/t1 目录中，改名为ddd.java</span><br><span class="line">位置：/root</span><br><span class="line">命令：cp Demo1.java t1/ddd.java</span><br></pre></td></tr></table></figure><p>3.复制目录</p><p>语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">cp -r 需要复制的目录 复制的位置</span><br><span class="line"># 参数</span><br><span class="line">-r或--recursive  递归处理，将指定目录下的文件与子目录一并处理 复制目录必须使用-r</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/t5目录 复制到  /root/t1目录中</span><br><span class="line">位置：/root</span><br><span class="line">命令：cp -r t5 t1</span><br><span class="line">     cp -r /root/t5 /root/t1</span><br><span class="line"> </span><br><span class="line">cp ./abc ./xxx                #无法复制目录</span><br><span class="line">cp -r ./abc ./xxx            #复制目录必须使用 -r参数</span><br></pre></td></tr></table></figure><h3 id="mv-移动、更名"><a href="#mv-移动、更名" class="headerlink" title="mv 移动、更名"></a><em>mv</em> 移动、更名</h3><p>1.mv(move) 功能： 移动 或 更名 现有的文件或目录</p><p>2.移动文件：</p><p>语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">mv -f 需要移动的文件 移动的位置</span><br><span class="line"># 参数</span><br><span class="line">-f或--force 　若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录，不进行询问</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/t5 目录 移动到 /root/t3目录中</span><br><span class="line">位置：/root</span><br><span class="line">命令：mv t5 t3</span><br><span class="line"> </span><br><span class="line">需求：把/root/t5 目录 移动到 /root/t3目录中</span><br><span class="line">        不询问，直接覆盖</span><br><span class="line">位置：/root</span><br><span class="line">已知：/root/t3目录中 已经有一个t5目录了</span><br><span class="line">命令：mv -f t5 t3</span><br></pre></td></tr></table></figure><p>3.文件<strong>更名</strong>：</p><p>格式：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv 需要移动的文件 新名字</span><br><span class="line">## 必须是在同一目录中进行此操作</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件/目录更名操作：</span><br><span class="line">需求：把/root/Demo1.java  改名为 hehe.java</span><br><span class="line">位置：/root</span><br><span class="line">命令：mv Demo1.java hehe.java</span><br></pre></td></tr></table></figure><h4 id="rm删除"><a href="#rm删除" class="headerlink" title="rm删除"></a>rm删除</h4><p>1.rm(remove) 功能：删除文件或目录</p><p>2.删除<strong>文件</strong>：</p><p>语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm 文件名</span><br></pre></td></tr></table></figure><p>3.删除<strong>目录</strong>：</p><p>语法：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">rm -rf 目录名</span><br><span class="line"># 参数</span><br><span class="line">-f或--force 　        强制删除文件或目录，不进行询问</span><br><span class="line">-r或-R或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。删除目录必须使用-r</span><br></pre></td></tr></table></figure><p>4.注意</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf *     删除 当前目录 下所有内容</span><br><span class="line">rm –rf /*    删除Linux系统 根目录 下所有内容</span><br></pre></td></tr></table></figure><p>5.eg</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需求：删除/root/t5 目录， </span><br><span class="line">位置：/root</span><br><span class="line">已知：t5目录下有子目录或者文件</span><br><span class="line">命令：rm -rf t5</span><br></pre></td></tr></table></figure><h4 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a><em>find</em> 查找</h4><p>1.find功能：查找文件或目录</p><p>2.<strong>语法</strong>：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find 目录名 -name &apos;需要查找的字符串&apos;</span><br><span class="line"> </span><br><span class="line">-name 指定字符串作为寻找文件或目录的范本样式</span><br><span class="line">* 表示0~多个任意字符 eg：find t1 -name &apos;*.txt&apos;</span><br></pre></td></tr></table></figure><p>3.eg</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求：查找/root目录下 所有以ins开头的文件或者目录</span><br><span class="line">位置：/root</span><br><span class="line">命令：find /root -name &apos;ins*&apos;</span><br></pre></td></tr></table></figure><h3 id="3-4、文档编辑命令"><a href="#3-4、文档编辑命令" class="headerlink" title="3.4、文档编辑命令"></a>3.4、文档编辑命令</h3><p>Windows是有记事本<br>Linux也有类似的记事本功能 VIM编辑器</p><h4 id="VI-编辑"><a href="#VI-编辑" class="headerlink" title="VI 编辑"></a><em>VI</em> 编辑</h4><p>1.操作：</p><ul><li>输入 vi 文件名 进入 “命令(一般)模式”</li><li>按下 “i” 从一般模式，进入“插入模式”</li><li>按下 “esc” 从“插入模式”退出到“一般模式”</li><li>在“一般模式”下，输入 “:wq”，退出编辑</li></ul><h4 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h4><p>1.操作</p><ul><li>输入 vim 文件名 或 vi 文件名 进入 “一般模式”</li><li>按下 “i” 从一般模式，进入“插入模式”</li><li>按下 “esc” 从“插入模式”退出到“一般模式”</li><li>在“一般模式”下，输入 “:wq”，退出编辑</li></ul><p>2.</p><ul><li><p>一般(命令)模式:</p><ul><li>可以浏览文件内容，可以进行文本快捷操作（单行复制，多行复制，单行删除，多行删除…）</li><li>按 i/a/o 可以切换到 插入模式<br>按 : 可以切换到 底行模式</li></ul></li><li><p>插入模式：</p><ul><li>可以编辑文件内容。</li><li>按 ESC 可以切回 一般模式</li></ul></li><li><p>底行模式：</p><ul><li>可以进行强制退出不保存操作 q!</li><li>可以进行保存并退出操作 wq</li></ul></li></ul><h2 id="3-5、压缩、解压命令【重要】"><a href="#3-5、压缩、解压命令【重要】" class="headerlink" title="3.5、压缩、解压命令【重要】"></a>3.5、压缩、解压命令【重要】</h2><p>Linux常见压缩包： .tar 打包，大小不会进行压缩<br> .tar.gz 打包并压缩文件大小</p><p>2.压缩：（参数顺序不变）</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">tar -zcvf 压缩包名字.tar.gz 需要压缩的内容</span><br><span class="line"># 参数</span><br><span class="line">-z 是否需要用 gzip 压缩</span><br><span class="line">-c 建立一个压缩文件的参数指令（create）--压缩</span><br><span class="line">-v 压缩的过程中显示文件（verbose）</span><br><span class="line">-f 使用档案名称，在 f 之后要立即接档名（file）</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：tar -zcvf hehe.tar.gz *   将当前目录下所有内容进行打包压缩，文件名hehe.tar.gz</span><br></pre></td></tr></table></figure><p>3.解压（参数顺序不变）</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 解压到当前目录</span><br><span class="line">tar -zxvf 需要解压的压缩包名称 解压到当前目录</span><br><span class="line"># 解压到指定目录</span><br><span class="line">tar -zxvf 需要解压的压缩包名称 -C 指定压缩路径  解压到指定目录中</span><br><span class="line"># 参数</span><br><span class="line">-z 是否需要用 gzip 压缩</span><br><span class="line">-x 解开一个压缩文件的参数指令（extract）--解压</span><br><span class="line">-v 压缩的过程中显示文件（verbose）</span><br><span class="line">-f 使用档名，在 f 之后要立即接档名（file）</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需求：需要把/root/t5/hehe.tar.gz  压缩包 解压到 指定目录中。指定目录/root/t5/t5</span><br><span class="line">位置：/root/t5</span><br><span class="line">命令：tar -zxvf hehe.tar.gz -C /root/t5/t5</span><br><span class="line">tar -zxvf hehe.tar.gz -C t5</span><br></pre></td></tr></table></figure><h3 id="3-6、系统命令"><a href="#3-6、系统命令" class="headerlink" title="3.6、系统命令"></a>3.6、系统命令</h3><h4 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h4><p>服务，是指常期运行，常驻内存中的进程，比如，apache、mysql、ssh等。</p><p>服务与端口</p><p>每个服务软件一般在运行时都会对应一个端口。<br>查看监听的端口：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss –lntp</span><br></pre></td></tr></table></figure><h4 id="查看同进程：ps-ef"><a href="#查看同进程：ps-ef" class="headerlink" title="查看同进程：ps -ef"></a>查看同进程：ps -ef</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需求：查看进程中 和 vim相关的进程</span><br><span class="line">命令：ps -ef|grep -i vim</span><br><span class="line"> </span><br><span class="line">-e 　此参数的效果和指定&quot;A&quot;参数相同，显示所有程序</span><br><span class="line">-f 　显示UID,PPIP,C与STIME栏位</span><br></pre></td></tr></table></figure><h4 id="强制杀死某个进程：kill-9-pid号"><a href="#强制杀死某个进程：kill-9-pid号" class="headerlink" title="强制杀死某个进程：kill -9 pid号"></a>强制杀死某个进程：kill -9 pid号</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需求：查看进程 和 vim相关的进程有哪些，并将vim进程杀死</span><br><span class="line">命令：ps -ef|grep -i vim</span><br><span class="line">     Kill -9 pid号</span><br><span class="line"> </span><br><span class="line">-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称</span><br><span class="line">kill 9 表示强制终止</span><br></pre></td></tr></table></figure><ol><li>查看网络配置：ifconfig<ul><li>显示网络设备</li></ul></li><li>测试和目标的连通性：ping 主机名或ip地址<ul><li>测试与目标主机的连通性</li><li>会持续不断一直测试，直到ctrl+c</li></ul></li><li>Linux centos重启命令：reboot</li><li>Linux centos关机命令：halt</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu_基础应用篇</title>
      <link href="/AngelNI.github.io/ubuntu-beauty/"/>
      <url>/AngelNI.github.io/ubuntu-beauty/</url>
      
        <content type="html"><![CDATA[<p>【转载】分享给那些喜欢Linux ，喜欢Ubuntu的小伙伴。<a id="more"></a></p><h5 id="此文章为转载文章，转载请著名出处-http-blog-csdn-net-gatieme"><a href="#此文章为转载文章，转载请著名出处-http-blog-csdn-net-gatieme" class="headerlink" title="此文章为转载文章，转载请著名出处 @http://blog.csdn.net/gatieme"></a><strong>此文章为转载文章，转载请著名出处 @<a href="http://blog.csdn.net/gatieme" target="_blank" rel="noopener">http://blog.csdn.net/gatieme</a></strong></h5><p>非常感谢原作者的分享和<a href="https://blog.csdn.net/gatieme" target="_blank" rel="noopener">AderStep</a>对这些美味食物的整理。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><table><thead><tr><th align="center"><strong>链接</strong></th></tr></thead><tbody><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44856359" target="_blank" rel="noopener">安装Ubuntu后必须要做的几件事(一)–基础应用篇</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44917753" target="_blank" rel="noopener">安装Ubuntu后必须要做的几件事（二）–开发工具篇</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/52144603" target="_blank" rel="noopener">终端的乐趣–Linux下有趣的终端命令或者工具</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/52137359" target="_blank" rel="noopener">Ubuntu使用apt-file解决库或者文件缺失依赖</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/52136411" target="_blank" rel="noopener">Ubuntu切换默认sh为bash或者dash</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51959654" target="_blank" rel="noopener">Linux下几款C++程序中的内存泄露检查工具</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51935302" target="_blank" rel="noopener">解决ubuntu无法调整和保存屏幕亮度的问题</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51901396" target="_blank" rel="noopener">Ubuntu安装Microsoft Windows Fonts微软字体库</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51883981" target="_blank" rel="noopener">解决Windows与Ubuntu双系统时间同步问题</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51873716" target="_blank" rel="noopener">Ubuntu安装图片处理工具GIMP及其插件</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51892884" target="_blank" rel="noopener">21款最佳Linux命令行终端工具</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51673229" target="_blank" rel="noopener">两台Linux系统之间传输文件的几种方法</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51671430" target="_blank" rel="noopener">使用gdb调试程序完全教程</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51656707" target="_blank" rel="noopener">linux下man手册的安装和使用</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51353648" target="_blank" rel="noopener">Linux下查看并下载命令源码包（根据命令/应用程序逆向获取并且安装其所属源码包）</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51298855" target="_blank" rel="noopener">如何参与linux内核开发</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51150115" target="_blank" rel="noopener">linux 如何显示一个文件的某几行(中间几行)</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/51100755" target="_blank" rel="noopener">Git中的AutoCRLF与SafeCRLF换行符问题</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50991584" target="_blank" rel="noopener">linux环境中英文切换配置以及乱码问题</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50988902" target="_blank" rel="noopener">linux下使用ccat让你的cat高亮显示</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50962554" target="_blank" rel="noopener">怎么判断你的linux系统是不是运行在虚拟机器上面</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50927084" target="_blank" rel="noopener">Linux下管理用户的命令大全</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50922523" target="_blank" rel="noopener">Linux软连接和硬链接</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50912910" target="_blank" rel="noopener">Linux性能测试工具-UnixBench–安装以及结果分析</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50847758" target="_blank" rel="noopener">CodeBlocks最全官方配色方案</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50603682" target="_blank" rel="noopener">C/C++log日志库比较</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50586857" target="_blank" rel="noopener">Centos5.x/Linux下升级python到python2.7版本教程</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50541714" target="_blank" rel="noopener">几款xshell绝佳配色方案</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/50198613" target="_blank" rel="noopener">VS2012插件推荐</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/49301037" target="_blank" rel="noopener">linux下的终端利器—-tmux</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44875923" target="_blank" rel="noopener">Ubuntu下Sublime Text 3解决无法输入中文的方法</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/49101227" target="_blank" rel="noopener">使用trash-cli避免误删文件–为rm增加回收站功能</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/48555711" target="_blank" rel="noopener">Ubuntu安装Python的包管理工具Pip</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45310493" target="_blank" rel="noopener">Ubuntu安装配置串口通讯工具minicom&amp;&amp;cutecom</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45268549" target="_blank" rel="noopener">Ubuntu编译安装llvm-clang</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/47302829" target="_blank" rel="noopener">搜索引擎收录大全</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44921525" target="_blank" rel="noopener">Ubuntu安装深度音乐&amp;&amp;深度影音</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/47060195" target="_blank" rel="noopener">Vimium-Geek是这样上网的[Chrome–插件]</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/46330683" target="_blank" rel="noopener">几款好的markdown编辑器</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/46228861" target="_blank" rel="noopener">Windows&amp;&amp;Linux双系统引导项修复问题汇总</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/46227661" target="_blank" rel="noopener">安装CentOS时误将将引导项写入U盘后的修复</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44651147" target="_blank" rel="noopener">Linux操作系统中，<em>.zip、</em>.tar、<em>.tar.gz、</em>.tar.bz2、<em>.tar.xz、</em>.jar、*.7z等格式的压缩与解压</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/46005863" target="_blank" rel="noopener">Chrome浏览器护眼插件</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45937391" target="_blank" rel="noopener">Google搜索技巧终极收集</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45920127" target="_blank" rel="noopener">世界上最神奇的网站收录–不是最无聊就是最有意思</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45917173" target="_blank" rel="noopener">Python模块之命令行解析工具-argparse</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45896259" target="_blank" rel="noopener">GNOME下设置应用程序图标</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45766561" target="_blank" rel="noopener">git 删除右键菜单项</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45725863" target="_blank" rel="noopener">个性化您的Ubuntu Linux终端</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45674367" target="_blank" rel="noopener">Python判断当前操作系统类型以及os/sys/platform模块简介</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45439671" target="_blank" rel="noopener">Python实现设置终端显示颜色、粗体、下划线等效果</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45648167" target="_blank" rel="noopener">Python程序在Windows终端乱码解决方法</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45268041" target="_blank" rel="noopener">发现的更强大的vim配置信息</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45251821" target="_blank" rel="noopener">Ubuntu禁止mysql开机启动</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45251389" target="_blank" rel="noopener">Ubuntu下使用sysv-rc-conf管理服务</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45250451" target="_blank" rel="noopener">使用Vundle管理Vim插件</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/43883261" target="_blank" rel="noopener">Vim的安装与配置</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/45033349" target="_blank" rel="noopener">push到github时，每次都要输入用户名和密码的问题</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44983831" target="_blank" rel="noopener">Ubuntu安装配置mysql</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44977487" target="_blank" rel="noopener">盘点Linux下的开源云平台&amp;&amp;云存储服务</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44875727" target="_blank" rel="noopener">Ubuntu下安装GTK库</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44857603" target="_blank" rel="noopener">Linux下查看系统信息命令</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44856453" target="_blank" rel="noopener">Ubuntu更新软件源</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44809753" target="_blank" rel="noopener">linux命令行界面（CLI）浏览器</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44807105" target="_blank" rel="noopener">Linux下使用unzip解压缩中文乱码问题</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/44782801" target="_blank" rel="noopener">Linux下的下载工具介绍—-aria2</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/43889489" target="_blank" rel="noopener">vim 树形目录插件NERDTree安装</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/43371901" target="_blank" rel="noopener">urllib2模块之异常处理</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/43198505" target="_blank" rel="noopener">Python第三方库</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/43118171" target="_blank" rel="noopener">Sublime text 3设置用用空格替换tab键</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/42914393" target="_blank" rel="noopener">几款好的C/C++编译器（编译器而非IDE）</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/42807141" target="_blank" rel="noopener">Sublime Text 3配置Windows下C/C++编译环境</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/42744663" target="_blank" rel="noopener">Sublime Text[崇高文本]—-最性感的编辑器（程序员必备）</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/42706897" target="_blank" rel="noopener">WingIDE安装和破解（Python开发利器）</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/22181635" target="_blank" rel="noopener">Linux设置nfs共享目录</a></td></tr><tr><td align="center"><a href="http://blog.csdn.net/gatieme/article/details/21783119" target="_blank" rel="noopener">让你的python程序开机自启动</a></td></tr><tr><td align="center"><a href="https://blog.csdn.net/gatieme/article/details/25975465" target="_blank" rel="noopener">Linux环境设置</a></td></tr></tbody></table><p>喜欢linux的小伙伴快来，加入这个有趣的生态圈。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双栈实现计算器</title>
      <link href="/AngelNI.github.io/data-structure/"/>
      <url>/AngelNI.github.io/data-structure/</url>
      
        <content type="html"><![CDATA[<p>愿我们能与最好的自己相遇。<a id="more"></a></p><h1 id="双栈实现计算器"><a href="#双栈实现计算器" class="headerlink" title="双栈实现计算器"></a>双栈实现计算器</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; OPND;</span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; OPRT;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">precede</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">operate</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">string</span> str;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t--------------------------------------------\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t--------------双栈实现简易计算器------------\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t------------------欢迎您使用----------------\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|                  计算器                  |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              ----------------            |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              |              |            |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              ----------------            |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              1    2    3   +             |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              4    5    6   -             |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              7    8    9   *             |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t|              0   （    ）  /             |\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t--------------------------------------------\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t 请输入一个用#开头和结尾的表达式：\n"</span>);</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;str;</span><br><span class="line">    calculate(str);</span><br><span class="line">    getchar();</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//运算符优先级判断 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">precede</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (x == <span class="hljs-string">'+'</span> || x == <span class="hljs-string">'-'</span>)  </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-string">'*'</span> || x == <span class="hljs-string">'/'</span>)  </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-string">'('</span> || x == <span class="hljs-string">')'</span>)  </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-string">'#'</span>)  </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//二元运算 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operate</span><span class="hljs-params">(<span class="hljs-keyword">char</span> top)</span></span></span><br><span class="line"><span class="hljs-function"> </span>&#123;</span><br><span class="line"> <span class="hljs-keyword">int</span> a = OPND.top(); </span><br><span class="line">    OPND.pop();</span><br><span class="line">    <span class="hljs-keyword">int</span> b = OPND.top(); </span><br><span class="line">OPND.pop();</span><br><span class="line"><span class="hljs-keyword">int</span> c;</span><br><span class="line"></span><br><span class="line"> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'+'</span>) </span><br><span class="line"> &#123;  </span><br><span class="line">        b += a;  </span><br><span class="line">        OPND.push(b);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'-'</span>)</span><br><span class="line">&#123;  </span><br><span class="line">        b -= a;  </span><br><span class="line">        OPND.push(b);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'*'</span>) </span><br><span class="line">&#123;  </span><br><span class="line">        b *= a;  </span><br><span class="line">        OPND.push(b);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top == <span class="hljs-string">'/'</span>) </span><br><span class="line">&#123;  </span><br><span class="line">        b /= a;  </span><br><span class="line">        OPND.push(b);  </span><br><span class="line">    &#125;   </span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-comment">//读取表达式 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a,b;</span><br><span class="line">    <span class="hljs-keyword">char</span> top;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-comment">//判断是否为数字 </span></span><br><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-built_in">string</span> number;</span><br><span class="line">            number += s[i];</span><br><span class="line">            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(s[++i]))</span><br><span class="line">            &#123;</span><br><span class="line">                number += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;number.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                    num = num*<span class="hljs-number">10</span> +number[j] - <span class="hljs-number">48</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            OPND.push(num);</span><br><span class="line">            number.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">//对操作符的操作 </span></span><br><span class="line">        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isdigit</span>(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(OPRT.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                OPRT.push(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                top = OPRT.top();</span><br><span class="line">                <span class="hljs-keyword">if</span>(precede(s[i])&gt;precede(top) || s[i] == <span class="hljs-string">'('</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    OPRT.push(s[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">while</span>(precede(s[i])&lt;=precede(top))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(top==<span class="hljs-string">'#'</span>&amp;&amp;s[i]==<span class="hljs-string">'#'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            OPRT.pop();</span><br><span class="line">                            <span class="hljs-keyword">int</span> ans = OPND.top();</span><br><span class="line">                            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"The answer is :"</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">                            OPND.pop();</span><br><span class="line">                            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(top==<span class="hljs-string">'('</span>&amp;&amp;s[i]==<span class="hljs-string">')'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ++i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">operate(top);</span><br><span class="line">                        &#125; </span><br><span class="line"> OPRT.pop(); </span><br><span class="line">                         top = OPRT.top();              </span><br><span class="line">                    &#125;</span><br><span class="line">                    OPRT.push(s[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/10/07/uR2CLQ.png" alt="uR2CLQ.png" border="0"><img src="https://s2.ax1x.com/2019/10/07/uR2iZj.png" alt="uR2iZj.png" border="0"><img src="https://s2.ax1x.com/2019/10/07/uR29sg.png" alt="uR29sg.png" border="0">]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr+Github建立免费CDN</title>
      <link href="/AngelNI.github.io/jsDelivr-Github/"/>
      <url>/AngelNI.github.io/jsDelivr-Github/</url>
      
        <content type="html"><![CDATA[<p>我喜欢你。</p><a id="more"></a><h1 id="1-CDN"><a href="#1-CDN" class="headerlink" title="1.CDN"></a>1.CDN</h1><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><h1 id="2-步骤方法"><a href="#2-步骤方法" class="headerlink" title="2.步骤方法"></a>2.步骤方法</h1><h2 id="1-新建github仓库"><a href="#1-新建github仓库" class="headerlink" title="1.新建github仓库"></a>1.新建github仓库</h2><img src="https://s2.ax1x.com/2019/10/06/ugJ2Yq.png" alt="ugJ2Yq.png" border="0"><h2 id="2-克隆Github仓库到本地"><a href="#2-克隆Github仓库到本地" class="headerlink" title="2.克隆Github仓库到本地"></a>2.克隆Github仓库到本地</h2><p>点击 Clone or download，一键复制仓库地址</p><img src="https://s2.ax1x.com/2019/10/06/ugJ46U.png" alt="ugJ46U.png" border="0"><h2 id="3-上传资源"><a href="#3-上传资源" class="headerlink" title="3.上传资源"></a>3.上传资源</h2><p>可参考这边博客<a href="https://angelni.github.io/AngelNI.github.io/untitled/">https://angelni.github.io/AngelNI.github.io/untitled/</a></p><h2 id="4-发布仓库"><a href="#4-发布仓库" class="headerlink" title="4.发布仓库"></a>4.发布仓库</h2><img src="https://s2.ax1x.com/2019/10/06/ugtm26.png" alt="ugtm26.png" border="0"><p>自定义发布版本号</p><img src="https://s2.ax1x.com/2019/10/06/ugtNxf.png" alt="ugtNxf.png" border="0"><h2 id="5、通过jsDelivr引用资源"><a href="#5、通过jsDelivr引用资源" class="headerlink" title="5、通过jsDelivr引用资源"></a>5、通过jsDelivr引用资源</h2><p>使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a></p><p>希望这篇博客对您有帮助~</p>]]></content>
      
      
      <categories>
          
          <category> jsDelivr+Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My-World</title>
      <link href="/AngelNI.github.io/My-World/"/>
      <url>/AngelNI.github.io/My-World/</url>
      
        <content type="html"><![CDATA[<p>我叫MC~~<a id="more"></a></p><p>最近喜欢上玩我的世界，有没有一起的。</p><p>光影，不敢开，我怕我的显卡被拎去烤鸡蛋，以至于自己搭的和想象中的有点不一样，emmm，就那么一点点点。</p><img src="https://s2.ax1x.com/2019/10/06/ugBTBV.png" alt="ugBTBV.png" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugBbAU.png" alt="ugBbAU.png" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugB77T.png" alt="ugB77T.png" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugBon0.png" alt="ugBon0.png" border="0">]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>termux</title>
      <link href="/AngelNI.github.io/termux/"/>
      <url>/AngelNI.github.io/termux/</url>
      
        <content type="html"><![CDATA[<p>快到我的碗里来，不，是怀里。<a id="more"></a></p><h1 id="termux"><a href="#termux" class="headerlink" title="termux"></a>termux</h1><p>分享一个超好用的手机命令行高级终端软件termux，强大的安卓手机渗透工具，没有之一。</p><p><code>termux</code>是一个<code>Android</code>下一个高级的终端模拟器,开源且不需要<code>root</code>,支持<code>apt</code>管理软件包，十分方便安装软件包,完美支持<code>Python</code>,<code>PHP</code>,<code>Ruby</code>,<code>Go</code>,<code>Nodejs</code>,<code>MySQL</code>等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准,用心去打造完全可以把手机变成一个强大的工具.</p><ul><li><a href="https://termux.com/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/termux/termux-app" target="_blank" rel="noopener">Github项目地址</a></li><li><a href="https://play.google.com/store/apps/details?id=com.termux" target="_blank" rel="noopener">Google Play下载地址</a></li></ul><p>如果想你学习linux基本操作指令，不想通过费事的虚拟机，那就请选择termux；</p><p>如果你想简单而快速链接服务器，轻巧的使用openssh，请毫不犹豫的选择termux；</p><p>如果你想成为一个黑客，正愁缺少工具，那就立刻马上选择termux，为您提供nmap端口扫描，hydra密码暴力破解，SQLmap漏洞检测及注入等必备的工具。</p><p>在当今智能手机快速发展的今天，手机已经逐渐实现了电脑的许多功能，有没有想过在手机上搭建hexo博客，发表博文，有没有想过用手机去运行AI程序，是不是更不敢想利用手机网络渗透了。这一切都已经在手机上已经实现，你没有听错。在我看来，一个更便捷的世界即将到来，到那时也许连拿笔记本电脑都觉得费事，所有的一切通过手机和ipad就可以实现你想要的效果。</p><p>否恩和艾派德的完美组合值得期待。</p><p>最后在这里推荐一篇非常好的博文减少termux 的使用教程及我的一些操作截图。</p><p><a href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-31" target="_blank" rel="noopener">termux使用教程</a></p><img src="https://s2.ax1x.com/2019/10/06/ugd2tJ.jpg" alt="ugd2tJ.jpg" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugd67F.jpg" alt="ugd67F.jpg" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugdsmT.jpg" alt="ugdsmT.jpg" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugdgk4.jpg" alt="ugdgk4.jpg" border="0"><img src="https://s2.ax1x.com/2019/10/06/ugdy0U.jpg" alt="ugdy0U.jpg" border="0">]]></content>
      
      
      <categories>
          
          <category> sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程操作仓库</title>
      <link href="/AngelNI.github.io/untitled/"/>
      <url>/AngelNI.github.io/untitled/</url>
      
        <content type="html"><![CDATA[<p>如果我在勇敢点，结果会不会比想象中的要好。<a id="more"></a></p><p>Git是一个开源的分布式版本控制系统，分布式相比集中式的最大区别是Git没有“中央服务器”，每位开发者都可以通过克隆（git clone）远程库，在本地机器上存储一个完整的Git仓库，还可以把代码的修改提交到本地库。当然了，本地库修改完成后也可以上传到远程仓库，操作方便。</p><p>在学习git的操作方法，总是偶然的上传成功。这次不一样了，向大家介绍每一步的操作流程和成功案例。</p><ul><li>git clone + “要克隆的仓库地址链接”</li></ul><img src="https://s2.ax1x.com/2019/10/02/uaQlmd.png" alt border="0"><p>克隆之后对仓库文件进行处理，添加或删除，修改或重写。</p><ul><li>进入以克隆的文件夹，并执行 git init初始化</li></ul><img src="https://s2.ax1x.com/2019/10/02/uaQskq.png" alt border="0"><ul><li>git add * 将所有文件添加到缓存</li><li>git pull + “文件储存的绝对路径”</li><li>git commit -m +”备注”</li><li>git remote add “备注” +”仓库链接（也是克隆的链接地址）”</li><li>最后，git push 静静等待，操作成功。</li></ul><p>如果你顺利完成了以上步骤，那么就要恭喜你了，已经成功上传到github仓库。其他储存仓库操作步骤类似。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现汉诺塔移动可视化</title>
      <link href="/AngelNI.github.io/hanoi/"/>
      <url>/AngelNI.github.io/hanoi/</url>
      
        <content type="html"><![CDATA[<p>想来一趟说走就走的旅行，没有手机，没有联系方式，独身一人，目标——你在的地方。<a id="more"></a></p><p>之前老师在课堂上展示了用C实现汉诺塔的可视化移动过程，觉得挺好玩的，下面就让你看看Python是如何实现的，放图。</p><img src="https://s2.ax1x.com/2019/09/24/uFWfs0.png" alt border="0"><p>好了，下面就是实现的代码了。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> turtle</span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> len(self.items) == <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, item)</span>:</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.items.pop()</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">peek</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.isEmpty():</span><br><span class="line">            <span class="hljs-keyword">return</span> self.items[len(self.items) - <span class="hljs-number">1</span>]</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">size</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> len(self.items)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawpole_3</span><span class="hljs-params">()</span>:</span><span class="hljs-comment">#画出汉诺塔的poles</span></span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    t.hideturtle()</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawpole_1</span><span class="hljs-params">(k)</span>:</span></span><br><span class="line">        t.up()</span><br><span class="line">        t.pensize(<span class="hljs-number">10</span>)</span><br><span class="line">        t.speed(<span class="hljs-number">100</span>)</span><br><span class="line">        t.goto(<span class="hljs-number">400</span>*(k<span class="hljs-number">-1</span>), <span class="hljs-number">100</span>)</span><br><span class="line">        t.down()</span><br><span class="line">        t.goto(<span class="hljs-number">400</span>*(k<span class="hljs-number">-1</span>), <span class="hljs-number">-100</span>)</span><br><span class="line">        t.goto(<span class="hljs-number">400</span>*(k<span class="hljs-number">-1</span>)<span class="hljs-number">-20</span>, <span class="hljs-number">-100</span>)</span><br><span class="line">        t.goto(<span class="hljs-number">400</span>*(k<span class="hljs-number">-1</span>)+<span class="hljs-number">20</span>, <span class="hljs-number">-100</span>)</span><br><span class="line">    drawpole_1(<span class="hljs-number">0</span>)<span class="hljs-comment">#画出汉诺塔的poles[0]</span></span><br><span class="line">    drawpole_1(<span class="hljs-number">1</span>)<span class="hljs-comment">#画出汉诺塔的poles[1]</span></span><br><span class="line">    drawpole_1(<span class="hljs-number">2</span>)<span class="hljs-comment">#画出汉诺塔的poles[2]</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">creat_plates</span><span class="hljs-params">(n)</span>:</span><span class="hljs-comment">#制造n个盘子</span></span><br><span class="line">    plates=[turtle.Turtle() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n)]</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):</span><br><span class="line">        plates[i].up()</span><br><span class="line">        plates[i].hideturtle()</span><br><span class="line">        plates[i].shape(<span class="hljs-string">"square"</span>)</span><br><span class="line">        plates[i].color(<span class="hljs-string">"blue"</span>)</span><br><span class="line">        plates[i].shapesize(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>-i)</span><br><span class="line">        plates[i].goto(<span class="hljs-number">-400</span>,<span class="hljs-number">-90</span>+<span class="hljs-number">20</span>*i)</span><br><span class="line">        plates[i].showturtle()</span><br><span class="line">    <span class="hljs-keyword">return</span> plates</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pole_stack</span><span class="hljs-params">()</span>:</span><span class="hljs-comment">#制造poles的栈</span></span><br><span class="line">    poles=[Stack() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>)]</span><br><span class="line">    <span class="hljs-keyword">return</span> poles</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moveDisk</span><span class="hljs-params">(plates,poles,fp,tp)</span>:</span><span class="hljs-comment">#把poles[fp]顶端的盘子plates[mov]从poles[fp]移到poles[tp]</span></span><br><span class="line">    mov=poles[fp].peek()</span><br><span class="line">    plates[mov].goto((fp<span class="hljs-number">-1</span>)*<span class="hljs-number">400</span>,<span class="hljs-number">150</span>)</span><br><span class="line">    plates[mov].goto((tp<span class="hljs-number">-1</span>)*<span class="hljs-number">400</span>,<span class="hljs-number">150</span>)</span><br><span class="line">    l=poles[tp].size()<span class="hljs-comment">#确定移动到底部的高度（恰好放在原来最上面的盘子上面）</span></span><br><span class="line">    plates[mov].goto((tp<span class="hljs-number">-1</span>)*<span class="hljs-number">400</span>,<span class="hljs-number">-90</span>+<span class="hljs-number">20</span>*l)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moveTower</span><span class="hljs-params">(plates,poles,height,fromPole, toPole, withPole)</span>:</span><span class="hljs-comment">#递归放盘子</span></span><br><span class="line">    <span class="hljs-keyword">if</span> height &gt;= <span class="hljs-number">1</span>:</span><br><span class="line">        moveTower(plates,poles,height<span class="hljs-number">-1</span>,fromPole,withPole,toPole)</span><br><span class="line">        moveDisk(plates,poles,fromPole,toPole)</span><br><span class="line">        poles[toPole].push(poles[fromPole].pop())</span><br><span class="line">        moveTower(plates,poles,height<span class="hljs-number">-1</span>,withPole,toPole,fromPole)</span><br><span class="line">myscreen=turtle.Screen()</span><br><span class="line">drawpole_3()</span><br><span class="line">n=int(input(<span class="hljs-string">"请输入汉诺塔的层数并回车:\n"</span>))</span><br><span class="line">plates=creat_plates(n)</span><br><span class="line">poles=pole_stack()</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):</span><br><span class="line"></span><br><span class="line">    poles[<span class="hljs-number">0</span>].push(i)</span><br><span class="line">moveTower(plates,poles,n,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)</span><br><span class="line">myscreen.exitonclick()</span><br></pre></td></tr></table></figure><p>就是这样，因为对玩感兴趣，就去实现，明明很简单的目标，你却发现你创造了整个世界。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补）-5</title>
      <link href="/AngelNI.github.io/learn-5/"/>
      <url>/AngelNI.github.io/learn-5/</url>
      
        <content type="html"><![CDATA[<p>遇见你我花光了所有的运气，以至于现在厄运连连。<a id="more"></a></p><h1 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h1><p>DFS全称Deep First Search，是一种遍历或搜索树或图的算法。在解决问题上，利用递归调用自身函数（这种说法好像不正确，领悟思想就好了）来实现搜索的目的。把一个事情拆解成若干个小事，来实现最终的问题。</p><p>学好DFS，一定要领悟递归函数之美。下面就直接上题来理解了。</p><h2 id="1-放苹果"><a href="#1-放苹果" class="headerlink" title="1.放苹果"></a>1.放苹果</h2><p><a href="http://poj.org/problem?id=1664" target="_blank" rel="noopener">POJ1664</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。</p><p>Input</p><p>第一行是测试数据的数目t（0 &lt;= t &lt;= 20）。以下每行均包含二个整数M和N，以空格分开。1&lt;=M，N&lt;=10。</p><p>Output</p><p>对输入的每组数据M和N，用一行输出相应的K。</p><p>Sample Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">7 3</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><p>1.有空盘子：举个栗子吧。3个苹果放到5个盘子的方法总数和3个苹果放到3个盘子的方法总数是相等的。</p><p>2.没有空盘子：没有空盘子，我们可以看成先给每一个盘子放一个苹果，还剩下m-n个苹果。然后问题就变成了把m-n个苹果放到n个盘子里的问题了，也许有人会问，m-n个苹果放到n个盘子也会出现空盘子的情况啊，不是和前面的有空盘子重复了？的确，会出现空盘子的情况，但是，他们并不是真的空盘子，因为他们最开始已经放了一个，他们在这里的空代表着这个盘子只有最开始放的一个苹果。</p><p>因此：</p><p>​            f(m,n)=f(m,n-1)+f(m-n,n)       m&gt;=n                  </p><p>​            f(m,n)=f(m,m)                        m&lt;n</p><p>递归结束条件：结束条件并不是很难发现，当只有一个盘子时明显只有一种方法，另外没有苹果和只有一个苹果的时候也只有一种放法。即f(m,n)=1      n=1,m=0</p><p>综上所述：</p><p>f(m,n)=1                         n=1,m=0</p><p>f(m,n)=f(m,m)                m&lt;n</p><p>f(m,n)=f(m,n-1)+f(m-n,n)       m&gt;=n   </p><h3 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>||m==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(n&gt;m)</span><br><span class="line"><span class="hljs-keyword">return</span> dfs(m,m);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-keyword">return</span> dfs(m,n<span class="hljs-number">-1</span>)+dfs(m-n,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="hljs-keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m,n;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;dfs(m,n)&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-N皇后问题"><a href="#2-N皇后问题" class="headerlink" title="2.N皇后问题"></a>2.N皇后问题</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2553" target="_blank" rel="noopener">N皇后</a></p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>在N*N的方格棋盘放置了N个皇后，使得它们不相互攻击（即任意2个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成45角的斜线上。<br>你的任务是，对于给定的N，求出有多少种合法的放置方法。 </p><p>Input</p><p>共有若干行，每行一个正整数N≤10，表示棋盘和皇后的数量；如果N=0，表示结束。</p><p>Output</p><p>共有若干行，每行一个正整数，表示对应输入行的皇后的不同放置数量。</p><p>Sample Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br><span class="line">5</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">92</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>N皇后，比较经典的DFS的题。对每一个位置搜索，并判断位置是否合法，合法则继续向下进行。</p><p>因为时间限制，这道题用了打表的方法，记录每种可能下的结果值。具体请看代码。</p><h3 id="AC1"><a href="#AC1" class="headerlink" title="AC1"></a>AC1</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> ans[<span class="hljs-number">20</span>],pos[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> num,N;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> flag;<span class="hljs-comment">//判断标志</span></span><br><span class="line"><span class="hljs-keyword">if</span>(n == N+<span class="hljs-number">1</span>)<span class="hljs-comment">//结束标志</span></span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="hljs-keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= N;i++)</span><br><span class="line">&#123;</span><br><span class="line">pos[n] = i;<span class="hljs-comment">//将第n行第i列的位置下上旗子，保存位置</span></span><br><span class="line">flag = <span class="hljs-number">1</span>;<span class="hljs-comment">//此位置以有棋子</span></span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">/*判断棋子是否合法*/</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;n;j++)<span class="hljs-comment">//只需判断已下过棋子的位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(pos[j] == i || (<span class="hljs-built_in">abs</span>(n-j)) == <span class="hljs-built_in">abs</span>(pos[j] - i))<span class="hljs-comment">//判断同一列、对角线上是否有</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-comment">//合法则继续下一个</span></span><br><span class="line"><span class="hljs-keyword">if</span>(flag)</span><br><span class="line">dfs(n+<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(N =<span class="hljs-number">1</span>;N&lt;=<span class="hljs-number">11</span>;N++)</span><br><span class="line">&#123;</span><br><span class="line">num = <span class="hljs-number">0</span>;</span><br><span class="line">dfs(<span class="hljs-number">1</span>);</span><br><span class="line">ans[N] = num;<span class="hljs-comment">//记录结果值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;t&amp;&amp;t!=<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;ans[t]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC2"><a href="#AC2" class="headerlink" title="AC2"></a>AC2</h3><p>这是另外一个，相比于上一个，代码理解起来就容易多了。分为两个函数，一个是dfs函数，另一个是条件判断函数。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>],ans[<span class="hljs-number">20</span>],o;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;x;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i][y]==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=x<span class="hljs-number">-1</span>,j=y<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>&amp;&amp;j&gt;=<span class="hljs-number">0</span>;i--,j--)</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=x<span class="hljs-number">-1</span>,j=y+<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>&amp;&amp;j&lt;o;i--,j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x==o)</span><br><span class="line">&#123;</span><br><span class="line">ans[o]++;</span><br><span class="line">         <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;o;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(check(x,i))</span><br><span class="line">&#123;</span><br><span class="line">a[x][i]=<span class="hljs-number">1</span>;</span><br><span class="line">dfs(x+<span class="hljs-number">1</span>);</span><br><span class="line">a[x][i]=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(o=<span class="hljs-number">1</span>;o&lt;=<span class="hljs-number">10</span>;o++)</span><br><span class="line">&#123;</span><br><span class="line">dfs(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&amp;&amp;n!=<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="hljs-built_in">cout</span>&lt;&lt;ans[n]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-红与黑"><a href="#3-红与黑" class="headerlink" title="3.红与黑"></a>3.红与黑</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1312" target="_blank" rel="noopener">HDU1312</a></p><h3 id="Problem-Description-1"><a href="#Problem-Description-1" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles.</p><p>Write a program to count the number of black tiles which he can reach by repeating the moves described above. </p><p>Input</p><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.</p><p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.</p><p>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set) </p><p>Output</p><p>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself). </p><p>Sample Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">6 9</span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line">11 9</span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line">11 6</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">7 7</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45</span><br><span class="line">59</span><br><span class="line">6</span><br><span class="line">13</span><br></pre></td></tr></table></figure><p>这是一个搜图的问题，用DFS，恰到好处，只需判断是否满足条件就可以ans++，比较简单的一道，要注意输入哦（因为这wa了好久）</p><h3 id="AC-1"><a href="#AC-1" class="headerlink" title="AC"></a>AC</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> vis[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> w[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> x,y,xx,yy,xx1,yy1;</span><br><span class="line"><span class="hljs-keyword">int</span> ans;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">vis[x][y] = <span class="hljs-number">1</span>; </span><br><span class="line"><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>||y&lt;<span class="hljs-number">0</span>||x&gt;=xx||y&gt;=yy)</span><br><span class="line"><span class="hljs-keyword">return</span> ;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> dx = x+w[i][<span class="hljs-number">0</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> dy = y+w[i][<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">if</span>(dx&gt;=<span class="hljs-number">0</span>&amp;&amp;dy&gt;=<span class="hljs-number">0</span>&amp;&amp;dx&lt;xx&amp;&amp;dy&lt;yy&amp;&amp;a[dx][dy]!=<span class="hljs-string">'#'</span>&amp;&amp;vis[dx][dy]==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">dfs(dx,dy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;yy,&amp;xx)&amp;&amp;xx&amp;&amp;yy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">ans = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;xx;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;yy;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">'@'</span>)</span><br><span class="line">&#123;</span><br><span class="line">xx1 = i;</span><br><span class="line">yy1 = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(xx1,yy1);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Link list achieve Phone_Contacts</title>
      <link href="/AngelNI.github.io/datastruct-1/"/>
      <url>/AngelNI.github.io/datastruct-1/</url>
      
        <content type="html"><![CDATA[<p>你是我听过最美的童话。<a id="more"></a></p><p>最近，数据结构可上学习了链表线性表，并且用线性表实现了简单的手机通讯录，并用C语言和python语言都实现了，基本理论是一样的，贵在实践。记录一下~</p><h1 id="Pyhthon-实现"><a href="#Pyhthon-实现" class="headerlink" title="Pyhthon 实现"></a>Pyhthon 实现</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,old,telephone,email)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.old = old</span><br><span class="line">        self.telephone = telephone</span><br><span class="line">        self.email = email</span><br><span class="line">        self.next = <span class="hljs-literal">None</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">phone_list</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.head = Node(<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>)</span><br><span class="line">        self.len = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-comment">##  新建初始化 ##</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        a = input(<span class="hljs-string">"请输入姓名："</span>)</span><br><span class="line">        <span class="hljs-keyword">while</span>(len(a) &gt; <span class="hljs-number">4</span>):</span><br><span class="line">            print(<span class="hljs-string">"输入错误！请重新输入（姓名长度不得超过4）。"</span>)</span><br><span class="line">            a = input(<span class="hljs-string">"请输入姓名："</span>)</span><br><span class="line">        b = input(<span class="hljs-string">"请输入年龄："</span>)</span><br><span class="line">        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> int(b)&gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> int(b)&lt;=<span class="hljs-number">100</span>:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            print(<span class="hljs-string">"输入错误！请重新输入（年龄范围：1~100）。"</span>)</span><br><span class="line">            b = eval(input(<span class="hljs-string">"请输入年龄："</span>))</span><br><span class="line">        c = input(<span class="hljs-string">"请输入电话："</span>)</span><br><span class="line">        <span class="hljs-keyword">while</span>(len(c) != <span class="hljs-number">11</span>):</span><br><span class="line">            print(<span class="hljs-string">"输入错误！请重新输入:"</span>)</span><br><span class="line">            c = input(<span class="hljs-string">"请输入电话："</span>)</span><br><span class="line">        d = str(input(<span class="hljs-string">"请输入邮箱："</span>))</span><br><span class="line">        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>):</span><br><span class="line">            flag = <span class="hljs-number">0</span></span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(d)):</span><br><span class="line">                <span class="hljs-keyword">if</span> (d[<span class="hljs-number">-4</span>:] ==<span class="hljs-string">".com"</span>) <span class="hljs-keyword">and</span> (d[i] ==<span class="hljs-string">"@"</span>):</span><br><span class="line">                    <span class="hljs-keyword">if</span> d[i+<span class="hljs-number">1</span>] != <span class="hljs-string">'.'</span>:</span><br><span class="line">                         flag = <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            print(<span class="hljs-string">"输入错误！请检查邮箱格式是否正确。"</span>)</span><br><span class="line">            d = input(<span class="hljs-string">"请输入邮箱："</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> a,b,c,d</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">creat_people</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        p =self.head</span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:</span><br><span class="line">            a,b,c,d= self.new_()</span><br><span class="line">            new_peo = Node(a,b,c,d)</span><br><span class="line">            self.len+=<span class="hljs-number">1</span></span><br><span class="line">            p.next = new_peo</span><br><span class="line">            p = p.next</span><br><span class="line">            b = eval(input(<span class="hljs-string">"是否继续添加？\n[1] 是[2] 否\n\n"</span>))</span><br><span class="line">            <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>):</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            <span class="hljs-keyword">elif</span>(b==<span class="hljs-number">2</span>):</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">    <span class="hljs-comment">##  遍历  ##</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan_people</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (self.len==<span class="hljs-number">0</span>):</span><br><span class="line">            print(<span class="hljs-string">"空无一人"</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        p = self.head</span><br><span class="line">        <span class="hljs-keyword">while</span>(p.next):</span><br><span class="line">            print(<span class="hljs-string">f"姓名：<span class="hljs-subst">&#123;p.next.name&#125;</span>,年龄：<span class="hljs-subst">&#123;p.next.old&#125;</span>,电话：<span class="hljs-subst">&#123;p.next.telephone&#125;</span>,邮件：<span class="hljs-subst">&#123;p.next.email&#125;</span>"</span>)</span><br><span class="line">            p = p.next</span><br><span class="line">    <span class="hljs-comment">##  尾插法 插入新的节点 ##</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_people</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        p = self.head</span><br><span class="line">        <span class="hljs-keyword">while</span>(p.next):</span><br><span class="line">            p = p.next</span><br><span class="line">        a,b,c,d = self.new_()</span><br><span class="line">        n_1 = Node(a,b,c,d)</span><br><span class="line">        self.len+=<span class="hljs-number">1</span></span><br><span class="line">        p.next = n_1</span><br><span class="line">        p = p.next</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_people</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (self.len==<span class="hljs-number">0</span>):</span><br><span class="line">            print(<span class="hljs-string">"空无一人"</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        a = input(<span class="hljs-string">"请输入你要查询人的名字："</span>)</span><br><span class="line">        p = self.head</span><br><span class="line">        <span class="hljs-keyword">while</span> (p.next):</span><br><span class="line">            <span class="hljs-keyword">if</span>(p.next.name==a):</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                p = p.next</span><br><span class="line">        print(<span class="hljs-string">"已找到！！!\n信息如下：\n"</span>)</span><br><span class="line">        print(<span class="hljs-string">f"姓名：<span class="hljs-subst">&#123;p.next.name&#125;</span>,年龄：<span class="hljs-subst">&#123;p.next.old&#125;</span>,电话：<span class="hljs-subst">&#123;p.next.telephone&#125;</span>,邮箱：<span class="hljs-subst">&#123;p.next.email&#125;</span>"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fix_people</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span>  self.len ==<span class="hljs-number">0</span>:</span><br><span class="line">            print(<span class="hljs-string">"空无一人"</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        a = input(<span class="hljs-string">"请输入你要修改人的名字："</span>)</span><br><span class="line">        p = self.head</span><br><span class="line">        <span class="hljs-keyword">while</span> (p.next):</span><br><span class="line">            <span class="hljs-keyword">if</span>(p.next.name==a):</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                p = p.next</span><br><span class="line">        b = eval(input(<span class="hljs-string">"请输入您要修改选项\n[1]姓名[2]年龄[3]电话[4]邮箱\n"</span>))</span><br><span class="line">        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>):</span><br><span class="line">            new_name = input(<span class="hljs-string">"请输入修改后的姓名\n"</span>)</span><br><span class="line">            p.next.name = new_name</span><br><span class="line">        <span class="hljs-keyword">elif</span>(b==<span class="hljs-number">2</span>):</span><br><span class="line">            new_old = input(<span class="hljs-string">"请输入修改后的年龄\n"</span>)</span><br><span class="line">            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> int(new_old)&gt;=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> int(new_old)&lt;=<span class="hljs-number">100</span>:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                print(<span class="hljs-string">"输入错误！请重新输入（年龄范围：1~100）。"</span>)</span><br><span class="line">                new_old = eval(input(<span class="hljs-string">"请重新输入年龄："</span>))</span><br><span class="line">            p.next.old = new_old</span><br><span class="line">        <span class="hljs-keyword">elif</span>(b==<span class="hljs-number">3</span>):</span><br><span class="line">            new_tele = input(<span class="hljs-string">"请输入电话："</span>)</span><br><span class="line">            <span class="hljs-keyword">while</span>(len(new_tele) != <span class="hljs-number">11</span>):</span><br><span class="line">                print(<span class="hljs-string">"输入错误！请重新输入:"</span>)</span><br><span class="line">                new_tele = input(<span class="hljs-string">"请输入电话："</span>)</span><br><span class="line">            p.next.old = new_tele</span><br><span class="line">        <span class="hljs-keyword">elif</span>(b==<span class="hljs-number">4</span>):</span><br><span class="line">            new_email = str(input(<span class="hljs-string">"请输入邮箱："</span>))</span><br><span class="line">            <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>):</span><br><span class="line">                flag = <span class="hljs-number">0</span></span><br><span class="line">                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(d)):</span><br><span class="line">                    <span class="hljs-keyword">if</span> (bew_email[<span class="hljs-number">-4</span>:] ==<span class="hljs-string">".com"</span>) <span class="hljs-keyword">and</span> (new_email[i] ==<span class="hljs-string">"@"</span>):</span><br><span class="line">                        <span class="hljs-keyword">if</span> d[i+<span class="hljs-number">1</span>] != <span class="hljs-string">'.'</span>:</span><br><span class="line">                             flag = <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                print(<span class="hljs-string">"输入错误！请检查邮箱格式是否正确。"</span>)</span><br><span class="line">                new_email = input(<span class="hljs-string">"请输入邮箱："</span>)</span><br><span class="line">            p.next.old = new_email</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_people</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.len == <span class="hljs-number">0</span>:</span><br><span class="line">            print(<span class="hljs-string">"空无一人"</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        a = input(<span class="hljs-string">"请输入您要删除人的姓名："</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span>(self.head.name == a):</span><br><span class="line">            self.head = self.head.next</span><br><span class="line">            self.len-=<span class="hljs-number">1</span></span><br><span class="line">        p = self.head</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">while</span>(p.next):</span><br><span class="line">            <span class="hljs-keyword">if</span>(p.next.name == a):</span><br><span class="line">                p.next = p.next.next</span><br><span class="line">                self.len-=<span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                p = p.next</span><br><span class="line">        <span class="hljs-keyword">if</span>(p.name == a):</span><br><span class="line">            p=<span class="hljs-literal">None</span></span><br><span class="line">            self.len-=<span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">length</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">f"此通讯录共有<span class="hljs-subst">&#123;self.len&#125;</span>人"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    PC = phone_list()</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :</span><br><span class="line">        print(<span class="hljs-string">"\n\n"</span>)</span><br><span class="line">        print(<span class="hljs-string">'\t\t\tHPU计算机18实验班通讯录管理程序'</span>)</span><br><span class="line">        print(<span class="hljs-string">'\t\t\t*\t python 类（ 链表）实现\t      *'</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t\t\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t功能查询：\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[1]：新建初始化\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[2]：新建\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[3]：查询\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[4]：删除\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[5]：显示组员\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[6]：修改信息\t      *"</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="hljs-string">"\t\t\t*\t[0]：退出\t      *"</span>)</span><br><span class="line">        print(<span class="hljs-string">"\t\t\t***  \t\t            ***"</span>)</span><br><span class="line">        a =(input(<span class="hljs-string">"请输入您的选择："</span>))</span><br><span class="line">        <span class="hljs-keyword">if</span> a.isdigit():</span><br><span class="line">            a = int(a)</span><br><span class="line">            <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> a&lt;=<span class="hljs-number">6</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">0</span>):</span><br><span class="line">                    print(<span class="hljs-string">"谢谢您的使用！！！"</span>)</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">1</span>):</span><br><span class="line">                    PC.creat_people()</span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">2</span>):</span><br><span class="line">                    PC.new_people()</span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">3</span>):</span><br><span class="line">                    PC.find_people()</span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">4</span>):</span><br><span class="line">                    PC.del_people()</span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">5</span>):</span><br><span class="line">                    PC.scan_people()</span><br><span class="line">                <span class="hljs-keyword">if</span> (a==<span class="hljs-number">6</span>):</span><br><span class="line">                    PC.fix_people()</span><br><span class="line">               </span><br><span class="line">        x=eval(input(<span class="hljs-string">"是否继续？\n【1】继续【2】退出"</span>))</span><br><span class="line">        <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span> :</span><br><span class="line">               <span class="hljs-keyword">continue</span></span><br><span class="line">        <span class="hljs-keyword">if</span> x==<span class="hljs-number">2</span> :</span><br><span class="line">               <span class="hljs-keyword">break</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="C-语言实现"><a href="#C-语言实现" class="headerlink" title="C 语言实现"></a>C 语言实现</h1><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu_link</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> id;</span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">10</span>];</span><br><span class="line"> <span class="hljs-keyword">int</span> age;</span><br><span class="line"> <span class="hljs-keyword">char</span> telephone[<span class="hljs-number">20</span>];</span><br><span class="line"> <span class="hljs-keyword">char</span> email[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> len;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu_link</span> *<span class="hljs-title">next</span>,*<span class="hljs-title">pre</span>;</span></span><br><span class="line">&#125;stu;<span class="hljs-comment">//定义结构体内变量 </span></span><br><span class="line">stu *head,*tail,*head_1,*tail_1,*head_2,*tail_2;<span class="hljs-comment">//定义3个链表的头指针和尾指针 </span></span><br><span class="line"><span class="hljs-function">stu * <span class="hljs-title">creat_stu</span><span class="hljs-params">(stu *tail)</span><span class="hljs-comment">//新建联系人 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">stu *p;</span><br><span class="line">p = (stu *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(stu),<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入姓名:\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">    gets(p-&gt;name);</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(p-&gt;name)&gt;<span class="hljs-number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误！\n请重新输入(名字长度小于等于4):"</span>);</span><br><span class="line">     gets(p-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入年龄：\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;p-&gt;age);</span><br><span class="line"><span class="hljs-keyword">while</span>(p-&gt;age&gt;<span class="hljs-number">100</span>||p-&gt;age&lt;<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误！\n请重新输入(1-100): "</span>);</span><br><span class="line">     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;p-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n电话号码："</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    gets(p-&gt;telephone);</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(p-&gt;telephone)!=<span class="hljs-number">11</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误！\n请重新输入:"</span>);</span><br><span class="line">     gets(p-&gt;telephone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n电子邮箱："</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    gets(p-&gt;email);</span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">     <span class="hljs-keyword">int</span> len;</span><br><span class="line">     <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)</span><br><span class="line">     &#123;</span><br><span class="line">     len = <span class="hljs-built_in">strlen</span>(p-&gt;email);</span><br><span class="line">     <span class="hljs-keyword">if</span>(p-&gt;email[i]==<span class="hljs-string">'@'</span>&amp;&amp;p-&gt;email[len<span class="hljs-number">-1</span>]==<span class="hljs-string">'m'</span>&amp;&amp;p-&gt;email[len<span class="hljs-number">-2</span>]==<span class="hljs-string">'o'</span>&amp;&amp;p-&gt;email[len<span class="hljs-number">-3</span>]==<span class="hljs-string">'c'</span>&amp;&amp;p-&gt;email[len<span class="hljs-number">-4</span>]==<span class="hljs-string">'.'</span>&amp;&amp;p-&gt;email[len<span class="hljs-number">-5</span>]!=<span class="hljs-string">'@'</span>)</span><br><span class="line">     flag=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)</span><br><span class="line"> <span class="hljs-keyword">break</span>;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误!\n请重新输入:"</span>);</span><br><span class="line">     gets(p-&gt;email);</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = p;</span><br><span class="line">tail = p;</span><br><span class="line"><span class="hljs-keyword">return</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">stu * <span class="hljs-title">find_stu</span><span class="hljs-params">(stu *head,stu *tail,<span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>])</span><span class="hljs-comment">//查找联系人并打印信息 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">stu *p;</span><br><span class="line">p = head;</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(tail-&gt;name,a)==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> tail;</span><br><span class="line"><span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(p-&gt;next != tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(p-&gt;name,a)==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> </span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(!flag)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">scan_stu</span><span class="hljs-params">(stu *head,stu *tail)</span><span class="hljs-comment">//浏览联系人信息 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">stu *p;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"><span class="hljs-keyword">while</span>(p != tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"姓名: %s  年龄: %d  电话：%s  邮箱：%s\n"</span>,p-&gt;name,p-&gt;age,p-&gt;telephone,p-&gt;email);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"姓名:%s  年龄: %d  电话：%s  邮箱：%s\n"</span>,tail-&gt;name,tail-&gt;age,tail-&gt;telephone,p-&gt;email);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">stu * <span class="hljs-title">del_stu</span><span class="hljs-params">(stu *head,stu *tail)</span><span class="hljs-comment">//删除指定联系人 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">stu *p,*q;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入要删除人的姓名\n"</span>);</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,&amp;a);</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(p-&gt;name,a)==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line">head-&gt;len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(tail-&gt;name,a)==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(p-&gt;next != tail)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">tail = p;</span><br><span class="line"><span class="hljs-built_in">free</span>(tail-&gt;next);</span><br><span class="line">head-&gt;len--;</span><br><span class="line"><span class="hljs-keyword">return</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(p!=tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(p-&gt;name,a)==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">q =p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">head-&gt;len--;</span><br><span class="line"><span class="hljs-built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fix_stu</span><span class="hljs-params">(stu *head,stu *tail)</span><span class="hljs-comment">//修改联系人信息 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>],aa[<span class="hljs-number">10</span>],telephone1[<span class="hljs-number">20</span>],email1[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> old;</span><br><span class="line">stu *p;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入要修改的姓名：\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,&amp;a);</span><br><span class="line">p = find_stu(head,tail,a);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入要修改的信息\n[1]：姓名[2]：年龄[3]：电话[4]：邮箱\n"</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> choice;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;choice);</span><br><span class="line"><span class="hljs-keyword">switch</span>(choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入修改后的姓名：\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">gets(aa); </span><br><span class="line">   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(aa)&gt;<span class="hljs-number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误！\n请重新输入(名字长度小于等于4):"</span>);</span><br><span class="line">     gets(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(p-&gt;name,aa);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入修改后的年龄：\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;old);</span><br><span class="line"><span class="hljs-keyword">while</span>(old&gt;<span class="hljs-number">100</span>||old&lt;<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误！\n请重新输入(1-100): "</span>);</span><br><span class="line">     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;old);</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;age = old;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入修改后的电话：\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">    gets(telephone1);</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">strlen</span>(telephone1)!=<span class="hljs-number">11</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误！\n请重新输入:"</span>);</span><br><span class="line">     gets(telephone1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(p-&gt;telephone,telephone1);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入修改后的邮箱：\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">    gets(email1);</span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line">     <span class="hljs-keyword">int</span> len;</span><br><span class="line">     <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)</span><br><span class="line">     &#123;</span><br><span class="line">     len = <span class="hljs-built_in">strlen</span>(email1);</span><br><span class="line">     <span class="hljs-keyword">if</span>(email1[i]==<span class="hljs-string">'@'</span>&amp;&amp;email1[len<span class="hljs-number">-1</span>]==<span class="hljs-string">'m'</span>&amp;&amp;email1[len<span class="hljs-number">-2</span>]==<span class="hljs-string">'o'</span>&amp;&amp;email1[len<span class="hljs-number">-3</span>]==<span class="hljs-string">'c'</span>&amp;&amp;email1[len<span class="hljs-number">-4</span>]==<span class="hljs-string">'.'</span>&amp;&amp;email1[len<span class="hljs-number">-5</span>]!=<span class="hljs-string">'@'</span>)</span><br><span class="line">     flag=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)</span><br><span class="line"> <span class="hljs-keyword">break</span>;</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入错误!\n请重新输入:"</span>);</span><br><span class="line">     gets(email1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(p-&gt;email,email1);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"修改成功！！！\n"</span>); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">stu *head,*tail,*s,*head_1,*tail_1,*head_2,*tail_2;</span><br><span class="line">head = (stu *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(stu),<span class="hljs-number">1</span>);</span><br><span class="line">head-&gt;len=<span class="hljs-number">0</span>;</span><br><span class="line">tail = head;</span><br><span class="line">head_1 = (stu *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(stu),<span class="hljs-number">1</span>);</span><br><span class="line">head_1-&gt;len=<span class="hljs-number">0</span>;</span><br><span class="line">tail_1 = head_1;</span><br><span class="line">head_2 = (stu *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(stu),<span class="hljs-number">1</span>);</span><br><span class="line">head_2-&gt;len=<span class="hljs-number">0</span>;</span><br><span class="line">tail_2 = head_2;</span><br><span class="line"><span class="hljs-keyword">int</span> choice;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="hljs-string">"cls"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n\n\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t*****HPU计算机18实验班通讯录管理程序*****\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t***C语言单向链表实现***\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t\t\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t\t\t\t+\n\t\t\t\t\t*\t     功能列表:\t\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t==========================\t+\n"</span>); </span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[1]:\t新建\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[2]:\t查询\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[3]:\t删除\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[4]:\t显示组员\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[5]:\t修改信息\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[6]:\t总人数\t\t+\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+\t\t[0]:\t退出\t\t+\n"</span>);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\t\t\t\t\t+++\t==========================    +++\n"</span>);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n选择你要的功能：\n"</span>);</span><br><span class="line">   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;choice);</span><br><span class="line">   <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"谢谢您的使用！！！\n"</span>); </span><br><span class="line">   <span class="hljs-keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">switch</span>(choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> choice1;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"是否进行分组?\n[1]：分组[2]：不分组\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;choice1);</span><br><span class="line"><span class="hljs-keyword">switch</span>(choice1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> choice2;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请选择分组：\n[1]：家人[2]：朋友\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;choice2);</span><br><span class="line"><span class="hljs-keyword">switch</span>(choice2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:&#123;</span><br><span class="line">tail_1 = creat_stu(tail_1);</span><br><span class="line">head_1-&gt;len++;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:&#123;</span><br><span class="line">tail_2 = creat_stu(tail_2);</span><br><span class="line">head_2-&gt;len++;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:&#123;</span><br><span class="line">tail = creat_stu(tail);</span><br><span class="line">head-&gt;len++;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_1-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_2-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> b;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入要查找人的名字\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,&amp;a);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请选择您要查找的人位于哪个分组：\n[1]：家人[2]：朋友[3]：未分组"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b);</span><br><span class="line"><span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = find_stu(head_1,tail_1,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = find_stu(head_2,tail_2,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = find_stu(head,tail,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//s = find_stu(head,tail,a);</span></span><br><span class="line"><span class="hljs-keyword">if</span>(s != <span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"姓名：%s  年龄：%d  电话：%s  邮箱：%s\n"</span>,s-&gt;name,s-&gt;age,s-&gt;telephone,s-&gt;email); </span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>) </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"没有此人！\n"</span>);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_1-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_2-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"未分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(head_1==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"家人分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(head_2==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"朋友分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> b;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请选择您要删除的人位于哪个分组：\n[1]：家人[2]：朋友[3]：未分组"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b);</span><br><span class="line"><span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">del_stu(head_1,tail_1);</span><br><span class="line">head_1--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">del_stu(head_2,tail_2);</span><br><span class="line">head_2--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">del_stu(head,tail);</span><br><span class="line">head--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_1-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_2-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"未分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(head_1==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"家人分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(head_2==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"朋友分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len!=<span class="hljs-number">0</span>)</span><br><span class="line">scan_stu(head,tail);</span><br><span class="line"><span class="hljs-keyword">if</span>(head_1-&gt;len!=<span class="hljs-number">0</span>)</span><br><span class="line">scan_stu(head_1,tail_1);</span><br><span class="line"><span class="hljs-keyword">if</span>(head_2-&gt;len!=<span class="hljs-number">0</span>)</span><br><span class="line">scan_stu(head_2,tail_2);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_1-&gt;len==<span class="hljs-number">0</span>&amp;&amp;head_2-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(head-&gt;len==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"未分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(head_1==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"家人分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(head_2==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"朋友分组空无一人\n"</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> b;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请选择您要查找的人位于哪个分组：\n[1]：家人[2]：朋友[3]：未分组\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;b);</span><br><span class="line"><span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)</span><br><span class="line">fix_stu(head_1,tail_1);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)</span><br><span class="line">fix_stu(head_2,tail_2);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">3</span>)</span><br><span class="line">fix_stu(head,tail);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"此通讯录共有%d人\n"</span>,head-&gt;len+head_2-&gt;len+head_1-&gt;len);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"ENTER键继续（可能不止两次优~~）"</span>); </span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="路漫漫其修远兮，代码还要一行一行敲！？！"><a href="#路漫漫其修远兮，代码还要一行一行敲！？！" class="headerlink" title="路漫漫其修远兮，代码还要一行一行敲！？！"></a>路漫漫其修远兮，代码还要一行一行敲！？！</h1>]]></content>
      
      
      <categories>
          
          <category> Data-Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补）-4</title>
      <link href="/AngelNI.github.io/learn-4/"/>
      <url>/AngelNI.github.io/learn-4/</url>
      
        <content type="html"><![CDATA[<p>想和你一起聊我的秘密，可发现你就是我的秘密。 <a id="more"></a></p><h1 id="DP（动态规划）"><a href="#DP（动态规划）" class="headerlink" title="DP（动态规划）"></a>DP（动态规划）</h1><p>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。<br>动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><p>题的类型不同，但都是在基础上的动态规划的模板上进行改进。那么接下来就从几道简单的动态规划题型入手吧。</p><h2 id="1-矩阵取数"><a href="#1-矩阵取数" class="headerlink" title="1.矩阵取数"></a>1.矩阵取数</h2><p><a href="http://www.51nod.com/Challenge/Problem.html#problemId=1083" target="_blank" rel="noopener">原题链接</a></p><p>一个N*N矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，从左上走到右下，只能向下向右走，求能够获得的最大价值。</p><p>例如：3 * 3的方格。</p><p>1 3 3</p><p>2 1 3</p><p>2 2 1</p><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第1行：N，N为矩阵的大小。(2 &lt;= N &lt;= 500)</span><br><span class="line">第2 - N + 1行：每行N个数，中间用空格隔开，对应格子中奖励的价值。（1 &lt;= N[i] &lt;= 10000)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出能够获得的最大价值。</span><br></pre></td></tr></table></figure><p>输入样例</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 3</span><br><span class="line">2 1 3</span><br><span class="line">2 2 1</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><p>我们来用DP的思想来解决这个问题x 设矩阵是 . 假设我们已经知道了最大路径，并且经过（x, y）这个位置，为了从起点到终点得到的和最大，那 么从起点到 (x , y) 经过的数的和也一定要最大。这几乎是显然的。<br>这是理解这一题的重点。<br>走到 (x, y) 的上一步，可能是 （x-1, y） 或者（x, y-1）. 按照我门上面得出的结论，我们可以这样说： 如果从起点达到(x,y)的最优路径要经过(x – 1,y)或者(x,y – 1)则，从起点到达(x – 1,y)或者(x,y – 1)的 路径一定也必须是最优的。<br>所以只需要比较 到达(x – 1,y)或者(x,y – 1)的最优路径哪一个更加优。为了方便表示，我们用：  来表示起点到 （x，y）的最优路径长度。 所以,起点到 （x，y）的最优路径可以表示成：</p><p>f（x,y） = max( f(x-1,y) , f(x,y-1) )+ A [ x ] [ y ]<br>到了这里肯定会有疑问了，这怎么感觉和上面的贪心策略差不多？？<br>其实不，这里是理解DP的重点。根据上面的这个递推公式，我门可以准确的推导出从起点到所有点 的最优解。是整体的最优。而贪心策略只是在局部做选择，是局部的最优。</p><h3 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">600</span>][<span class="hljs-number">600</span>]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n ;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i][j]; </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i][<span class="hljs-number">0</span>]+=a[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];</span><br><span class="line">a[<span class="hljs-number">0</span>][i]+=a[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;n;j++)</span><br><span class="line">a[i][j]+=max(a[i<span class="hljs-number">-1</span>][j],a[i][j<span class="hljs-number">-1</span>]);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a[n<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-数字三角形"><a href="#2-数字三角形" class="headerlink" title="2.数字三角形"></a>2.数字三角形</h2><p><a href="http://poj.org/problem?id=1163" target="_blank" rel="noopener">原题链接</a></p><p>Description</p><p><code>7</code></p><p><code>3   8</code></p><p><code>8   1   0</code></p><p><code>2   7   4   4</code></p><p><code>4   5   2   6   5</code></p><p>Figure 1 shows a number triangle. Write a program that calculates the highest sum of numbers passed on a route that starts at the top and ends somewhere on the base. Each step can go either diagonally down to the left or diagonally down to the right. </p><p>Input</p><p>Your program is to read from standard input. The first line contains one integer N: the number of rows in the triangle. The following N lines describe the data of the triangle. The number of rows in the triangle is &gt; 1 but &lt;= 100. The numbers in the triangle, all integers, are between 0 and 99.</p><p>Output</p><p>Your program is to write to standard output. The highest sum is written as an integer.</p><p>Sample Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0 </span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">200</span>][<span class="hljs-number">200</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DP</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==n)</span><br><span class="line"><span class="hljs-keyword">return</span> a[i][j];</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x = DP(i+<span class="hljs-number">1</span>,j);</span><br><span class="line"><span class="hljs-keyword">int</span> y = DP(i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> max(x,y)+a[i][j]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n); </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=i;j++) </span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,DP(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归解决方案"><a href="#非递归解决方案" class="headerlink" title="非递归解决方案"></a>非递归解决方案</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">600</span>][<span class="hljs-number">600</span>]; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n ;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i][j]; </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i][<span class="hljs-number">0</span>]+=a[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];</span><br><span class="line">a[<span class="hljs-number">0</span>][i]+=a[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;n;j++)</span><br><span class="line">a[i][j]+=max(a[i<span class="hljs-number">-1</span>][j],a[i][j<span class="hljs-number">-1</span>]);</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a[n<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个DP思想是对的，并且答案也是对的，但当你submit时，TE了。因为有节点重复相加了，可以用记忆化搜索，解决重复相加问题。</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>],ans[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i ,<span class="hljs-keyword">int</span> j)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==t)</span><br><span class="line"><span class="hljs-keyword">return</span> a[i][j];</span><br><span class="line"><span class="hljs-keyword">if</span>(ans[i][j])</span><br><span class="line"><span class="hljs-keyword">return</span> ans[i][j];</span><br><span class="line"><span class="hljs-keyword">int</span> x =dfs(i+<span class="hljs-number">1</span>,j);</span><br><span class="line"><span class="hljs-keyword">int</span> y = dfs(i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> ans[i][j]= max(x,y)+a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">1</span>;j&lt;=i;j++)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-最大序列和"><a href="#3-最大序列和" class="headerlink" title="3.最大序列和"></a>3.最大序列和</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003" target="_blank" rel="noopener">原题链接</a></p><p>Problem Description</p><p>Given a sequence a[1],a[2],a[3]……a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.</p><p>Input</p><p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).</p><p>Output</p><p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.</p><p>Sample Input</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5 6 -1 5 4 -7</span><br><span class="line">7 0 6 -1 1 -6 7 -5</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">14 1 4</span><br><span class="line"></span><br><span class="line">Case 2:</span><br><span class="line">7 1 6</span><br></pre></td></tr></table></figure><h3 id="AC-1"><a href="#AC-1" class="headerlink" title="AC"></a>AC</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100100</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="hljs-keyword">int</span> l =<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n ;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) </span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>,start=<span class="hljs-number">1</span>,end=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> maxsum=a[<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i<span class="hljs-number">-1</span>]+a[i]&gt;=a[i])</span><br><span class="line">&#123;</span><br><span class="line">a[i] = a[i]+a[i<span class="hljs-number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> </span><br><span class="line">p =i;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]&gt;maxsum)</span><br><span class="line">&#123;</span><br><span class="line">maxsum=a[i];</span><br><span class="line">start=p;</span><br><span class="line">end=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d:\n%d %d %d\n"</span>,++l,maxsum,start,end);</span><br><span class="line"><span class="hljs-keyword">if</span>(t)</span><br><span class="line">            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-最长递增子序列"><a href="#4-最长递增子序列" class="headerlink" title="4.最长递增子序列"></a>4.最长递增子序列</h2><p><a href="http://www.51nod.com/Challenge/Problem.html#problemId=1134" target="_blank" rel="noopener">原题链接</a></p><p>给出长度为N的数组，找出这个数组的最长递增子序列。(递增子序列是指，子序列的元素是递增的）</p><p>例如：5 1 6 8 2 4 5 10，最长递增子序列是1 2 4 5 10。</p><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第1行：1个数N，N为序列的长度(2 &lt;= N &lt;= 50000)</span><br><span class="line">第2 - N + 1行：每行1个数，对应序列的元素(-10^9 &lt;= S[i] &lt;= 10^9)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出最长递增子序列的长度。</span><br></pre></td></tr></table></figure><p>输入样例</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="AC-2"><a href="#AC-2" class="headerlink" title="AC"></a>AC</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">50001</span>],dp[<span class="hljs-number">50001</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n,ans=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n; </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i]=<span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">                dp[i]=max(dp[i],dp[j]+<span class="hljs-number">1</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交后发现TE了，这是一个时间复杂度为O(n**2)的程序。</p><p>下面是一个时间复杂度为O(nlogn)</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">50001</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> f[<span class="hljs-number">50001</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n,maxn;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="hljs-keyword">int</span> len=<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<span class="hljs-comment">//创建一个新数组存放最长上升序列</span></span><br><span class="line">    f[<span class="hljs-number">0</span>]=a[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">       <span class="hljs-keyword">int</span> pos=lower_bound(f,f+len,a[i])-f;<span class="hljs-comment">//二分查找i+1个数中最长上升序列，a[i]的位置 </span></span><br><span class="line">       f[pos]=a[i];</span><br><span class="line">       len=max(len,pos+<span class="hljs-number">1</span>);<span class="hljs-comment">//最长上升序列的数量 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;len&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补）-3</title>
      <link href="/AngelNI.github.io/Learn-3/"/>
      <url>/AngelNI.github.io/Learn-3/</url>
      
        <content type="html"><![CDATA[<p> 不疯不魔，难以成佛。<a id="more"></a></p><p>学完了vector，接下来就开始学习其他容器了。这些都是C++ STL中的比较好用的方法，让你的编程变得简单。</p><h1 id="迭代器iterator"><a href="#迭代器iterator" class="headerlink" title="迭代器iterator"></a>迭代器iterator</h1><p>在这几天的使用来看，自认为迭代器是为了访问容器的元素。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">初始化： &lt; 容器类型 &gt;&lt; 数据类型 &gt; :: iterator  &lt;名称&gt;</span><br><span class="line"></span><br><span class="line">例如：<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator  iter;  <span class="hljs-comment">//这就定义了一个可以访问vector int型数据的 名为iter的迭代器</span></span><br></pre></td></tr></table></figure><p>还有如下的迭代器初始化方法：</p><ol><li>正向迭代器：容器类型：：iterator  名称</li><li>常量迭代器：容器类型：：const_iterator  名称</li><li>反向迭代器：容器类型：：reverse_iterator  名称</li><li>常量反向迭代器： 容器类型：：const_reverse_iterator  名称</li></ol><p>下面就以一个实例来学习迭代器的使用方法。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ve(a,a+<span class="hljs-number">10</span>);</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator  it;</span><br><span class="line">    <span class="hljs-comment">//正向迭代器与反向迭代器</span></span><br><span class="line">    <span class="hljs-keyword">for</span>(it = ve.begin();it!=ve.end();++it)<span class="hljs-comment">//听说 ++i 比 i++执行速度快</span></span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;(*ve)&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(it = ve.rbegin();it!=ve.rend();++it)<span class="hljs-comment">//听说 ++i 比 i++执行速度快</span></span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;(*ve)&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还有操作迭代器的三个函数</strong></p><p>包含于头文件&lt; algorithm &gt;</p><ol><li>advance(p,n)     向前移动 n 个元素</li><li>distance(p,q)     计算两个迭代器的长度，在同一个容器内</li><li>iter_swap(p,q)   用于交换两个迭代器p，q 指向的值</li></ol><h1 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h1><p>头文件&lt; set &gt; </p><p>其实，只要掌握了一个容器的操作方法，其他容器的方法都可以类比。</p><p>值得注意一点的是：集合内的容器不能重复，并且他会默认从小到大排序。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; st;</span><br><span class="line">st.insert()  <span class="hljs-comment">//插入元素</span></span><br><span class="line">st.begin() <span class="hljs-comment">// 返回第一个元素的迭代器</span></span><br><span class="line">st.end()  <span class="hljs-comment">//返回最后一个元素之后的迭代器，不是最后一个迭代器</span></span><br><span class="line">stclear()  <span class="hljs-comment">//清空所有元素</span></span><br><span class="line">st.count()  <span class="hljs-comment">//判断元素是否存在，返回bool类型</span></span><br><span class="line">st.empty()  <span class="hljs-comment">//判断是否为空 ，空则true</span></span><br><span class="line">st.erase()  <span class="hljs-comment">//删除集合中元素</span></span><br><span class="line">st.find()   <span class="hljs-comment">//返回一个被查找到的元素的迭代器，没有则返回end（），find(开始地址，尾地址，查找元素)</span></span><br><span class="line">st.size() <span class="hljs-comment">//集合的大小</span></span><br></pre></td></tr></table></figure><h1 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h1><p>头文件&lt; stack &gt;</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//初始化</span></span><br><span class="line"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;   a;</span><br><span class="line">a.push()  <span class="hljs-comment">//  压入栈</span></span><br><span class="line">a.pop()  <span class="hljs-comment">//移除最顶端元素</span></span><br><span class="line">a.top()  <span class="hljs-comment">//访问最顶端元素</span></span><br><span class="line">a.size()  <span class="hljs-comment">//栈的大小</span></span><br><span class="line">a.empty()  <span class="hljs-comment">//判断是否为空</span></span><br></pre></td></tr></table></figure><h1 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h1><p>头文件&lt; queue &gt;</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span> &gt; q;</span><br><span class="line">q.push()  <span class="hljs-comment">//加入对列</span></span><br><span class="line">q.front()  <span class="hljs-comment">//队首元素</span></span><br><span class="line">q.pop（）  <span class="hljs-comment">//移除队首元素</span></span><br><span class="line">q.empty()  <span class="hljs-comment">//判断是否为空</span></span><br><span class="line">q.size()  <span class="hljs-comment">//队列大小</span></span><br></pre></td></tr></table></figure><h1 id="字典map"><a href="#字典map" class="headerlink" title="字典map"></a>字典map</h1><p>头文件&lt; map &gt;</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;</span><br><span class="line">mp.clear()  <span class="hljs-comment">//清空mp</span></span><br><span class="line">mp.size()  <span class="hljs-comment">//mp大小</span></span><br><span class="line">mp.empty() <span class="hljs-comment">//判断是否为空</span></span><br><span class="line">mp.count(key)  <span class="hljs-comment">//判断key是否存在</span></span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span> &gt;::iterator it;</span><br><span class="line">mp[<span class="hljs-number">0</span>] =<span class="hljs-number">4</span>;</span><br><span class="line">mp[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;</span><br><span class="line">mp[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;</span><br><span class="line">it = mp.find(<span class="hljs-number">1</span>)  <span class="hljs-comment">//key，返回一个地址</span></span><br><span class="line">（*it）.first()  <span class="hljs-comment">//返回所指地址的key值</span></span><br><span class="line">（*it）.second() <span class="hljs-comment">//返回所指地址的value值</span></span><br><span class="line">mp.insert(pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))  <span class="hljs-comment">//插入键值对</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补）-2</title>
      <link href="/AngelNI.github.io/learn-2/"/>
      <url>/AngelNI.github.io/learn-2/</url>
      
        <content type="html"><![CDATA[<p>围在城里的人想逃出来，城外的人想冲进去。–《围城》<a id="more"></a></p><p>有时候多学一点总没错，在你生活中一个不经意间就用上了。</p><h1 id="VECTOR"><a href="#VECTOR" class="headerlink" title="VECTOR"></a>VECTOR</h1><p>vector类为内置数组提供了一种替代的表示，通常建议使用vector。（但仍有许多程序环境必须使用内置数组），vector 是C++中的一个容器类型，vector类是随标准C++引入的标准库的一部分。</p><p>使用vector必须包含相关的头文件</p><p><strong>#include<vector></vector></strong></p><h2 id="vector初始化"><a href="#vector初始化" class="headerlink" title="vector初始化"></a>vector初始化</h2><ol><li><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1.</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ve(<span class="hljs-number">10</span>);         <span class="hljs-comment">//定义已知长度的Vector，初始值默认为0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">2.</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ve(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);      <span class="hljs-comment">//定义已知长度，并且初值为2的数组</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">3.</span> <span class="hljs-keyword">int</span> a[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-built_in">vector</span>&lt; <span class="hljs-keyword">int</span> &gt;  ve( a , a+<span class="hljs-number">4</span>);    <span class="hljs-comment">//将静态数组拷贝至不定数组</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">4.</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ve(&amp;a[<span class="hljs-number">1</span>] ,  &amp;a[<span class="hljs-number">3</span>] )   <span class="hljs-comment">//将a[1],a[2]拷贝到不定数组，其实是一个地址的传递</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">5.</span> <span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt;  a(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; b(a);                <span class="hljs-comment">//vector  被另一个vector初始化</span></span><br><span class="line"></span><br><span class="line">   <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; c;      c =  b;       <span class="hljs-comment">//vector  被赋值给另一个vector、</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="vector操作"><a href="#vector操作" class="headerlink" title="vector操作"></a>vector操作</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ve;</span><br><span class="line">ve.erase(ve.begin()+<span class="hljs-number">2</span>)         <span class="hljs-comment">//删除第二个元素</span></span><br><span class="line">ve.insert(ve.begin()+<span class="hljs-number">2</span> , <span class="hljs-number">1</span> )       <span class="hljs-comment">//在第二个位置插入1</span></span><br><span class="line">ve.erase(ve.begin()+<span class="hljs-number">1</span>,ve.begin()+<span class="hljs-number">4</span>)    <span class="hljs-comment">//删除第1,2,3位置上的元素</span></span><br><span class="line">ve.size()     <span class="hljs-comment">//返回数组的大小</span></span><br><span class="line">ve.clear()    <span class="hljs-comment">//清空数组</span></span><br><span class="line">ve.back()     <span class="hljs-comment">//返回最后一个元素</span></span><br><span class="line">ve.front()    <span class="hljs-comment">//返回第一个元素</span></span><br><span class="line">ve[i]         <span class="hljs-comment">//返回第i个素</span></span><br><span class="line">ve.empty()     <span class="hljs-comment">//判断不定数组是否为空，空：true，非空：false</span></span><br><span class="line">ve.pop_back()      <span class="hljs-comment">//删除最后一个元素</span></span><br><span class="line">ve.push_back()     <span class="hljs-comment">//在最后插入一个元素</span></span><br></pre></td></tr></table></figure><h2 id="vector二维数组（输入，输出）"><a href="#vector二维数组（输入，输出）" class="headerlink" title="vector二维数组（输入，输出）"></a>vector二维数组（输入，输出）</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt; a;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; b;</span><br><span class="line"><span class="hljs-keyword">int</span> temp;</span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">for</span>(i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">b.clear();</span><br><span class="line"><span class="hljs-keyword">for</span>(j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">b.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line">a.push_back(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="vector字符串数组"><a href="#vector字符串数组" class="headerlink" title="vector字符串数组"></a>vector字符串数组</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; text;</span><br><span class="line"><span class="hljs-built_in">string</span> word;</span><br><span class="line"><span class="hljs-keyword">int</span> a=<span class="hljs-number">5</span>; </span><br><span class="line"><span class="hljs-keyword">while</span>((a--)&amp;&amp;<span class="hljs-built_in">cin</span>&gt;&gt;word  )<span class="hljs-comment">//// &amp;&amp; 短路问题 </span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">text.push_back(word);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;text.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;text[i]&lt;&lt;<span class="hljs-string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态空间申请"><a href="#动态空间申请" class="headerlink" title="动态空间申请"></a>动态空间申请</h1><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> *p;</span><br><span class="line"><span class="hljs-keyword">int</span> i;</span><br><span class="line">p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*<span class="hljs-number">5</span>); </span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">free</span>(p);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> *p;</span><br><span class="line"><span class="hljs-keyword">int</span> i;</span><br><span class="line">p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>),<span class="hljs-number">5</span>); </span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">free</span>(p);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>malloc 与 calloc 在使用方法上基本上是差不多的。malloc它允许从空间内存池中分配内存,malloc()的参数是一个指定所需字节数的整数。colloc与malloc类似,但是主要的区别是存储在已分配的内存空间中的值默认为0,使用malloc时,已分配的内存中可以是任意的值. colloc需要两个参数,第一个是需要分配内存的变量的个数,第二个是每个变量的大小.</p><h2 id="二维空间申请"><a href="#二维空间申请" class="headerlink" title="二维空间申请"></a>二维空间申请</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ** p;</span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line">p = (<span class="hljs-keyword">int</span> **)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>*),<span class="hljs-number">5</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>),<span class="hljs-number">5</span>);</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;j++) </span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;p[i][j];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;j++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p[i][j]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">free</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">free</span>(p);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>二维空间与一维空间主要的不同是：二维数组由一维数组组成，申请的空间要分别对每个一维空间申请。释放空间时也是如此，先释放每个一维空间，最后在释放二维空间。</p><h1 id="C-动态空间申请"><a href="#C-动态空间申请" class="headerlink" title="C++ 动态空间申请"></a>C++ 动态空间申请</h1><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//一维空间申请</span></span><br><span class="line"><span class="hljs-keyword">int</span> m=<span class="hljs-number">9</span>; </span><br><span class="line"><span class="hljs-keyword">int</span> *p= <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">delete</span> []p;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//二维空间申请方法一</span></span><br><span class="line"><span class="hljs-keyword">int</span> n=<span class="hljs-number">4</span>,m=<span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> tem =<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> **p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>*[m];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n]; </span><br><span class="line"> &#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j]=tem;</span><br><span class="line">tem++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;p[i][j]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="hljs-keyword">delete</span> []p[i]; </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">delete</span> []p;</span><br><span class="line"><span class="hljs-comment">//二维空间申请方法二</span></span><br><span class="line"><span class="hljs-keyword">int</span> (*q)[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;q[i][j];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;q[i][j]&lt;&lt;setw(<span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">delete</span> []q;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假（补）-1</title>
      <link href="/AngelNI.github.io/learn-1/"/>
      <url>/AngelNI.github.io/learn-1/</url>
      
        <content type="html"><![CDATA[<p>乱花渐欲迷人眼，浅草才能建马蹄。最爱湖东行不足，绿杨阴里白沙堤。自己领会去吧！！！<a id="more"></a></p><p>我是打酱油的啊，记住，打酱油的。</p><p>写个板子，过个水题，好让我签个到。</p><h1 id="1-sort"><a href="#1-sort" class="headerlink" title="1.sort()"></a>1.sort()</h1><h2 id="（1）-数组"><a href="#（1）-数组" class="headerlink" title="（1）  数组"></a>（1）  数组</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(stu a,stu b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a &lt; b ; <span class="hljs-comment">//从小到大；</span></span><br><span class="line"><span class="hljs-keyword">return</span> a &gt; b ;<span class="hljs-comment">//从大到小； </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">22</span>,<span class="hljs-number">-5</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">-5</span>&#125;</span><br><span class="line">sort(a,a+<span class="hljs-number">10</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="（2）结构体"><a href="#（2）结构体" class="headerlink" title="（2）结构体"></a>（2）结构体</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> id;</span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> sex[<span class="hljs-number">10</span>];</span><br><span class="line">&#125;student[<span class="hljs-number">10</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(stu a,stu b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a.id &lt; b.id ; <span class="hljs-comment">//从小到大；</span></span><br><span class="line"><span class="hljs-keyword">return</span> a.id &gt; b.id ;<span class="hljs-comment">//从大到小； </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">student[<span class="hljs-number">0</span>].id = <span class="hljs-number">10</span>;</span><br><span class="line">student[<span class="hljs-number">1</span>].id = <span class="hljs-number">8</span>;</span><br><span class="line">student[<span class="hljs-number">2</span>].id = <span class="hljs-number">1</span>;</span><br><span class="line">student[<span class="hljs-number">3</span>].id = <span class="hljs-number">9</span>;</span><br><span class="line">sort(student,student+<span class="hljs-number">4</span>,cmp);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,student[i].id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,student[<span class="hljs-number">0</span>].id);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="（3）数据类型排序"><a href="#（3）数据类型排序" class="headerlink" title="（3）数据类型排序"></a>（3）数据类型排序</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-comment">//#include&lt;functional&gt; </span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-number">20</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-9</span>,<span class="hljs-number">85</span>,<span class="hljs-number">21</span>,<span class="hljs-number">3</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">char</span> b[<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">'b'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'z'</span>,<span class="hljs-string">'e'</span>,<span class="hljs-string">'t'</span>,<span class="hljs-string">'s'</span>,<span class="hljs-string">'p'</span>,<span class="hljs-string">'f'</span>,<span class="hljs-string">'o'</span>,<span class="hljs-string">'h'</span>&#125;;</span><br><span class="line">sort(a,a+<span class="hljs-number">10</span>,less&lt;<span class="hljs-keyword">int</span>&gt;());</span><br><span class="line">sort(a,a+<span class="hljs-number">10</span>,greater&lt;<span class="hljs-keyword">int</span>&gt;());</span><br><span class="line">sort(b,b+<span class="hljs-number">10</span>,greater&lt;<span class="hljs-keyword">char</span>&gt;());</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="2-GCD"><a href="#2-GCD" class="headerlink" title="2.GCD"></a>2.GCD</h1><p>GCD是求最大公约数，有两种方法：1.自己构建函数。2.头文件<algorithm>中的__gcd()函数.</algorithm></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">int gcd(int a,int b)</span></span><br><span class="line"><span class="hljs-comment">&#123;</span></span><br><span class="line"><span class="hljs-comment">return b ? gcd(b,a%b) : a;</span></span><br><span class="line"><span class="hljs-comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;__gcd(a,b)&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="3-LCM"><a href="#3-LCM" class="headerlink" title="3.LCM"></a>3.LCM</h1><p>LCM求最小公倍数，其实掌握了GCD，就简单的多了。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> b ? gcd(b,a%b) : a ;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;(a*b)/gcd(a,b)&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;(a*b)/__gcd(a,b)&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="4-素数打表"><a href="#4-素数打表" class="headerlink" title="4.素数打表"></a>4.素数打表</h1><p>素数打表根据比埃拉托斯特尼筛法，如果感兴趣，可以去找度娘。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-comment">//#include&lt;cstring&gt;</span></span><br><span class="line"><span class="hljs-comment">//#include&lt;string.h&gt;</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> prim[<span class="hljs-number">1016</span>];</span><br><span class="line"><span class="hljs-built_in">memset</span>(prim,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*<span class="hljs-number">1016</span>);</span><br><span class="line">prim[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;<span class="hljs-number">1016</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!prim[i]) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i*i;j&lt;<span class="hljs-number">1016</span>;j+=i)</span><br><span class="line">prim[j]=<span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">1016</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">'\t'</span>;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;prim[i]&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">1016</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(prim[i]==<span class="hljs-number">0</span>)</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-快速幂取模"><a href="#5-快速幂取模" class="headerlink" title="5.快速幂取模"></a>5.快速幂取模</h1><p>快速幂取模，为了解决大数取模问题吧。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">pow_mod</span><span class="hljs-params">(ll a,ll n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll res =<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>) res =res* a%MOD;</span><br><span class="line">a=a*a%MOD; </span><br><span class="line">n&gt;&gt;=<span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> b = <span class="hljs-number">6</span>;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,pow_mod(a,b)); </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib 常用图绘制</title>
      <link href="/AngelNI.github.io/matplotlib/"/>
      <url>/AngelNI.github.io/matplotlib/</url>
      
        <content type="html"><![CDATA[<p>我的冷漠里藏着一半的害羞，一半的自卑。<a id="more"></a></p><p>通过做图表来分析数据实在是一个非常棒的方法，由于我偶尔忘记语法，还得翻之前的笔记，难受。下面就画了些常用的图，记一记，记一记。</p><h1 id="1-折线图"><a href="#1-折线图" class="headerlink" title="1.折线图"></a>1.折线图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> matplotlib</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">x1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] </span><br><span class="line">y1 = [<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>]</span><br><span class="line">x2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] </span><br><span class="line">y2 =[<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>]</span><br><span class="line">matplotlib.rcParams[<span class="hljs-string">'font.sans-serif'</span>] = [<span class="hljs-string">'SimHei'</span>]<span class="hljs-comment">#中文显示问题</span></span><br><span class="line">f=plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">10</span>))<span class="hljs-comment">#调整图像大小</span></span><br><span class="line">plt.plot(x1,y1,label=<span class="hljs-string">'First Line'</span>)</span><br><span class="line">plt.plot(x2, y2, label=<span class="hljs-string">'Second Line'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="hljs-string">"Plot Number"</span>,fontsize = <span class="hljs-number">20</span>)<span class="hljs-comment">#x轴 标签及调整字体大小</span></span><br><span class="line">plt.ylabel(<span class="hljs-string">"Important var"</span>,fontsize = <span class="hljs-number">20</span>)<span class="hljs-comment">#y轴 标签及调整字体大小</span></span><br><span class="line">plt.title(<span class="hljs-string">"标题"</span>, fontsize = <span class="hljs-number">20</span>)<span class="hljs-comment">#标题</span></span><br><span class="line">plt.legend()<span class="hljs-comment">#显示图例</span></span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)<span class="hljs-comment">#调整x轴大小</span></span><br><span class="line">plt.ylim(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>)<span class="hljs-comment">#调整y轴大小</span></span><br><span class="line">plt.grid()<span class="hljs-comment">#添加格线</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQS2vR.png" alt border="0" height="500/"><h1 id="2-柱状图"><a href="#2-柱状图" class="headerlink" title="2.柱状图"></a>2.柱状图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.rcParams[<span class="hljs-string">'font.sans-serif'</span>] = [<span class="hljs-string">'SimHei'</span>]</span><br><span class="line"></span><br><span class="line">label_list = [<span class="hljs-string">"AUC"</span>,<span class="hljs-string">"MAP"</span>,<span class="hljs-string">"MRR"</span>,<span class="hljs-string">"Prec"</span>,<span class="hljs-string">"Rec"</span>,<span class="hljs-string">"F1"</span>,<span class="hljs-string">"NDGC"</span>,<span class="hljs-string">"Call"</span>]</span><br><span class="line"></span><br><span class="line">num_list_1 = [ <span class="hljs-number">0.8395789534863245</span>,<span class="hljs-number">0.03947255032401116</span>,<span class="hljs-number">0.4421931735657211</span>,<span class="hljs-number">0.18845315904139434</span>,<span class="hljs-number">0.061183509516103594</span>,  <span class="hljs-number">0.07578339296217934</span>, <span class="hljs-number">0.20391161229968288</span>, <span class="hljs-number">0.5533769063180828</span>]</span><br><span class="line">num_list_2 = [<span class="hljs-number">0.8099706571182651</span>, <span class="hljs-number">0.07124258816665524</span>,<span class="hljs-number">0.5007884899720522</span>,<span class="hljs-number">0.29520697167755994</span>,<span class="hljs-number">0.051690038913594256</span>,<span class="hljs-number">0.07702843749844428</span>, <span class="hljs-number">0.30278346199328815</span>,<span class="hljs-number">0.664488017429194</span>]</span><br><span class="line">x = range(len(num_list_1))</span><br><span class="line"><span class="hljs-comment">#f=plt.figure(figsize=(12,10))</span></span><br><span class="line"></span><br><span class="line">rects_1 = plt.bar( x,height = num_list_1,width = <span class="hljs-number">0.4</span>,alpha = <span class="hljs-number">0.8</span>,color = <span class="hljs-string">"red"</span>,label = <span class="hljs-string">"MBPR"</span>)</span><br><span class="line">rects_2 = plt.bar([i+<span class="hljs-number">0.4</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x],height = num_list_2,width = <span class="hljs-number">0.4</span>,alpha = <span class="hljs-number">0.8</span>,color = <span class="hljs-string">"blue"</span>,label = <span class="hljs-string">"BPR"</span>)<span class="hljs-comment">#柱状图对比</span></span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)</span><br><span class="line">plt.ylabel(<span class="hljs-string">"指标"</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([index + <span class="hljs-number">0.2</span> <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> x], label_list)<span class="hljs-comment">#自定义x 轴含义</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="hljs-string">"模型"</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="hljs-string">"MBPR、BPR对比图"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQSfDx.png" alt border="0"><h1 id="3-散点图"><a href="#3-散点图" class="headerlink" title="3.散点图"></a>3.散点图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line">y = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span><br><span class="line"><span class="hljs-comment">#f = plt.figure(figsize=(12,10))</span></span><br><span class="line">plt.scatter(x,y,color=<span class="hljs-string">"r"</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQS5VK.png" alt border="0"><h1 id="4-饼图"><a href="#4-饼图" class="headerlink" title="4.饼图"></a>4.饼图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#f=plt.figure(figsize=(12,10))</span></span><br><span class="line">slices = [<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>]</span><br><span class="line">activities = [<span class="hljs-string">'sleeping'</span>,<span class="hljs-string">'eating'</span>,<span class="hljs-string">'working'</span>,<span class="hljs-string">'playing'</span>] </span><br><span class="line">cols = [<span class="hljs-string">'c'</span>,<span class="hljs-string">'m'</span>,<span class="hljs-string">'r'</span>,<span class="hljs-string">'b'</span>]</span><br><span class="line">plt.pie( slices,labels=activities,colors=cols,startangle=<span class="hljs-number">90</span>,shadow= <span class="hljs-literal">True</span> ,explode=(<span class="hljs-number">0</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),autopct=<span class="hljs-string">'%1.1f%%'</span>)</span><br><span class="line"><span class="hljs-comment"># autopct='%1.1f%%' 百分比</span></span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQSjqP.png" alt border="0"><h1 id="5-箱式图"><a href="#5-箱式图" class="headerlink" title="5.箱式图"></a>5.箱式图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns</span><br><span class="line"><span class="hljs-comment">#f=plt.figure(figsize=(12,10))</span></span><br><span class="line">sns.set_style(<span class="hljs-string">"whitegrid"</span>)</span><br><span class="line">data = np.random.normal(size=(<span class="hljs-number">20</span>, <span class="hljs-number">6</span>)) + np.arange(<span class="hljs-number">6</span>) / <span class="hljs-number">2</span></span><br><span class="line">sns.boxplot(data=data)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQpCGQ.png" alt border="0"><h1 id="6-热度图"><a href="#6-热度图" class="headerlink" title="6.热度图"></a>6.热度图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np; </span><br><span class="line">np.random.seed(<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns;</span><br><span class="line">sns.set()</span><br><span class="line"></span><br><span class="line">uniform_data = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)</span><br><span class="line"><span class="hljs-comment">#print (uniform_data)</span></span><br><span class="line">heatmap = sns.heatmap(uniform_data)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQpkMn.png" alt border="0"><h1 id="7-子图"><a href="#7-子图" class="headerlink" title="7.子图"></a>7.子图</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="hljs-number">-10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)</span><br><span class="line">y =<span class="hljs-number">2</span>*np.cos(x)**<span class="hljs-number">5</span> + <span class="hljs-number">3</span>*np.sin(x)**<span class="hljs-number">3</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义画布和子图数量</span></span><br><span class="line">fig,axes=plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,figsize=(<span class="hljs-number">20</span>,<span class="hljs-number">18</span>),facecolor=<span class="hljs-string">'#ccddef'</span>)</span><br><span class="line"><span class="hljs-comment">#添加整个画布的标题</span></span><br><span class="line">fig.suptitle(<span class="hljs-string">'我是最大的标题'</span>,fontsize=<span class="hljs-number">20</span>)</span><br><span class="line"><span class="hljs-comment">#利用text属性添加副标题</span></span><br><span class="line">fig.text(<span class="hljs-number">0.45</span>,<span class="hljs-number">0.9</span>,<span class="hljs-string">'这是副标题'</span>)</span><br><span class="line"><span class="hljs-comment">#折线图</span></span><br><span class="line">axes[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].plot(x,y)</span><br><span class="line"><span class="hljs-comment">#柱状图</span></span><br><span class="line">axes[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].bar(x,y)</span><br><span class="line"><span class="hljs-comment">#直方图</span></span><br><span class="line">axes[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>].hist(y,bins=<span class="hljs-number">30</span>)</span><br><span class="line"><span class="hljs-comment">#散点图</span></span><br><span class="line">axes[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].scatter(x,y)</span><br><span class="line"><span class="hljs-comment">#条形图</span></span><br><span class="line">axes[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>].barh(x,y)</span><br><span class="line"><span class="hljs-comment">#饼图</span></span><br><span class="line">axes[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>].pie([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],labels=[<span class="hljs-string">'A级'</span>,<span class="hljs-string">'B级'</span>,<span class="hljs-string">'C级'</span>,<span class="hljs-string">'D级'</span>,<span class="hljs-string">'E级'</span>])</span><br><span class="line"><span class="hljs-comment">#axes[1,2].boxplot() 需要合适的数据，就不画了</span></span><br><span class="line"><span class="hljs-comment">#设置子图的xy轴范围，子图标题，标签背景颜色等，也可单独使用ax1.set_xlim()进行设置。部分属性不能直接使用set设置</span></span><br><span class="line">ax1.set(xlim=[<span class="hljs-number">-10</span>,<span class="hljs-number">12</span>],ylim=[<span class="hljs-number">-6</span>,<span class="hljs-number">4</span>],title=<span class="hljs-string">'This is TU1'</span>,xlabel=<span class="hljs-string">'xlabel'</span>,ylabel=<span class="hljs-string">'ylabel'</span>,facecolor=<span class="hljs-string">'#ffeedd'</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/06/nQpZZV.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活随笔</title>
      <link href="/AngelNI.github.io/Essay/"/>
      <url>/AngelNI.github.io/Essay/</url>
      
        <content type="html"><![CDATA[<p>不妨先做出点成绩，然后再去强调你的感受，否则，生命中只有唧唧歪歪，怎么看都是矫情。<a id="more"></a></p><p>可以确切的说这个暑假是颇丰的一个暑假，学习了机器学习的知识，提升了自己的代码编程能力，增强了自己的动手能力，还有与同伴交流研讨，这些都是难忘的。更重要的是对身心的锻炼，在这个炎热的夏天，38摄氏度是常事，顶着高温。学习也是比较枯燥的，自己上网学习机器学习的内容，做笔记，枯燥的环境有人离开，也有人留下来，真的是对身心的一个极大的挑战。这让我想起，天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。虽说蜀道之难难于上青天，但风雨过后的彩虹却有人见证过。也许我们缺少的是恒心吧，但在学习的道路上，没有了毅力怎能攀登知识的顶峰，不用知识武装自己怎么能克服人生的艰难。虽然在你看来只是一些空话，但是只有经历过才会懂得，恒心，毅力是必不可少的，更多的时候用言语表达只是证明，你说过，只是空话，只有实践，只有自己眼睛瞅着前方的目标，手里做着小事情才能证明你自己。不止说过，做过才最重要啊。这是我一暑假的体会吧，这才是这个暑假的宝贵的精神财富吧。</p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仰望，仰望？</title>
      <link href="/AngelNI.github.io/Looking-at-the-stars/"/>
      <url>/AngelNI.github.io/Looking-at-the-stars/</url>
      
        <content type="html"><![CDATA[<p>Live a good life meet slowly.<a id="more"></a></p><p>临近开学的前几天，跑去郑州去玩</p><p>天气不算太热，下着稀稀疏疏小雨，</p><p>坐火车到了郑州，坐地铁去了郑大，</p><p>行走在郑大的校园，看着别样的风景，</p><p>新生军训的大队伍，举伞疾走零星的小哥哥小姐姐，</p><p>如花绽放的喷泉水，雨中静默含苞的粉荷花绿藕叶，</p><p>低吼着，等待着</p><p>雨中矗立的钟楼，远远遥望的图书馆</p><p>换上新衣的院楼，人来人往的校门口</p><p>庄严，稳重，高调，朴素</p><p>仰望，仰望吗？</p><p>只有那些从不仰望星空的人，才不会掉进坑中</p><p>只有那些从不掉进坑中的人，就只会居高自乐</p><p>虫儿告诉我，今晚的星星好亮，</p><p>哈哈哈，</p><p>我被骗进坑里了</p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras-learn-note(3)</title>
      <link href="/AngelNI.github.io/Keras-note-3/"/>
      <url>/AngelNI.github.io/Keras-note-3/</url>
      
        <content type="html"><![CDATA[<p> May you be faithful to yourself, live earnestly and laugh freel.<a id="more"></a></p><h1 id="Keras-实现矩阵分解"><a href="#Keras-实现矩阵分解" class="headerlink" title="Keras 实现矩阵分解"></a>Keras 实现矩阵分解</h1><p>推荐系统算法简介<br>这里简单介绍下推荐系统中最为主要的协同过滤算法，大致分为如下几类：</p><ol><li>基于用户的协同过滤（给用户推荐与他相似的人购买的物品）</li><li>基于商品的协同过滤（给用户推荐和他之前喜欢的物品相似的物品）</li><li>基于模型的协同过滤：关联算法，聚类算法，分类算法，回归算法，矩阵分解，神经网络,图模型以及隐语义模型都属于这个范畴。</li></ol><p>之前用了python来写矩阵分解，现在换种写法，用keras来实现矩阵分解。</p><p><a href="https://imgchr.com/i/mt558S" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/21/mt558S.jpg" alt border="0"></a></p><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line">rating = pd.read_csv(<span class="hljs-string">'data/ratings.csv'</span>,sep=<span class="hljs-string">','</span>)</span><br><span class="line">num_user = np.max(rating[<span class="hljs-string">'userId'</span>])</span><br><span class="line">num_movie = np.max(rating[<span class="hljs-string">'movieId'</span>])</span><br><span class="line">print(num_user,num_movie,len(rating))</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#计算用户电影组合的R矩阵填充率</span></span><br><span class="line">R = len(rating)/(num_user*num_movie)</span><br><span class="line">print(<span class="hljs-string">f"矩阵填充率:<span class="hljs-subst">&#123;R&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>矩阵的填充率为：0.000853805025622708</p><h2 id="搭建模型"><a href="#搭建模型" class="headerlink" title="搭建模型"></a>搭建模型</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> keras <span class="hljs-keyword">import</span> Model</span><br><span class="line"><span class="hljs-keyword">import</span> keras.backend <span class="hljs-keyword">as</span> K</span><br><span class="line"><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> Embedding ,Reshape,Input,Dot</span><br><span class="line">K.clear_session()</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Recomand_model</span><span class="hljs-params">(num_user,num_movie,k)</span>:</span></span><br><span class="line">    input_user = Input(shape=[<span class="hljs-literal">None</span>,],dtype=<span class="hljs-string">'int32'</span>)</span><br><span class="line">    model_user = Embedding(num_user+<span class="hljs-number">1</span>,k,input_length = <span class="hljs-number">1</span>)(input_user)</span><br><span class="line">    model_user = Reshape((k,))(model_user)</span><br><span class="line">    </span><br><span class="line">    input_moive = Input(shape=[<span class="hljs-literal">None</span>,],dtype=<span class="hljs-string">"int32"</span>)</span><br><span class="line">    model_moive = Embedding(num_movie+<span class="hljs-number">1</span>,k,input_length = <span class="hljs-number">1</span>)(input_moive)</span><br><span class="line">    model_moive = Reshape((k,))(model_moive)</span><br><span class="line">    </span><br><span class="line">    out = Dot(<span class="hljs-number">1</span>)([model_user,model_moive])</span><br><span class="line">    model = Model(input=[input_user,input_moive],outputs = out)</span><br><span class="line">    model.compile(loss = <span class="hljs-string">'mse'</span>,optimizer = <span class="hljs-string">'Adam'</span>)</span><br><span class="line">    model.summary()</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> model</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model =Recomand_model(num_user,num_movie,<span class="hljs-number">100</span>)</span><br></pre></td></tr></table></figure><p><strong>注</strong> </p><p><code>model.summary()</code>输出模型各层的参数状况</p><p>model.layers.Reshape() :将输出调整为特定的形状</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_u = rating[<span class="hljs-string">'userId'</span>].values</span><br><span class="line">train_i = rating[<span class="hljs-string">'movieId'</span>].values</span><br><span class="line">train_x = [train_u,train_i]</span><br><span class="line">train_y = rating[<span class="hljs-string">"rating"</span>].values</span><br></pre></td></tr></table></figure><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(train_x,train_y,batch_size = <span class="hljs-number">100</span>,epochs = <span class="hljs-number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.predict([[<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([[ 3.76612234]], dtype=float32)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Keras-note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keras-note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stanford-Machine-Learning-camp</title>
      <link href="/AngelNI.github.io/Stanford-Machine-Learning-camp/"/>
      <url>/AngelNI.github.io/Stanford-Machine-Learning-camp/</url>
      
        <content type="html"><![CDATA[<p> 曾经沧海难为水，却见巫山不是云。<a id="more"></a></p><h1 id="Stanford-Machine-Learning-camp"><a href="#Stanford-Machine-Learning-camp" class="headerlink" title="Stanford-Machine-Learning-camp"></a><strong>Stanford-Machine-Learning-camp</strong></h1><h2 id="课程资料"><a href="#课程资料" class="headerlink" title="课程资料"></a>课程资料</h2><ol><li><a href="https://www.coursera.org/course/ml" target="_blank" rel="noopener">课程主页</a>  </li><li><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89.pdf" target="_blank" rel="noopener">课程笔记</a>  </li><li><a href="https://www.bilibili.com/video/av9912938/?p=1" target="_blank" rel="noopener">课程视频</a>  </li><li><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/tree/master" target="_blank" rel="noopener">环境配置Anaconda</a></li><li><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/%E4%BD%9C%E4%B8%9A.md" target="_blank" rel="noopener">作业介绍</a> </li><li>比赛环境推荐使用Linux或者Mac系统，以下环境搭建方法皆适用:<br> <a href="https://github.com/ufoym/deepo" target="_blank" rel="noopener">Docker环境配置</a><br> <a href="https://github.com/learning511/cs224n-learning-camp/blob/master/environment.md" target="_blank" rel="noopener">本地环境配置</a></li></ol><h2 id="重要一些的资源："><a href="#重要一些的资源：" class="headerlink" title="重要一些的资源："></a>重要一些的资源：</h2><ol><li><a href="https://me.csdn.net/dukuku5038" target="_blank" rel="noopener">Dr.Wu 博客71篇(机器学习、深度学习、强化学习、对抗网络)</a>  </li><li><a href="https://www.zhihu.com/people/Dr.Wu/activities" target="_blank" rel="noopener">Dr.Wu 本人知乎</a>  </li><li><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap.git" target="_blank" rel="noopener">深度学习经典论文</a></li><li><a href="http://deeplearning.stanford.edu/wiki/index.php/UFLDL%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">深度学习斯坦福教程</a></li><li><a href="https://www.liaoxuefeng.com/article/001432619295115c918a094d8954bd493037b03d27bf9a9000" target="_blank" rel="noopener">廖雪峰python3教程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">github教程</a></li><li><a href="https://morvanzhou.github.io/tutorials" target="_blank" rel="noopener">莫烦机器学习教程</a></li><li><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap.git" target="_blank" rel="noopener">深度学习经典论文</a></li><li><a href="https://github.com/Avik-Jain/100-Days-Of-ML-Code" target="_blank" rel="noopener">机器学习代码修行100天</a>  </li><li><a href="https://github.com/AcceptedDoge/machine-learning-yearning-cn" target="_blank" rel="noopener">吴恩达机器学习新书：machine learning yearning</a>  </li><li><a href="https://blog.csdn.net/dukuku5038/article/details/82253966" target="_blank" rel="noopener">本人博客(机器学习基础算法专题)</a>  </li><li><a href="https://blog.csdn.net/column/details/28693.html" target="_blank" rel="noopener">本人博客(深度学习专题)</a>  </li><li><a href="https://github.com/ZuzooVn/machine-learning-for-software-engineers/blob/master/README-zh-CN.md" target="_blank" rel="noopener">自上而下的学习路线: 软件工程师的机器学习</a>  </li></ol><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h3 id="这门课的宗旨就是：-“手把手推导机器学习理论，行对行练习徒手代码过程”"><a href="#这门课的宗旨就是：-“手把手推导机器学习理论，行对行练习徒手代码过程”" class="headerlink" title="这门课的宗旨就是：*“手把手推导机器学习理论，行对行练习徒手代码过程” *"></a>这门课的宗旨就是：*<em>“手把手推导机器学习理论，行对行练习徒手代码过程” *</em></h3><p>吴恩达在斯坦福的机器学习课，是很多人最初入门机器学习的课，10年有余，目前仍然是最经典的机器学习课程之一。当时因为这门课太火爆，吴恩达不得不弄了个超大的网络课程来授课，结果一不小心从斯坦福火遍全球，而后来的事情大家都知道了。吴恩达这些年，从谷歌大脑项目到创立Coursera再到百度首席科学家再再到最新开设了深度学习deeplearning.ai，辗转多年依然对CS229不离不弃。  </p><p>个人认为：吴恩达的机器学习课程在机器学习入门的贡献相当于牛顿、莱布尼茨对于微积分的贡献。区别在于，吴恩达影响了10年，牛顿影响了200年。(个人观点)</p><p>本课程提供了一个广泛的介绍机器学习、数据挖掘、统计模式识别的课程。主题包括：</p><p>（一）监督学习（参数/非参数算法，支持向量机，核函数，神经网络）。</p><p>（二）无监督学习（聚类，降维，推荐系统，深入学习推荐）。</p><p>（三）在机器学习的最佳实践（偏差/方差理论；在机器学习和人工智能创新过程）。本课程还将使用大量的案例研究，您还将学习如何运用学习算法构建智能机器人（感知，控制），文本的理解（Web搜索，反垃圾邮件），计算机视觉，医疗信息，音频，数据挖掘，和其他领域。</p><p>本课程相对以前的机器学习视频cs229(2008)，这个视频更加清晰，而且每课都有课件，推荐学习。</p><h2 id="2-数学知识复习"><a href="#2-数学知识复习" class="headerlink" title="2.数学知识复习"></a>2.数学知识复习</h2><p>1.<a href="http://web.stanford.edu/class/cs224n/readings/cs229-linalg.pdf" target="_blank" rel="noopener">线性代数</a><br>2.<a href="http://web.stanford.edu/class/cs224n/readings/cs229-prob.pdf" target="_blank" rel="noopener">概率论</a><br>3.<a href="http://web.stanford.edu/class/cs224n/readings/cs229-cvxopt.pdf" target="_blank" rel="noopener">凸函数优化</a><br>4.<a href="http://cs231n.github.io/optimization-1/" target="_blank" rel="noopener">随机梯度下降算法</a>  </p><h4 id="中文资料："><a href="#中文资料：" class="headerlink" title="中文资料："></a>中文资料：</h4><ul><li><a href="https://www.cnblogs.com/steven-yang/p/6348112.html" target="_blank" rel="noopener">机器学习中的数学基本知识</a>  </li><li><a href="http://vdisk.weibo.com/s/vfFpMc1YgPOr" target="_blank" rel="noopener">统计学习方法</a>  </li></ul><p><strong>大学数学课本（从故纸堆里翻出来^_^）</strong>  </p><h3 id="3-编程工具"><a href="#3-编程工具" class="headerlink" title="3.编程工具"></a>3.编程工具</h3><h4 id="斯坦福资料："><a href="#斯坦福资料：" class="headerlink" title="斯坦福资料："></a>斯坦福资料：</h4><ul><li><a href="http://web.stanford.edu/class/cs224n/lectures/python-review.pdf" target="_blank" rel="noopener">Python复习</a>  </li></ul><h4 id="4-中文书籍推荐："><a href="#4-中文书籍推荐：" class="headerlink" title="4. 中文书籍推荐："></a>4. 中文书籍推荐：</h4><ul><li><p>《机器学习》周志华  </p></li><li><p>《统计学习方法》李航  </p></li><li><p>《机器学习课》邹博  </p></li></ul><h2 id="5-学习安排"><a href="#5-学习安排" class="headerlink" title="5. 学习安排"></a>5. 学习安排</h2><p>本课程需要11周共18节课，<br>每周具体时间划分为4个部分:  </p><ul><li>1部分安排周一到周二  </li><li>2部分安排在周四到周五  </li><li>3部分安排在周日  </li><li>4部分作业是本周任何时候空余时间    </li><li>周日晚上提交作业运行截图  </li><li>周三、周六休息^_^  </li></ul><h4 id="6-作业提交指南："><a href="#6-作业提交指南：" class="headerlink" title="6.作业提交指南："></a>6.作业提交指南：</h4><p> 训练营的作业自检系统已经正式上线啦！只需将作业发送到训练营公共邮箱即可，知识星球以打卡为主，不用提交作业。以下为注意事项:<br>&lt;1&gt; 训练营代码公共邮箱：<a href="mailto:cs229@163.com" target="_blank" rel="noopener">cs229@163.com</a><br>&lt;2&gt; <a href="https://shimo.im/sheets/HUCGWzMQGu8iCqT1" target="_blank" rel="noopener">查询自己成绩:</a><br>&lt;3&gt; 将每周作业压缩成zip文件，文件名为“学号+作业编号”，例如：”CS229-010037-01.zip”<br>&lt;4&gt; 注意不要改变作业中的《方法名》《类名》不然会检测失败！！ </p><h2 id="7-学习安排"><a href="#7-学习安排" class="headerlink" title="7.学习安排"></a>7.学习安排</h2><h3 id="week-1"><a href="#week-1" class="headerlink" title="week 1"></a>week 1</h3><p><strong>学习组队</strong><br><strong>比赛观摩</strong>  </p><p><strong>作业 Week1：</strong>:<br>制定自己的学习计划  </p><h3 id="week-2"><a href="#week-2" class="headerlink" title="week 2"></a>week 2</h3><p><strong>第一节： 引言(Introduction)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture1.pdf" target="_blank" rel="noopener">lecture1</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture1.pdf" target="_blank" rel="noopener">lecture1-note1</a><br><strong>视频：</strong><br>    1.1欢迎:<a href="https://www.bilibili.com/video/av9912938/?p=1" target="_blank" rel="noopener">Welcome to Machine Learning</a><br>    1.2机器学习是什么？:<a href="https://www.bilibili.com/video/av9912938/?p=2" target="_blank" rel="noopener">Welcome</a><br>    1.3监督学习:<a href="https://www.bilibili.com/video/av9912938/?p=3" target="_blank" rel="noopener">What is Machine Learning</a><br>    1.4无监督学习:<a href="https://www.bilibili.com/video/av9912938/?p=4" target="_blank" rel="noopener">Supervised Learning</a>  </p><p><strong>第二节： 单变量线性回归(Linear Regression with One Variable)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture2.pdf" target="_blank" rel="noopener">lecture2</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture2.pdf" target="_blank" rel="noopener">lecture2-note2</a><br><strong>视频：</strong><br>        2.1模型表示:<a href="https://www.bilibili.com/video/av9912938/?p=5" target="_blank" rel="noopener">Unsupervised Learning</a><br>        2.2代价函数:<a href="https://www.bilibili.com/video/av9912938/?p=6" target="_blank" rel="noopener">Model Representation</a><br>        2.3代价函数的直观理解I:<a href="https://www.bilibili.com/video/av9912938/?p=7" target="_blank" rel="noopener">Cost Function</a><br>        2.4代价函数的直观理解II:<a href="https://www.bilibili.com/video/av9912938/?p=8" target="_blank" rel="noopener">Cost Function - Intuition I</a><br>        2.5梯度下降:<a href="https://www.bilibili.com/video/av9912938/?p=9" target="_blank" rel="noopener">Cost Function - Intuition II</a><br>        2.6梯度下降的直观理解:<a href="https://www.bilibili.com/video/av9912938/?p=10" target="_blank" rel="noopener">Gradient Descent</a><br>        2.7梯度下降的线性回归:<a href="https://www.bilibili.com/video/av9912938/?p=11" target="_blank" rel="noopener">Gradient Descent Intuition</a><br>        2.8接下来的内容:<a href="https://www.bilibili.com/video/av9912938/?p=12" target="_blank" rel="noopener">GradientDescentForLinearRegression</a>                                     </p><p><strong>作业 Week2：</strong>:<br>1.环境配置<br>2.开学习博客和github  </p><hr><h3 id="week-3"><a href="#week-3" class="headerlink" title="week 3"></a>week 3</h3><p><strong>第三节： 线性代数回顾(Linear Algebra Review)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture3.pdf" target="_blank" rel="noopener">lecture3</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture3.pdf" target="_blank" rel="noopener">lecture3-note3</a><br><strong>视频：</strong><br>    3.1矩阵和向量:<a href="https://www.bilibili.com/video/av9912938/?p=13" target="_blank" rel="noopener">Matrices and Vectors</a><br>    3.2加法和标量乘法:<a href="https://www.bilibili.com/video/av9912938/?p=14" target="_blank" rel="noopener">Addition and Scalar Multiplication</a><br>    3.3矩阵向量乘法:<a href="https://www.bilibili.com/video/av9912938/?p=15" target="_blank" rel="noopener">Matrix Vector Multiplication</a><br>    3.4矩阵乘法:<a href="https://www.bilibili.com/video/av9912938/?p=16" target="_blank" rel="noopener">Matrix Matrix Multiplication</a><br>    3.5矩阵乘法的性质:<a href="https://www.bilibili.com/video/av9912938/?p=17" target="_blank" rel="noopener">Matrix Multiplication Properties</a><br>    3.6逆、转置:<a href="https://www.bilibili.com/video/av9912938/?p=18" target="_blank" rel="noopener">Inverse and Transpose</a>  </p><p><strong>第四节： 多变量线性回归(Linear Regression with Multiple Variables)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture4.pdf" target="_blank" rel="noopener">lecture4</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture4.pdf" target="_blank" rel="noopener">lecture4-note4</a><br><strong>视频：</strong><br>    4.1多维特征:<a href="https://www.bilibili.com/video/av9912938/?p=19" target="_blank" rel="noopener">Multiple Features</a><br>    4.2多变量梯度下降:<a href="https://www.bilibili.com/video/av9912938/?p=20" target="_blank" rel="noopener">Gradient Descent for Multiple Variables</a><br>    4.3梯度下降法实践1-特征缩放:<a href="https://www.bilibili.com/video/av9912938/?p=21" target="_blank" rel="noopener">Gradient Descent in Practice I - Feature Scaling</a><br>    4.4梯度下降法实践2-学习率:<a href="https://www.bilibili.com/video/av9912938/?p=22" target="_blank" rel="noopener">Gradient Descent in Practice II - Learning Rate</a><br>    4.5特征和多项式回归:<a href="https://www.bilibili.com/video/av9912938/?p=23" target="_blank" rel="noopener">Features and Polynomial Regression</a><br>    4.6正规方程:<a href="https://www.bilibili.com/video/av9912938/?p=24" target="_blank" rel="noopener">Normal Equation</a><br>    4.7正规方程及不可逆性（选修）:<a href="https://www.bilibili.com/video/av9912938/?p=25" target="_blank" rel="noopener">Normal Equation Noninvertibility (Optional)</a><br><strong>作业 Week3：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex1/ex1.pdf" target="_blank" rel="noopener">作业链接</a><br>1.线性回归 Linear Regression<br>2.多远线性回归 Linear Regression with multiple variables</p><hr><h3 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h3><p><strong>第五节：Octave教程(Octave Tutorial 选修)（有Python基础可以忽略）</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture5.pdf" target="_blank" rel="noopener">lecture5</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture5.pdf" target="_blank" rel="noopener">lecture5-note5</a><br><strong>视频：</strong><br>    5.1基本操作:<a href="https://www.bilibili.com/video/av9912938/?p=26" target="_blank" rel="noopener">Working on and Submitting Programming Exercises</a><br>    5.2移动数据:<a href="https://www.bilibili.com/video/av9912938/?p=27" target="_blank" rel="noopener">Basic Operations</a><br>    5.3计算数据:<a href="https://www.bilibili.com/video/av9912938/?p=28" target="_blank" rel="noopener">Moving Data Around</a><br>    5.4绘图数据:<a href="https://www.bilibili.com/video/av9912938/?p=29" target="_blank" rel="noopener">Computing on Data</a><br>    5.5控制语句：for，while，if语句:<a href="https://www.bilibili.com/video/av9912938/?p=30" target="_blank" rel="noopener">Plotting Data</a><br>    5.6向量化88:<a href="https://www.bilibili.com/video/av9912938/?p=31" target="_blank" rel="noopener">Control Statements</a><br>    5.7工作和提交的编程练习:<a href="https://www.bilibili.com/video/av9912938/?p=32" target="_blank" rel="noopener">Vectorization</a>  </p><p><strong>第六节：逻辑回归(Logistic Regression)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture6.pdf" target="_blank" rel="noopener">lecture6</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture6.pdf" target="_blank" rel="noopener">lecture6-note6</a><br><strong>视频：</strong><br>    6.1分类问题:<a href="https://www.bilibili.com/video/av9912938/?p=33" target="_blank" rel="noopener">Classification</a><br>    6.2假说表示:<a href="https://www.bilibili.com/video/av9912938/?p=34" target="_blank" rel="noopener">Hypothesis Representation</a><br>    6.3判定边界:<a href="https://www.bilibili.com/video/av9912938/?p=35" target="_blank" rel="noopener">Decision Boundary</a><br>    6.4代价函数:<a href="https://www.bilibili.com/video/av9912938/?p=36" target="_blank" rel="noopener">Cost Function</a><br>    6.5简化的成本函数和梯度下降:<a href="https://www.bilibili.com/video/av9912938/?p=37" target="_blank" rel="noopener">Simplified Cost Function and Gradient Descent</a><br>    6.6高级优化:<a href="https://www.bilibili.com/video/av9912938/?p=38" target="_blank" rel="noopener">Advanced Optimization</a><br>    6.7多类别分类：一对多:<a href="https://www.bilibili.com/video/av9912938/?p=39" target="_blank" rel="noopener">Multiclass Classification_ One-vs-all</a>  </p><p><strong>作业 Week4：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex2/ex2.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>逻辑回归 Logistic Regression</li><li>带有正则项的逻辑回归 Logistic Regression with Regularization</li></ol><hr><h3 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h3><p><strong>第七节：正则化(Regularization)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture7.pdf" target="_blank" rel="noopener">lecture7</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture7.pdf" target="_blank" rel="noopener">lecture7-note7</a><br><strong>视频：</strong><br>    7.1过拟合的问题:<a href="https://www.bilibili.com/video/av9912938/?p=40" target="_blank" rel="noopener">The Problem of Overfitting</a><br>    7.2代价函数:<a href="https://www.bilibili.com/video/av9912938/?p=41" target="_blank" rel="noopener">Cost Function</a><br>    7.3正则化线性回归:<a href="https://www.bilibili.com/video/av9912938/?p=42" target="_blank" rel="noopener">Regularized Linear Regression</a><br>    7.4正则化的逻辑回归模型:<a href="https://www.bilibili.com/video/av9912938/?p=43" target="_blank" rel="noopener">Regularized Logistic Regression</a>  </p><p><strong>第八节：神经网络：表述(Neural Networks: Representation)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture8.pdf" target="_blank" rel="noopener">lecture8</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture8.pdf" target="_blank" rel="noopener">lecture8-note8</a><br><strong>视频：</strong><br>    8.1非线性假设:<a href="https://www.bilibili.com/video/av9912938/?p=44" target="_blank" rel="noopener">Non-linear Hypotheses</a><br>    8.2神经元和大脑:<a href="https://www.bilibili.com/video/av9912938/?p=45" target="_blank" rel="noopener">Neurons and the Brain</a><br>    8.3模型表示1:<a href="https://www.bilibili.com/video/av9912938/?p=46" target="_blank" rel="noopener">Model Representation I</a><br>    8.4模型表示2:<a href="https://www.bilibili.com/video/av9912938/?p=47" target="_blank" rel="noopener">Model Representation II</a><br>    8.5样本和直观理解1:<a href="https://www.bilibili.com/video/av9912938/?p=48" target="_blank" rel="noopener">Examples and Intuitions I</a><br>    8.6样本和直观理解II:<a href="https://www.bilibili.com/video/av9912938/?p=49" target="_blank" rel="noopener">Examples and Intuitions II</a><br>    8.7多类分类:<a href="https://www.bilibili.com/video/av9912938/?p=50" target="_blank" rel="noopener">Multiclass Classification</a><br><strong>作业 Week5：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex3/ex3.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>多元分类 Multiclass Classification</li><li>神经网络预测函数 Neural Networks Prediction fuction</li></ol><hr><h3 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h3><p><strong>第九节1：神经网络的学习(Neural Networks: Learning1)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture9.pdf" target="_blank" rel="noopener">lecture9</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture9.pdf" target="_blank" rel="noopener">lecture9-note9</a><br><strong>视频：</strong><br>    9.1代价函数:<a href="https://www.bilibili.com/video/av9912938/?p=51" target="_blank" rel="noopener">Cost Function</a><br>    9.2反向传播算法:<a href="https://www.bilibili.com/video/av9912938/?p=52" target="_blank" rel="noopener">Backpropagation Algorithm</a><br>    9.3反向传播算法的直观理解:<a href="https://www.bilibili.com/video/av9912938/?p=53" target="_blank" rel="noopener">Backpropagation Intuition</a>  </p><p><strong>第九节2：神经网络的学习(Neural Networks: Learning2)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture9.pdf" target="_blank" rel="noopener">lecture9</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture9.pdf" target="_blank" rel="noopener">lecture9-note9</a><br><strong>视频：</strong><br>    9.4实现注意：展开参数:<a href="https://www.bilibili.com/video/av9912938/?p=54" target="_blank" rel="noopener">Implementation Note_ Unrolling Parameters</a><br>    9.5梯度检验:<a href="https://www.bilibili.com/video/av9912938/?p=55" target="_blank" rel="noopener">Gradient Checking</a><br>    9.6随机初始化:<a href="https://www.bilibili.com/video/av9912938/?p=56" target="_blank" rel="noopener">Random Initialization</a><br>    9.7综合起来:<a href="https://www.bilibili.com/video/av9912938/?p=57" target="_blank" rel="noopener">Putting It Together</a><br>    9.8自主驾驶:<a href="https://www.bilibili.com/video/av9912938/?p=58" target="_blank" rel="noopener">Autonomous Driving</a>  </p><p><strong>作业 Week6：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex4/ex4.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>神经网络实现 Neural Networks Learning  </li></ol><hr><h3 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h3><p><strong>第十节：应用机器学习的建议(Advice for Applying Machine Learning)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture10.pdf" target="_blank" rel="noopener">lecture10</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture10.pdf" target="_blank" rel="noopener">lecture10-note10</a><br><strong>视频：</strong><br>    10.1决定下一步做什么:<a href="https://www.bilibili.com/video/av9912938/?p=59" target="_blank" rel="noopener">Deciding What to Try Next</a><br>    10.2评估一个假设:<a href="https://www.bilibili.com/video/av9912938/?p=60" target="_blank" rel="noopener">Evaluating a Hypothesis</a><br>    10.3模型选择和交叉验证集:<a href="https://www.bilibili.com/video/av9912938/?p=61" target="_blank" rel="noopener">Model Selection and Train_Validation_Test Sets</a><br>    10.4诊断偏差和方差:<a href="https://www.bilibili.com/video/av9912938/?p=62" target="_blank" rel="noopener">Diagnosing Bias vs. Variance</a><br>    10.5正则化和偏差/方差:<a href="https://www.bilibili.com/video/av9912938/?p=63" target="_blank" rel="noopener">Regularization and Bias_Variance</a><br>    10.6学习曲线:<a href="https://www.bilibili.com/video/av9912938/?p=64" target="_blank" rel="noopener">Learning Curves</a><br>    10.7决定下一步做什么:<a href="https://www.bilibili.com/video/av9912938/?p=65" target="_blank" rel="noopener">Deciding What to Do Next Revisited</a><br><strong>第十一节：  机器学习系统的设计(Machine Learning System Design)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture11.pdf" target="_blank" rel="noopener">lecture11</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture11.pdf" target="_blank" rel="noopener">lecture11-note11</a><br><strong>视频：</strong><br>    11.1首先要做什么:<a href="https://www.bilibili.com/video/av9912938/?p=66" target="_blank" rel="noopener">Prioritizing What to Work On</a><br>    11.2误差分析:<a href="https://www.bilibili.com/video/av9912938/?p=67" target="_blank" rel="noopener">Error Analysis</a><br>    11.3类偏斜的误差度量:<a href="https://www.bilibili.com/video/av9912938/?p=68" target="_blank" rel="noopener">Error Metrics for Skewed Classes</a><br>    11.4查准率和查全率之间的权衡:<a href="https://www.bilibili.com/video/av9912938/?p=69" target="_blank" rel="noopener">Trading Off Precision and Recall</a><br>    11.5机器学习的数据:<a href="https://www.bilibili.com/video/av9912938/?p=70" target="_blank" rel="noopener">Data For Machine Learning</a><br><strong>作业 Week7：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex5/ex5.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>正则线性回归 Regularized Linear Regression  </li><li>偏移和方差 Bias vs. Variance  </li></ol><hr><h3 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h3><p><strong>第十二节：支持向量机(Support Vector Machines)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture12.pdf" target="_blank" rel="noopener">lecture12</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture12.pdf" target="_blank" rel="noopener">lecture12-note12</a><br><strong>视频：</strong><br>    12.1优化目标:<a href="https://www.bilibili.com/video/av9912938/?p=71" target="_blank" rel="noopener">Optimization Objective</a><br>    12.2大边界的直观理解:<a href="https://www.bilibili.com/video/av9912938/?p=72" target="_blank" rel="noopener">Large Margin Intuition</a><br>    12.3数学背后的大边界分类（选修）:<a href="https://www.bilibili.com/video/av9912938/?p=73" target="_blank" rel="noopener">Mathematics Behind Large Margin Classification (Optional)</a><br>    12.4核函数1:<a href="https://www.bilibili.com/video/av9912938/?p=74" target="_blank" rel="noopener">Kernels I</a><br>    12.5核函数2:<a href="https://www.bilibili.com/video/av9912938/?p=75" target="_blank" rel="noopener">Kernels II</a><br>    12.6使用支持向量机:<a href="https://www.bilibili.com/video/av9912938/?p=76" target="_blank" rel="noopener">Using An SVM</a>  </p><p><strong>第十三节：聚类(Clustering)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture13.pdf" target="_blank" rel="noopener">lecture13</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture13.pdf" target="_blank" rel="noopener">lecture13-note13</a><br><strong>视频：</strong><br>    13.1无监督学习：简介:<a href="https://www.bilibili.com/video/av9912938/?p=77" target="_blank" rel="noopener">Unsupervised Learning_ Introduction</a><br>    13.2K-均值算法:<a href="https://www.bilibili.com/video/av9912938/?p=78" target="_blank" rel="noopener">K-Means Algorithm</a><br>    13.3优化目标:<a href="https://www.bilibili.com/video/av9912938/?p=79" target="_blank" rel="noopener">Optimization Objective</a><br>    13.4随机初始化:<a href="https://www.bilibili.com/video/av9912938/?p=80" target="_blank" rel="noopener">Random Initialization</a><br>    13.5选择聚类数:<a href="https://www.bilibili.com/video/av9912938/?p=81" target="_blank" rel="noopener">Choosing the Number of Clusters</a><br><strong>作业 Week8：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex6/ex6.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>SVM实现</li><li>垃圾邮件分类 Spam email Classifier  </li></ol><hr><h3 id="Week-9"><a href="#Week-9" class="headerlink" title="Week 9"></a>Week 9</h3><p><strong>第十四节：降维(Dimensionality Reduction)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture14.pdf" target="_blank" rel="noopener">lecture14</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture14.pdf" target="_blank" rel="noopener">lecture14-note14</a><br><strong>视频：</strong><br>    14.1动机一：数据压缩:<a href="https://www.bilibili.com/video/av9912938/?p=82" target="_blank" rel="noopener">Motivation I_ Data Compression</a><br>    14.2动机二：数据可视化:<a href="https://www.bilibili.com/video/av9912938/?p=83" target="_blank" rel="noopener">Motivation II_ Visualization</a><br>    14.3主成分分析问题:<a href="https://www.bilibili.com/video/av9912938/?p=84" target="_blank" rel="noopener">Principal Component Analysis Problem Formulation</a><br>    14.4主成分分析算法:<a href="https://www.bilibili.com/video/av9912938/?p=85" target="_blank" rel="noopener">Principal Component Analysis Algorithm</a><br>    14.5选择主成分的数量:<a href="https://www.bilibili.com/video/av9912938/?p=86" target="_blank" rel="noopener">Choosing the Number of Principal Components</a><br>    14.6重建的压缩表示:<a href="https://www.bilibili.com/video/av9912938/?p=87" target="_blank" rel="noopener">Reconstruction from Compressed Representation</a><br>    14.7主成分分析法的应用建议:<a href="https://www.bilibili.com/video/av9912938/?p=88" target="_blank" rel="noopener">Advice for Applying PCA</a>  </p><p><strong>第十五节：异常检测(Anomaly Detection)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture15.pdf" target="_blank" rel="noopener">lecture15</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture15.pdf" target="_blank" rel="noopener">lecture15-note15</a><br><strong>视频：</strong><br>    15.1问题的动机:<a href="https://www.bilibili.com/video/av9912938/?p=89" target="_blank" rel="noopener">Problem Motivation</a><br>    15.2高斯分布:<a href="https://www.bilibili.com/video/av9912938/?p=90" target="_blank" rel="noopener">Gaussian Distribution</a><br>    15.3算法:<a href="https://www.bilibili.com/video/av9912938/?p=91" target="_blank" rel="noopener">Algorithm</a><br>    15.4开发和评价一个异常检测系统:<a href="https://www.bilibili.com/video/av9912938/?p=92" target="_blank" rel="noopener">Developing and Evaluating an Anomaly Detection System</a><br>    15.5异常检测与监督学习对比:<a href="https://www.bilibili.com/video/av9912938/?p=93" target="_blank" rel="noopener">Anomaly Detection vs. Supervised Learning</a><br>    15.6选择特征:<a href="https://www.bilibili.com/video/av9912938/?p=94" target="_blank" rel="noopener">Choosing What Features to Use</a><br>    15.7多元高斯分布（选修）:<a href="https://www.bilibili.com/video/av9912938/?p=95" target="_blank" rel="noopener">Multivariate Gaussian Distribution (Optional)</a><br>    15.8使用多元高斯分布进行异常检测（选修）:<a href="https://www.bilibili.com/video/av9912938/?p=96" target="_blank" rel="noopener">Anomaly Detection using the Multivariate Gaussian Distribution (Optiona</a><br><strong>作业 Week9：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex7/ex7.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>K-means 聚类算法 Clustering  </li><li>PCA 主成分析 Principal Component Analysis  </li></ol><hr><h3 id="Week-10"><a href="#Week-10" class="headerlink" title="Week 10"></a>Week 10</h3><p><strong>第十六节：推荐系统(Recommender Systems)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture16.pdf" target="_blank" rel="noopener">lecture16</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture16.pdf" target="_blank" rel="noopener">lecture16-note16</a><br><strong>视频：</strong><br>    16.1问题形式化:<a href="https://www.bilibili.com/video/av9912938/?p=97" target="_blank" rel="noopener">Problem Formulation</a><br>    16.2基于内容的推荐系统:<a href="https://www.bilibili.com/video/av9912938/?p=98" target="_blank" rel="noopener">Content Based Recommendations</a><br>    16.3协同过滤:<a href="https://www.bilibili.com/video/av9912938/?p=99" target="_blank" rel="noopener">Collaborative Filtering</a><br>    16.4协同过滤算法:<a href="https://www.bilibili.com/video/av9912938/?p=100" target="_blank" rel="noopener">Collaborative Filtering Algorithm</a><br>    16.5向量化：低秩矩阵分解:<a href="https://www.bilibili.com/video/av9912938/?p=101" target="_blank" rel="noopener">Vectorization_ Low Rank Matrix Factorization</a><br>    16.6推行工作上的细节：均值归一化:<a href="https://www.bilibili.com/video/av9912938/?p=102" target="_blank" rel="noopener">Implementational Detail_ Mean Normalization</a>  </p><p><strong>第十七节：大规模机器学习(Large Scale Machine Learning)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture17.pdf" target="_blank" rel="noopener">lecture17</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture17.pdf" target="_blank" rel="noopener">lecture17-note17</a>)<br><strong>视频：</strong><br>    17.1大型数据集的学习:<a href="https://www.bilibili.com/video/av9912938/?p=103" target="_blank" rel="noopener">Learning With Large Datasets</a><br>    17.2随机梯度下降法:<a href="https://www.bilibili.com/video/av9912938/?p=104" target="_blank" rel="noopener">Stochastic Gradient Descent</a><br>    17.3小批量梯度下降:<a href="https://www.bilibili.com/video/av9912938/?p=105" target="_blank" rel="noopener">Mini-Batch Gradient Descent</a><br>    17.4随机梯度下降收敛:<a href="https://www.bilibili.com/video/av9912938/?p=106" target="_blank" rel="noopener">Stochastic Gradient Descent Convergence</a><br>    17.5在线学习:<a href="https://www.bilibili.com/video/av9912938/?p=107" target="_blank" rel="noopener">Online Learning</a><br>    17.6映射化简和数据并行:<a href="https://www.bilibili.com/video/av9912938/?p=108" target="_blank" rel="noopener">Map Reduce and Data Parallelism</a>  </p><p><strong>作业 Week10：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex8/ex8.pdf" target="_blank" rel="noopener">作业链接</a>  </p><ol><li>异常检测 Anomaly Detection    </li></ol><hr><h3 id="Week-11"><a href="#Week-11" class="headerlink" title="Week 11"></a>Week 11</h3><p><strong>第十八节1： 应用实例：图片文字识别(Application Example: Photo OCR)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture18.pdf" target="_blank" rel="noopener">lecture18</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture18.pdf" target="_blank" rel="noopener">lecture18-note18</a><br><strong>视频：</strong><br>    18.1问题描述和流程图:<a href="https://www.bilibili.com/video/av9912938/?p=109" target="_blank" rel="noopener">Problem Description and Pipeline</a><br>    18.2滑动窗口:<a href="https://www.bilibili.com/video/av9912938/?p=110" target="_blank" rel="noopener">Sliding Windows</a><br><strong>第十八节2： 应用实例：图片文字识别(Application Example: Photo OCR)</strong><br><strong>课件：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture%20/Lecture18.pdf" target="_blank" rel="noopener">lecture18</a><br><strong>笔记：</strong><a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Course/lecture-notes/lecture18.pdf" target="_blank" rel="noopener">lecture1-note18</a>)<br><strong>视频：</strong><br>    18.3获取大量数据和人工数据:<a href="https://www.bilibili.com/video/av9912938/?p=111" target="_blank" rel="noopener">Getting Lots of Data and Artificial Data</a><br>    18.4上限分析：哪部分管道的接下去做:<a href="https://www.bilibili.com/video/av9912938/?p=112" target="_blank" rel="noopener">Ceiling Analysis_ What Part of the Pipeline to Work on Next</a>  </p><p><strong>作业 Week11：</strong>: <a href="https://github.com/learning511/Stanford-Machine-Learning-camp/blob/master/Assignments/machine-learning-ex8/ex8.pdf" target="_blank" rel="noopener">作业链接</a><br>2.推荐系统实现 Recommender Systems<br>*<em>课程比赛：比赛介绍: *</em>  </p><hr><h3 id="Week-12"><a href="#Week-12" class="headerlink" title="Week 12"></a>Week 12</h3><p><strong>第十九节：总结(Conclusion)</strong><br><strong>视频：</strong><br>19.1总结和致谢:<a href="https://www.bilibili.com/video/av9912938/?p=113" target="_blank" rel="noopener">Summary and Thank You</a><br>*<em>课程比赛：比赛: *</em><br> Kaggle 比赛： 泰坦尼克 Titanic</p><hr>]]></content>
      
      
      <categories>
          
          <category> Machine-learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine-learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras-learn-note(2)</title>
      <link href="/AngelNI.github.io/Keras-note-2/"/>
      <url>/AngelNI.github.io/Keras-note-2/</url>
      
        <content type="html"><![CDATA[<p> 要么出众，要么出局，乾坤未定，你我都是黑马。<a id="more"></a></p><h1 id="1-Keras后端😉"><a href="#1-Keras后端😉" class="headerlink" title="1  Keras后端😉"></a>1  Keras后端😉</h1><p>Keras是一个模型级的库，提供了快速构建深度学习网络的模块。Keras并不处理如张量乘法、卷积等底层操作。这些操作依赖于某种特定的、优化良好的张量操作库。Keras依赖于处理张量的库就称为“后端引擎”。Keras提供了三种后端引擎Theano/Tensorflow/CNTK，并将其函数统一封装，使得用户可以以同一个接口调用不同后端引擎的函数</p><p>Theano是一个开源的符号主义张量操作框架，由蒙特利尔大学LISA/MILA实验室开发。</p><p>TensorFlow是一个符号主义的张量操作框架，由Google开发。</p><p>CNTK是一个由微软开发的商业级工具包。</p><h2 id="1-1-切换后端"><a href="#1-1-切换后端" class="headerlink" title="1.1  切换后端"></a>1.1  切换后端</h2><p>如果你至少运行过一次Keras，你将在下面的目录下找到Keras的配置文件：</p><p>c:/user/.keras/keras.json</p><p>如果该目录下没有该文件，你可以手动创建一个</p><p>文件的默认配置如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;image_data_format&quot;: &quot;channels_last&quot;,</span><br><span class="line">    &quot;epsilon&quot;: 1e-07,</span><br><span class="line">    &quot;floatx&quot;: &quot;float32&quot;,</span><br><span class="line">    &quot;backend&quot;: &quot;tensorflow&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将backend字段的值改写为你需要使用的后端：theano或tensorflow或者CNTK，即可完成后端的切换</p><h1 id="2-第一个模型：全连接网络🤩"><a href="#2-第一个模型：全连接网络🤩" class="headerlink" title="2  第一个模型：全连接网络🤩"></a>2  第一个模型：全连接网络🤩</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> Input, Dense</span><br><span class="line"><span class="hljs-keyword">from</span> keras.models <span class="hljs-keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># this returns a tensor</span></span><br><span class="line">inputs = Input(shape=(<span class="hljs-number">784</span>,))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># a layer instance is callable on a tensor, and returns a tensor</span></span><br><span class="line">x = Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(inputs)</span><br><span class="line">x = Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">'relu'</span>)(x)</span><br><span class="line">predictions = Dense(<span class="hljs-number">10</span>, activation=softmax)(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># this creates a model that includes</span></span><br><span class="line"><span class="hljs-comment"># the Input layer and three Dense layers</span></span><br><span class="line">model = Model(input=inputs, output=predictions)</span><br><span class="line">model.compile(optimizer=<span class="hljs-string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="hljs-string">'categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="hljs-string">'accuracy'</span>])</span><br><span class="line">model.fit(data, labels)  <span class="hljs-comment"># starts training</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">softmax</span><span class="hljs-params">(x, axis=<span class="hljs-number">-1</span>)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Softmax of a tensor.</span></span><br><span class="line"><span class="hljs-string"> </span></span><br><span class="line"><span class="hljs-string">    # Arguments</span></span><br><span class="line"><span class="hljs-string">        x: A tensor or variable.</span></span><br><span class="line"><span class="hljs-string">        axis: The dimension softmax would be performed on.</span></span><br><span class="line"><span class="hljs-string">            The default is -1 which indicates the last dimension.</span></span><br><span class="line"><span class="hljs-string"> </span></span><br><span class="line"><span class="hljs-string">    # Returns</span></span><br><span class="line"><span class="hljs-string">        A tensor.</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tf.nn.softmax(x, dim=axis)</span><br></pre></td></tr></table></figure><h2 id="2-1-函数介绍"><a href="#2-1-函数介绍" class="headerlink" title="2.1  函数介绍"></a>2.1  函数介绍</h2><h3 id="2-1-1-Input"><a href="#2-1-1-Input" class="headerlink" title="2.1.1  Input"></a>2.1.1  Input</h3><p>nput(shape=None,batch_shape=None,name=None,dtype=K.floatx(),sparse=False,tensor=None)</p><ol><li>shape: 形状元组（整型）</li><li>batch_shape: 形状元组（整型）</li><li>name: 对于该层是可选的名字字符串</li><li>dtype: 预期的输入数据类型</li><li>sparse: 特定的布尔值，占位符是否为sparse</li><li>tensor: 可选的存在的向量包装到Input层，如果设置了，该层将不会创建一个占位张量。</li></ol><p>返回值：一个张量</p><h3 id="2-1-2-Dense"><a href="#2-1-2-Dense" class="headerlink" title="2.1.2  Dense"></a>2.1.2  Dense</h3><p>keras.layers.core.Dense(output_dim, init=’glorot_uniform’, activation=’linear’, weights=None, W_regularizer=None, b_regularizer=None, activity_regularizer=None, W_constraint=None, b_constraint=None, bias=True, input_dim=None)</p><p>Dense层就是全链接层</p><ol><li>output_dim：大于0的整数，代表该层的输出维度。模型中非首层的全连接层其输入维度可以自动推断，因此非首层的全连接定义时不需要指定输入维度。</li><li>init：初始化方法，为预定义初始化方法名的字符串，或用于初始化权重的Theano函数。该参数仅在不传递weights参数时才有意义。</li><li>activation：激活函数，</li><li>weights：权值，为numpy array的list。该list应含有一个形如（input_dim,output_dim）的权重矩阵和一个形如(output_dim,)的偏置向量</li><li>W_regularizer：施加在权重上的正则项，为WeightRegularizer对象</li><li>b_regularizer：施加在偏置向量上的正则项，为WeightRegularizer对象</li><li>activity_regularizer：施加在输出上的正则项，为ActivityRegularizer对象</li><li>W_constraints：施加在权重上的约束项，为Constraints对象</li><li>b_constraints：施加在偏置上的约束项，为Constraints对象</li><li>bias：布尔值，是否包含偏置向量（即层对输入做线性变换还是仿射变换）</li><li>input_dim：整数，输入数据的维度。当Dense层作为网络的第一层时，必须指定该参数或input_shape参数。</li></ol><h3 id="2-1-3-Model"><a href="#2-1-3-Model" class="headerlink" title="2.1.3  Model"></a>2.1.3  Model</h3><p>函数式模型</p><p><strong>常用Model属性</strong></p><ol><li>model.layers：组成模型图的各个层</li><li>model.inputs：模型的输入张量列表</li><li>model.outputs：模型的输出张量列表</li></ol><h3 id="2-1-4-Model模型方法"><a href="#2-1-4-Model模型方法" class="headerlink" title="2.1.4  Model模型方法"></a>2.1.4  Model模型方法</h3><p><strong>compile</strong></p><p>compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None)</p><ol><li>loss=’目标函数’</li><li>optimizer：优化器</li><li>metrics=[‘accuracy’])metrics: 列表，包含评估模型在训练和测试时的性能的指标</li></ol><p>其他，我这个菜鸡用的的比较少，这里不一一列举</p><p><strong>fit</strong></p><p>fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)</p><p>model.fit（）向模型中输入训练集，验证集，迭代次数</p><p>fit()用于使用给定输入训练模型.</p><p><strong>evaluate</strong></p><p>evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None)</p><p>model.evaluate():就像他的名字一样，主要对模型进行评估</p><p>Keras中model.evaluate（）返回的是 损失值和你选定的指标值（例如，精度accuracy）</p><p><strong>predict</strong></p><p>predict(self, x, batch_size=32, verbose=0)</p><p>predict()用于实际预测.它为输入样本生成输出预测.</p><p><strong>Embedding</strong></p><p>Embedding(input_dim, output_dim, embeddings_initializer=’uniform’, embeddings_regularizer=None, activity_regularizer=None, embeddings_constraint=None, mask_zero=False, input_length=None)</p><p>嵌入层将正整数（下标）转换为具有固定大小的向量，如[[4],[20]]-&gt;[[0.25,0.1],[0.6,-0.2]]</p><p>Embedding层只能作为模型的第一层</p><ol><li>input_dim：大或等于0的整数，字典长度，即输入数据最大下标+1</li><li>output_dim：大于0的整数，代表全连接嵌入的维度</li><li>embeddings_initializer: 嵌入矩阵的初始化方法，为预定义初始化方法名的字符串，或用于初始化权重的初始化器。参考initializers</li><li>embeddings_regularizer: 嵌入矩阵的正则项，为Regularizer对象</li><li>embeddings_constraint: 嵌入矩阵的约束项，为Constraints对象</li><li>mask_zero：布尔值，确定是否将输入中的‘0’看作是应该被忽略的‘填充’（padding）值，该参数在使用递归层处理变长输入时有用。设置为True的话，模型中后续的层必须都支持masking，否则会抛出异常。如果该值为True，则下标0在字典中不可用，input_dim应设置为|vocabulary| + 1。</li><li>input_length：当输入序列的长度固定时，该值为其长度。如果要在该层后接Flatten层，然后接Dense层，则必须指定该参数，否则Dense层的输出维度无法自动推断。</li></ol><h1 id="3-Keras-实现手写数字识别🤪"><a href="#3-Keras-实现手写数字识别🤪" class="headerlink" title="3  Keras 实现手写数字识别🤪"></a>3  Keras 实现手写数字识别🤪</h1><p>下载数据.外网，要翻墙，下载速度快赶上蜗牛了</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> keras</span><br><span class="line"><span class="hljs-keyword">from</span> keras.datasets <span class="hljs-keyword">import</span> mnist</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt </span><br><span class="line">%matplotlib inline</span><br><span class="line">(train_images,train_labels),(test_images,test_labels) = mnist.load_data()</span><br></pre></td></tr></table></figure><p>查看一下数据集大小</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">"shape og train images is "</span>,train_images.shape)</span><br><span class="line">print(<span class="hljs-string">"shape of train label is "</span>,train_labels.shape)</span><br><span class="line">print(<span class="hljs-string">"train labels is "</span>,train_labels)</span><br><span class="line">print(<span class="hljs-string">'shape of test images is '</span>,test_labels.shape)</span><br><span class="line">print(<span class="hljs-string">'shape of test labels is '</span>,test_labels.shape)</span><br><span class="line">print(<span class="hljs-string">"test labels is "</span>,test_labels)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/20/mJK3Dg.png" alt border="0"><p>想不想看看手写数字长啥样？？几行代码轻松搞定。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.imshow(train_images[<span class="hljs-number">0</span>])</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.grid(<span class="hljs-literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/20/mJK7ad.png" alt border="0"><p>为什么会有颜色呢？让我们变为灰度图片再看看</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">train_images= train_images / <span class="hljs-number">255.0</span></span><br><span class="line">test_images= test_images / <span class="hljs-number">255.0</span></span><br><span class="line">plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">25</span>):</span><br><span class="line">    plt.subplot(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,i+<span class="hljs-number">1</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.grid(<span class="hljs-literal">False</span>)</span><br><span class="line">    plt.imshow(train_images[i], cmap=plt.cm.binary)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/20/mJMUdH.png" alt border="0"><p>好了数据大小也有了，手写数字也看了，接下来就让我们建立神经网络模型了。</p><p><strong>建立模型</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">softmax</span><span class="hljs-params">(x, axis=<span class="hljs-number">-1</span>)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Softmax of a tensor.</span></span><br><span class="line"><span class="hljs-string"> </span></span><br><span class="line"><span class="hljs-string">    # Arguments</span></span><br><span class="line"><span class="hljs-string">        x: A tensor or variable.</span></span><br><span class="line"><span class="hljs-string">        axis: The dimension softmax would be performed on.</span></span><br><span class="line"><span class="hljs-string">            The default is -1 which indicates the last dimension.</span></span><br><span class="line"><span class="hljs-string"> </span></span><br><span class="line"><span class="hljs-string">    # Returns</span></span><br><span class="line"><span class="hljs-string">        A tensor.</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    <span class="hljs-keyword">return</span> tf.nn.softmax(x, dim=axis)</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 设计网络</span></span><br><span class="line"><span class="hljs-keyword">from</span> keras <span class="hljs-keyword">import</span> models</span><br><span class="line"><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> Dense</span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">network = models.Sequential()</span><br><span class="line">network.add(Dense(<span class="hljs-number">512</span>,activation = <span class="hljs-string">"relu"</span>,input_shape=(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>,)))</span><br><span class="line">network.add(Dense(<span class="hljs-number">10</span>,activation = softmax))</span><br></pre></td></tr></table></figure><p><strong>训练模型</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#编译网络</span></span><br><span class="line">network.compile( </span><br><span class="line">    optimizer = <span class="hljs-string">'rmsprop'</span>,loss=<span class="hljs-string">'categorical_crossentropy'</span>,metrics = [<span class="hljs-string">'accuracy'</span>])</span><br><span class="line"><span class="hljs-comment">#数据处理</span></span><br><span class="line">train_images = train_images.reshape((<span class="hljs-number">60000</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>))</span><br><span class="line">train_images = train_images.astype(<span class="hljs-string">'float32'</span>)/<span class="hljs-number">255</span></span><br><span class="line"></span><br><span class="line">test_images = test_images.reshape((<span class="hljs-number">10000</span>,<span class="hljs-number">28</span>*<span class="hljs-number">28</span>))</span><br><span class="line">test_images = test_images.astype(<span class="hljs-string">'float32'</span>)/<span class="hljs-number">255</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#处理标签</span></span><br><span class="line"><span class="hljs-keyword">from</span> keras.utils <span class="hljs-keyword">import</span> to_categorical</span><br><span class="line">train_labels = to_categorical(train_labels)</span><br><span class="line">test_labels = to_categorical(test_labels)</span><br><span class="line"><span class="hljs-comment">#训练模型</span></span><br><span class="line">network.fit(train_images,train_labels,epochs = <span class="hljs-number">5</span>,batch_size = <span class="hljs-number">10</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/20/mJQ074.png" alt border="0"><p><strong>测试模型</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_loss,test_acc = network.evaluate(test_images,test_labels)</span><br><span class="line">print(<span class="hljs-string">f'test_loss : <span class="hljs-subst">&#123;test_loss&#125;</span>'</span>)</span><br><span class="line">print(<span class="hljs-string">f'test_acc :<span class="hljs-subst">&#123;test_acc&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/20/mJQ2jK.png" alt border="0"><h1 id="4-总结💪"><a href="#4-总结💪" class="headerlink" title="4.总结💪"></a>4.总结💪</h1><p>以上就简单的实现了用keras实现手写数据的识别，代码简短，但老记不住，忘记该用啥，该怎么拼写😅😅😅，理论基础还是要背牢的，还要多多使用啊，熟能生巧</p>]]></content>
      
      
      <categories>
          
          <category> Keras-note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keras-note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras-learn-note(1)</title>
      <link href="/AngelNI.github.io/Keras-note-1/"/>
      <url>/AngelNI.github.io/Keras-note-1/</url>
      
        <content type="html"><![CDATA[<p> 越努力，越幸运。<a id="more"></a></p><h1 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h1><p>在开始学习Keras之前，一些基础知识是必备的，关于深度学习的基本概念和技术，在使用Keras之前大体了解一下基础知识，这将减少你学习中的困惑。</p><h2 id="1-符号计算"><a href="#1-符号计算" class="headerlink" title="1.符号计算"></a>1.符号计算</h2><p>Keras的底层库使用Theano或TensorFlow，这两个库也称为Keras的后端。无论是Theano还是TensorFlow，都是一个“符号式”的库。</p><p>因此，这也使得Keras的编程与传统的Python代码有所差别。笼统的说，符号主义的计算首先定义各种变量，然后建立一个“计算图”，计算图规定了各个变量之间的计算关系。建立好的计算图需要编译以确定其内部细节，然而，此时的计算图还是一个“空壳子”，里面没有任何实际的数据，只有当你把需要运算的输入放进去后，才能在整个模型中形成数据流，从而形成输出值。</p><p>就像用管道搭建供水系统，当你在拼水管的时候，里面是没有水的。只有所有的管子都接完了，才能送水。</p><p>Keras的模型搭建形式就是这种方法，在你搭建Keras模型完毕后，你的模型就是一个空壳子，只有实际生成可调用的函数后（K.function），输入数据，才会形成真正的数据流。</p><h2 id="2-张量"><a href="#2-张量" class="headerlink" title="2.张量"></a>2.张量</h2><p>张量是什么，一上来我也一脸懵逼，看了解释之后，嗯嗯。</p><p>张量可以看作是向量、矩阵的自然推广，用张量来表示广泛的数据类型。</p><p>规模最小的张量是0阶张量，即标量，也就是一个数。</p><p>当我们把一些数有序的排列起来，就形成了1阶张量，也就是一个向量</p><p>如果我们继续把一组向量有序的排列起来，就形成了2阶张量，也就是一个矩阵</p><p>把矩阵摞起来，就是3阶张量，我们可以称为一个立方体，具有3个颜色通道的彩色图片就是一个这样的立方体</p><p>把立方体摞起来，好吧这次我们真的没有给它起别名了，就叫4阶张量了，不要去试图想像4阶张量是什么样子，它就是个数学上的概念。</p><p>张量的阶数有时候也称为维度，或者轴，轴这个词翻译自英文axis。譬如一个矩阵[[1,2],[3,4]]，是一个2阶张量，有两个维度或轴，沿着第0个轴（为了与python的计数方式一致，本文档维度和轴从0算起）你看到的是[1,2]，[3,4]两个向量，沿着第1个轴你看到的是[1,3]，[2,4]两个向量。</p><p>要理解“沿着某个轴”是什么意思，不妨看下下面的代码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])</span><br><span class="line">sum0 = np.sum(a, axis=<span class="hljs-number">0</span>)</span><br><span class="line">sum1 = np.sum(a, axis=<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">print(sum0)</span><br><span class="line">print(sum1)</span><br></pre></td></tr></table></figure><p>如果从坐标系的角度看二维矩阵，所谓的0轴就是沿y轴负方向，1轴沿x轴正方向。</p><img src="https://s2.ax1x.com/2019/08/19/m8Kkjg.png" alt border="0"><h2 id="3-data-format"><a href="#3-data-format" class="headerlink" title="3.data_format"></a>3.data_format</h2><p>这是一个无可奈何的问题，在如何表示一组彩色图片的问题上，Theano和TensorFlow发生了分歧，’th’模式，也即Theano模式会把100张RGB三通道的16×32（高为16宽为32）彩色图表示为下面这种形式（100,3,16,32），Caffe采取的也是这种方式。第0个维度是样本维，代表样本的数目，第1个维度是通道维，代表颜色通道数。后面两个就是高和宽了。这种theano风格的数据组织方法，称为“channels_first”，即通道维靠前。</p><p>而TensorFlow，的表达形式是（100,16,32,3），即把通道维放在了最后，这种数据组织方式称为“channels_last”。</p><p>Keras默认的数据组织形式在~/.keras/keras.json中规定，可查看该文件的image_data_format一项查看，也可在代码中通过K.image_data_format()函数返回，请在网络的训练和测试中保持维度顺序一致。</p><h2 id="4-函数式模型"><a href="#4-函数式模型" class="headerlink" title="4.函数式模型"></a>4.函数式模型</h2><p>函数式模型，这个词很新鲜，好像是官方文档自己创造的。</p><p>在Keras 0.x中，模型其实有两种，一种叫Sequential，称为序贯模型，也就是单输入单输出，一条路通到底，层与层之间只有相邻关系，跨层连接统统没有。这种模型编译速度快，操作上也比较简单。第二种模型称为Graph，即图模型，这个模型支持多输入多输出，层与层之间想怎么连怎么连，但是编译速度慢。可以看到，Sequential其实是Graph的一个特殊情况。</p><p>在Keras1和Keras2中，图模型被移除，而增加了了“functional model API”，这个东西，更加强调了Sequential是特殊情况这一点。一般的模型就称为Model，然后如果你要用简单的Sequential，OK，那还有一个快捷方式Sequential。</p><p>由于functional model API在使用时利用的是“函数式编程”的风格，我们这里将其译为函数式模型。总而言之，只要这个东西接收一个或一些张量作为输入，然后输出的也是一个或一些张量，那不管它是什么鬼，统统都称作“模型”。</p><h2 id="5-batch"><a href="#5-batch" class="headerlink" title="5.batch"></a>5.batch</h2><p>深度学习的优化算法，说白了就是梯度下降。每次的参数更新有两种方式。（我也不知道这个词为神魔出现在这里）</p><p>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，这称为Batch gradient descent，批梯度下降。</p><p>另一种，每看一个数据就算一下损失函数，然后求梯度更新参数，这个称为随机梯度下降，stochastic gradient descent。这个方法速度比较快，但是收敛性能不太好，可能在最优点附近晃来晃去，hit不到最优点。两次参数的更新也有可能互相抵消掉，造成目标函数震荡的比较剧烈。</p><p>为了克服两种方法的缺点，现在一般采用的是一种折中手段，mini-batch gradient decent，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><p>基本上现在的梯度下降都是基于mini-batch的，所以Keras的模块中经常会出现batch_size，就是指这个。</p><p>顺便说一句，Keras中用的优化器SGD是stochastic gradient descent的缩写，但不代表是一个样本就更新一回，还是基于mini-batch的。</p><h2 id="6-epochs"><a href="#6-epochs" class="headerlink" title="6.epochs"></a>6.epochs</h2><p>这个词不想多说。epochs就是训练过程中数据将被“轮”多少次。</p>]]></content>
      
      
      <categories>
          
          <category> Keras-note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keras-note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubutu系统文件结构</title>
      <link href="/AngelNI.github.io/Ubutu%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/AngelNI.github.io/Ubutu%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p> 可能我不是最优秀的，但我在努力做你眼中最棒的。<a id="more"></a></p><h1 id="1-文件系统类型"><a href="#1-文件系统类型" class="headerlink" title="1.文件系统类型"></a>1.文件系统类型</h1><p>windows中常见的磁盘格式有fat16、fat32和ntfs。windows是一个封闭的系统。无法打开ext3或者mac 日志式。</p><p>在ubuntu中其文件系统广泛使用ext3(ext4是ext3的扩展)的文件格式，从而实现了将整个硬盘的写入动作完整的记录在磁盘的某个区域上。而且在ubuntu中可以实现主动挂载windows的文件系统，并以只读的方式访问磁盘中windows系统上的文件。</p><img src="https://s2.ax1x.com/2019/08/17/mu7sS0.png" alt border="0"><p>在ubuntu中磁盘文件系统、网络文件系统都可以非常方便的使用，而屏蔽了网络和本地之间的差异。在ubuntu中所有的文件都是基于目录的方式存储的。一切都是目录，一切都是文件。</p><h1 id="2-文件系统结构"><a href="#2-文件系统结构" class="headerlink" title="2.文件系统结构"></a>2.文件系统结构</h1><p>/是一切目录的起点，如大树的主干。其它的所有目录都是基于树干的枝条或者枝叶。在ubuntu中硬件设备如光驱、软驱、usb设备都将挂载到这颗繁茂的枝干之下，作为文件来管理。</p><img src="https://s2.ax1x.com/2019/08/17/mu72mF.png" alt border="0"><p>/bin: bin是Binary的缩写。存放系统中最常用的可执行文件（二进制）。</p><p>/boot: 这里存放的是linux内核和系统启动文件，包括Grub、lilo启动器程序。</p><p>/dev: dev是Device(设备)的缩写。该目录存放的是Linux的外部设备，如硬盘、分区、键盘、鼠标、usb等。</p><p>/etc: 这个目录用来存放所有的系统管理所需要的配置文件和子目录，如passwd、hostname等。</p><p>/home: 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p>/lib: 存放共享的库文件，包含许多被/bin和/sbin中程序使用的库文件。</p><p>/lost+found: 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些零散文件。</p><p>/media: ubuntu系统自动挂载的光驱、usb设备，存放临时读入的文件。</p><p>/mnt: 作为被挂载的文件系统得挂载点。</p><p>/opt: 作为可选文件和程序的存放目录，主要被第三方开发者用来简易安装和卸载他们的软件。</p><p>/proc: 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这里存放所有标志为文件的进程，比较cpuinfo存放cpu当前工作状态的数据。</p><p>/root: 该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>/sbin: s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序，如系统管理、目录查询等关键命令文件。</p><p>/ srv: 存放系统所提供的服务数据。</p><p>/sys: 系统设备和文件层次结构，并向用户程序提供详细的内核数据信息。</p><p>/tmp: 这个目录是用来存放一些临时文件的，所有用户对此目录都有读写权限。</p><p>/usr: 存放与系统用户有关的文件和目录。</p><h2 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h2><img src="https://s2.ax1x.com/2019/08/17/mu7Tl6.png" alt border="0"><p><strong>/usr 目录具体来说：</strong></p><p>/usr/X11R6: 存放X-Windows的目录；</p><p>/usr/games: 存放着XteamLinux自带的小游戏；</p><p>/usr/bin: 用户和管理员的标准命令；</p><p>/usr/sbin: 存放root超级用户使用的管理程序；</p><p>/usr/doc: Linux技术文档；</p><p>/usr/include: 用来存放Linux下开发和编译应用程序所需要的头文件，for c 或者c++；</p><p>/usr/lib: 应用程序和程序包的连接库；</p><p>/usr/local: 系统管理员安装的应用程序目录；</p><p>/usr/man: 帮助文档所在的目录；</p><p>/usr/src: Linux开放的源代码；</p><h2 id="var"><a href="#var" class="headerlink" title="/var:"></a>/var:</h2><img src="https://s2.ax1x.com/2019/08/17/mu7xfI.png" alt border="0"><p>/var: 长度可变的文件，尤其是些记录数据，如日志文件和打印机文件。</p><p>/var/cache: 应用程序缓存目录；</p><p>/var/crash: 系统错误信息；</p><p>/var/games: 游戏数据；</p><p>/var/log: 日志文件；</p><p>/var/mail: 电子邮件；</p><p>/var/tmp: 临时文件目录；</p><p>注: ubuntu严格区分大小写和空格，所以Sun和sun是两个不同的文件。</p><h1 id="3-推荐"><a href="#3-推荐" class="headerlink" title="3.推荐"></a>3.推荐</h1><p>一个好用的工具，查看文件的树状目录结构，而且不同类型的文件夹和文件都用不同的颜色标记：</p><p> sudo apt-get install tree</p><p> 好东西啊，多美的名字，就叫tree，哈哈，安装好了之后，只要从命令行执行tree命令就可以了：</p><p> 效果很好：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">dr@dr-Vostro-270:~/workspace/HandlerTest$ tree</span><br><span class="line">.</span><br><span class="line">├── AndroidManifest.xml</span><br><span class="line">├── assets</span><br><span class="line">├── bin</span><br><span class="line">│   ├── AndroidManifest.xml</span><br><span class="line">│   ├── classes</span><br><span class="line">│   │   └── com</span><br><span class="line">│   │       └── example</span><br><span class="line">│   │           └── handlertest</span><br><span class="line">│   │               ├── BuildConfig.class</span><br><span class="line">│   │               ├── MainActivity$1.class</span><br><span class="line">│   │               ├── MainActivity$2.class</span><br><span class="line">│   │               ├── MainActivity.class</span><br><span class="line">│   │               ├── MainActivity$MyHandler.class</span><br><span class="line">│   │               ├── R$attr.class</span><br><span class="line">│   │               ├── R.class</span><br><span class="line">│   │               ├── R$dimen.class</span><br><span class="line">│   │               ├── R$drawable.class</span><br><span class="line">│   │               ├── R$id.class</span><br><span class="line">│   │               ├── R$layout.class</span><br><span class="line">│   │               ├── R$menu.class</span><br><span class="line">│   │               ├── R$string.class</span><br><span class="line">│   │               └── R$style.class</span><br><span class="line">│   ├── classes.dex</span><br><span class="line">│   ├── dexedLibs</span><br><span class="line">│   │   └── android-support-v4-2ab8acc90e083e9b9a1d83a94491612c.jar</span><br><span class="line">│   ├── HandlerTest.apk</span><br><span class="line">│   ├── res</span><br><span class="line">│   │   ├── drawable-hdpi</span><br><span class="line">│   │   │   └── ic_launcher.png</span><br><span class="line">│   │   ├── drawable-mdpi</span><br><span class="line">│   │   │   └── ic_launcher.png</span><br><span class="line">│   │   ├── drawable-xhdpi</span><br><span class="line">│   │   │   └── ic_launcher.png</span><br><span class="line">│   │   └── drawable-xxhdpi</span><br><span class="line">│   │       └── ic_launcher.png</span><br><span class="line">│   └── resources.ap_</span><br><span class="line">├── gen</span><br><span class="line">│   └── com</span><br><span class="line">│       └── example</span><br><span class="line">│           └── handlertest</span><br><span class="line">│               ├── BuildConfig.java</span><br><span class="line">│               └── R.java</span><br><span class="line">├── ic_launcher-web.png</span><br><span class="line">├── libs</span><br><span class="line">│   └── android-support-v4.jar</span><br><span class="line">├── proguard-project.txt</span><br><span class="line">├── project.properties</span><br><span class="line">├── res</span><br><span class="line">│   ├── drawable-hdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   ├── drawable-ldpi</span><br><span class="line">│   ├── drawable-mdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   ├── drawable-xhdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   ├── drawable-xxhdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   ├── layout</span><br><span class="line">│   │   └── activity_main.xml</span><br><span class="line">│   ├── menu</span><br><span class="line">│   │   └── main.xml</span><br><span class="line">│   ├── values</span><br><span class="line">│   │   ├── dimens.xml</span><br><span class="line">│   │   ├── strings.xml</span><br><span class="line">│   │   └── styles.xml</span><br><span class="line">│   ├── values-sw600dp</span><br><span class="line">│   │   └── dimens.xml</span><br><span class="line">│   ├── values-sw720dp-land</span><br><span class="line">│   │   └── dimens.xml</span><br><span class="line">│   ├── values-v11</span><br><span class="line">│   │   └── styles.xml</span><br><span class="line">│   └── values-v14</span><br><span class="line">│       └── styles.xml</span><br><span class="line">└── src</span><br><span class="line">    └── com</span><br><span class="line">        └── example</span><br><span class="line">            └── handlertest</span><br><span class="line">                └── MainActivity.java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python command</title>
      <link href="/AngelNI.github.io/Pip-command/"/>
      <url>/AngelNI.github.io/Pip-command/</url>
      
        <content type="html"><![CDATA[<p> 不是 ,有钱才善良，而是善良才富足。</p><a id="more"></a><ol><li><p>pip升级<br>pip show pip<br>python -m pip install –upgrade pip</p></li><li><p>列出已安装的包</p><p>pip list</p></li><li><p>pip安装包<br>pip install 安装包名</p></li><li><p>pip查看是否已安装<br>pip show [–files] 安装包名</p></li><li><p>pip检查哪些包需要更新<br>pip list –outdated</p></li><li><p>pip升级包<br>pip install –upgrade 要升级的包名</p></li><li><p>pip卸载包<br>pip uninstall 要卸载的包名</p></li><li><p>pip搜索包</p><p>pip search SomePackage</p></li><li><p>pip参数解释</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">pip --help</span><br><span class="line">Usage:</span><br><span class="line">  pip &lt;command&gt; [options]</span><br><span class="line">Commands:</span><br><span class="line">  install                     Install packages.</span><br><span class="line">  download                    Download packages.</span><br><span class="line">  uninstall                   Uninstall packages.</span><br><span class="line">  freeze                      Output installed packages in requirements format.</span><br><span class="line">  list                        List installed packages.</span><br><span class="line">  show                        Show information about installed packages.</span><br><span class="line">  check                       Verify installed packages have compatible dependencies.</span><br><span class="line">  config                      Manage local and global configuration.</span><br><span class="line">  search                      Search PyPI for packages.</span><br><span class="line">  wheel                       Build wheels from your requirements.</span><br><span class="line">  hash                        Compute hashes of package archives.</span><br><span class="line">  completion                  A helper command used for command completion.</span><br><span class="line">  help                        Show help for commands.</span><br><span class="line">General Options:</span><br><span class="line">  -h, --help                  Show help.</span><br><span class="line">  --isolated                  Run pip in an isolated mode, ignoring environment variables and user configuration.</span><br><span class="line">  -v, --verbose               Give more output. Option is additive, and can be used up to 3 times.</span><br><span class="line">  -V, --version               Show version and exit.</span><br><span class="line">  -q, --quiet                 Give less output. Option is additive, and can be used up to 3 times (corresponding to</span><br><span class="line">                              WARNING, ERROR, and CRITICAL logging levels).</span><br><span class="line">  --log &lt;path&gt;                Path to a verbose appending log.</span><br><span class="line">  --proxy &lt;proxy&gt;             Specify a proxy in the form [user:passwd@]proxy.server:port.</span><br><span class="line">  --retries &lt;retries&gt;         Maximum number of retries each connection should attempt (default 5 times).</span><br><span class="line">  --timeout &lt;sec&gt;             Set the socket timeout (default 15 seconds).</span><br><span class="line">  --exists-action &lt;action&gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup,</span><br><span class="line">                              (a)bort.</span><br><span class="line">  --trusted-host &lt;hostname&gt;   Mark this host as trusted, even though it does not have valid or any HTTPS.</span><br><span class="line">  --cert &lt;path&gt;               Path to alternate CA bundle.</span><br><span class="line">  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file containing the private key and the</span><br><span class="line">                              certificate in PEM format.</span><br><span class="line">  --cache-dir &lt;dir&gt;           Store the cache data in &lt;dir&gt;.</span><br><span class="line">  --no-cache-dir              Disable the cache.</span><br><span class="line">  --disable-pip-version-check</span><br><span class="line">                              Don&apos;t periodically check PyPI to determine whether a new version of pip is available for</span><br><span class="line">                              download. Implied with --no-index.</span><br><span class="line">  --no-color                  Suppress colored output</span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>将pip源更换到国内镜像</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用的国内镜像包括：</span><br><span class="line">（1）阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">（2）豆瓣http://pypi.douban.com/simple/</span><br><span class="line">（3）清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">（4）中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">（5）华中科技大学http://pypi.hustunique.com/</span><br></pre></td></tr></table></figure></li></ol><p>(1)  临时使用：<br>可以在使用pip的时候，加上参数-i和镜像地址(如<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fpypi.tuna.tsinghua.edu.cn%2Fsimple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a>)。<br>例如：pip install -i <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fpypi.tuna.tsinghua.edu.cn%2Fsimple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> pandas，这样就会从清华镜像安装pandas库。</p><p>(2)  永久修改，一劳永逸：</p><p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，然后新建文件pip.ini，即 %HOMEPATH%\pip\pip.ini，在pip.ini文件中输入以下内容（以豆瓣镜像为例）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network App Recommend</title>
      <link href="/AngelNI.github.io/Network-App-Recommend/"/>
      <url>/AngelNI.github.io/Network-App-Recommend/</url>
      
        <content type="html"><![CDATA[<p> 你知道吗，有些人，会以各种你情愿或不情愿的方式，留在你的记忆里，比如我。</p><a id="more"></a><h1 id="Hosting-Platform"><a href="#Hosting-Platform" class="headerlink" title="Hosting Platform"></a>Hosting Platform</h1><p><strong><a href="https://github.com/" target="_blank" rel="noopener">Github</a>  <a href="https://git.lug.ustc.edu.cn/users/sign_in" target="_blank" rel="noopener">Gitlab</a>  <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>  <a href="https://bitbucket.org/socialauth/login/atlassianid/?next=%2F" target="_blank" rel="noopener">Bitbucket</a>  <a href="https://app.netlify.com/" target="_blank" rel="noopener">Bitballon</a></strong></p><p>这五个比较常用的托管平台，当然了，这里，Github是全球最大的托管平台，我的博客也是在上面托管。但由于对国内限速，很是难受。其他的四个是我最近发现比较好用的，推荐给大家。</p><img src="https://s2.ax1x.com/2019/08/11/evYn9H.png" alt="evYn9H.png" border="0" height="400" width="600/"><h1 id="Cloud-storage"><a href="#Cloud-storage" class="headerlink" title="Cloud storage"></a>Cloud storage</h1><p><a href="https://drive.google.com/" target="_blank" rel="noopener">Goole云端硬盘</a>  <a href="https://pan.baidu.com/" target="_blank" rel="noopener">百度网盘</a>  <a href="https://www.jianguoyun.com/" target="_blank" rel="noopener">坚果云</a></p><p>Goole云端硬盘是我比较好用的，能关联许多应用，并且我的Colab的代码在上面，执行代码直接调用就可以了。百度网盘，是我第一个使用储存App，但是在下载上限速，非常<del>_</del>，不过幸好有百度云不限速的破解软件。坚果云，正尝试着去用。至于，其他的云储存，没怎末用过，要是用比较好的，留言推荐给我哦。</p><img src="https://s2.ax1x.com/2019/08/11/evNRn1.jpg" alt border="0" height="400" width="600/"><h1 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h1><p><a href="https://www.cilimao.network/verify?f=/" target="_blank" rel="noopener">磁力猫</a>  <a href="https://mijisou.com/" target="_blank" rel="noopener">秘迹搜索</a>  <a href="https://cn.bing.com/?FORM=Z9FD1" target="_blank" rel="noopener">微软bing</a>  <a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜索</a> </p><p>除了我们常用的百度谷歌搜狐等搜索引擎外，还有很多好玩的搜索。磁力猫是一个资源搜索引擎，在全网范围内搜索你想要的资源。秘迹搜索，是一个不追踪你位置的良心搜索。微软bing，嗯嗯。鸠摩搜索，是一个搜书的引擎，如果你喜欢看书，可是试试啊。</p><p><a href="https://imgchr.com/i/evUR2Q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/11/evUR2Q.jpg" alt="evUR2Q.jpg" border="0" height="400" width="600/"></a></p><h1 id="O-J"><a href="#O-J" class="headerlink" title="O J"></a>O J</h1><p><a href="http://acm.hdu.edu.cn/" target="_blank" rel="noopener">HDU</a>  <a href="http://poj.org/" target="_blank" rel="noopener">POJ</a>  <a href="https://www.51nod.com/" target="_blank" rel="noopener">51 Nod</a>  <a href="https://www.nowcoder.com" target="_blank" rel="noopener">牛客</a>  <a href="https://www.luogu.org/" target="_blank" rel="noopener">洛谷</a>  ……</p><p>对于一个计算机爱好者，ACM是最好的检验编程能力的平台，但不是每个人都可以参加ACM比赛的，现在有许多在线的OJ平台来练习你的算法编程能力，有好多，就不一一列举了。</p><img src="https://s2.ax1x.com/2019/08/11/evatZq.jpg" alt border="0" height="400" width="600/">]]></content>
      
      
      <categories>
          
          <category> sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appreciation of Novels(2)</title>
      <link href="/AngelNI.github.io/Appreciation-of-Novels-2/"/>
      <url>/AngelNI.github.io/Appreciation-of-Novels-2/</url>
      
        <content type="html"><![CDATA[<p> “不要忘记你曾经是怎样的小孩”，“不要忘记你曾希望变成怎样的大人”。</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><p>她对他很满意。走吧。好。他起身买单，腿却一拐一拐的。难怪他才华横溢，事业有成，却还是单身。趁着他买单，她赶紧悄悄走了。又是一年，她又遇到了他，他正牵着孩子的手，走的飞快。你的腿？她有些诧异。腿？我的腿怎么了？他更诧异。后来，她才知道他的腿，那天只是坐麻了而已。</p><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1><p>失明后他脾气暴躁。妈妈呵斥道，你这样自暴自弃，从今后我只喊你起床吃饭睡觉，不再管你。果然，从那以后妈妈每天只跟他说这三句话。这让他很愧疚，也渐渐平静下来配合治疗。一年后，他终于复明了，却没看到妈妈。家人告诉他：妈妈一年前就去世了，去世之前录下那三句话，不想影响你的治疗…</p><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1><p>她花了一周的晚上给他织好了这条围巾，从小娇生惯养，这是她的第一条围巾，她幻想着他惊喜的表情。在他生日的那个晚上，她刚幸福地把围巾给他围上，他却厌倦地取了下来“我不喜欢围巾”！心，瞬间冰凉！爸爸来了，以为是给自己的，自顾地围上，满脸都是幸福的笑容。她转过身来，泪流满面…</p><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1><p>世界突然爆发一种健忘流行病。我和你都不幸被传染，并且越来越严重。第一天，我们都忘记带钥匙出门，于是只能半夜叫锁匠；第二天，一起做饭结果做出了咖喱牛排，其实我爱吃的是咖喱饭，而你爱菲力牛排；第三天，商场拒绝我的付款，因为我在信用卡的回执上，不管怎么回忆，都只签得出你的名字。</p><h1 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h1><p>“今晚要开会，不用等我了.”“哦，知道了。”挂掉电话，她看着精心准备的一桌子菜发呆.总是忙，连我生日都忘了。门铃响了，“保安，有人看到你家阳台进了窃贼.”“啊?”她惊讶的看着保安鱼贯而入，很快听见阳台传来熟悉的声音：“谁是小偷?我是这房子的业主！喂干什么！别弄坏我蛋糕…”</p><h1 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h1><p>他这一辈子都是默默无闻的在拍戏，演的永远是他的敌人，出镜率不高，并不出名。但他每天最开心的事情就是在公司看到他被粉丝里三层外三层的围住要求签名、合影，他总是微笑着站在一边静静等待，等他摆脱了粉丝走到自己身边对他说：走吧，迟到了导演会骂。据说，他叫奥特曼，他叫小怪兽。</p><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><p>儿子怀揣四万块冲进病房，对弥留的老父激动地大喊：“爸！我终于借到钱了！你可以动手术了！！”父亲嘴唇濡动。儿子问：“妈，爸在说什么？咱快叫医生啊！” 母逼近丈夫的脸颊，倾听片刻，对儿子泣道，“你爸想求你个事。你小时候，他常抱你，现在他要走了，你能不能抱一抱他？”</p><h1 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h1><p>情人节，老年痴呆的外公失踪。晚间，医院来电说有位衣服上缝这个电话的老人站在某病房里不肯离去。去接外公时妈妈一进病房便哭了，外婆就是在这间病房去世的。当我看到傻傻的外公手里那支不知从哪里拣来的玫瑰时，忽然想到几年前情人节，我问外公咋不送外婆玫瑰时，外公说傻老太太衬不上玫瑰。</p><h1 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h1><p>她车祸去世后，他思念万分，利用时光机回到过去，阻止惨剧发生。机器出了差错，比预定时间早了几分钟。他拿出钥匙开门，听见卧室传出她的娇喘和男人的声音。她手机响了，他记得这是他打来的。“我得走了，我男人催我呢。”他听着，惹羞成怒，出门偷了一辆车，看着急匆匆的她，一脚踩下油门…</p><h1 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h1><p>这是他从医30年来第一起医疗事故，其实这种手术他做过不知道多少了.当患者死在手术台上的时候，他才意识到自己犯了多大的错误，这把曾经的“神刀”就此成为历史.回家后他异常疲惫，倒在沙发上一言不发.妻子很兴奋的冲出来，“女儿有救了，有个刚死的捐了肾。”“哦。”他握刀的手依旧在抖。</p><h1 id="11"><a href="#11" class="headerlink" title="11."></a>11.</h1><p>他在大街上遇见她，她带着孩子.他问：你还好吗。“挺好的，你呢。”“我也挺好的”，他摸摸小孩儿的头，软软的自来卷，“孩子真可爱，多大了？”“3岁.” 他沉默了一下，“原来我们分手那年你就结婚了.”她没说话，看着他的光头，他攥了下手里的化疗单“我那头自来卷太难打理，剃了.”</p><h1 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h1><p>外人眼里，他们是可爱的龙凤胎。事实上，哥哥是克隆人，他不过是她的备用器官库，他这一生注定为她而活。十六岁那年，妹妹心脏出问题，这意味着哥哥的生命到了尽头。可她不愿意他替她去死，偷跑出去，晕死街头，他背她回来。等她醒来，他不在了，看到一张纸条：“放心，克隆人没有喜悲。”</p><h1 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h1><p>为了庆祝分手后他的第一个生日，她低价卖掉了他往年送给她的每一样生日礼物。然后拿着卖来的钱她去了蛋糕房为他订了一份四层的大蛋糕，和一百根白色的生日蜡烛。他生日那天，随蛋糕一起寄给他的生日贺卡上她用红色的墨水一笔一划地写着：祝你孤独，并且长命百岁。</p><h1 id="14"><a href="#14" class="headerlink" title="14."></a>14.</h1><p>退休在家后，老伴最爱从早到晚数落我又老又胖好吃懒做。今早起床我突然咳嗽并吐出一口鲜血，他看到后整个上午没有说出一句话，闷闷地抽着烟。中午拉我去了医院，最后得知那是我牙龈发炎口腔出的血，他立马就站在医院怒骂我：“你这个没用的胖老太婆…”只是还没骂完，他眼眶里已满是泪水…</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCF Data Processing</title>
      <link href="/AngelNI.github.io/NCF-Data-Processing/"/>
      <url>/AngelNI.github.io/NCF-Data-Processing/</url>
      
        <content type="html"><![CDATA[<p>  左眼永远见不到右眼，只能陪她一起哭泣。<a id="more"></a></p><p>NCF数据处理是对论文neural_collaborative_filtering作者所提出的神经网络协同过滤源代码的运行结果，不过在源代码的基础上做了一些更改，运行环境是 python3.6，keras1.2.2，tensorflow1.3.0  ，电脑本地运行约7个小时。</p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p><strong>前言</strong></p><p><strong>GMF</strong> batch_size=256, dataset=’ml-1m’, epochs=100, learner=’adam’, lr=0.001, num_factors=8, num_neg=4, out=1, path=’Data/‘, regs=’[0,0]’, verbose=1</p><p><strong>MLP</strong> batch_size=256, dataset=’ml-1m’, epochs=100, layers=’[64,32,16,8]’, learner=’adam’, lr=0.001, num_neg=4, out=1, path=’Data/‘, reg_layers=’[0,0,0,0]’, verbose=1</p><p><strong>NeuMF</strong> batch_size=256, dataset=’ml-1m’, epochs=100, layers=’[64,32,16,8]’, learner=’adam’, lr=0.001, mf_pretrain=’’, mlp_pretrain=’’, num_factors=8, num_neg=4, out=1, path=’Data/‘, reg_layers=’[0,0,0,0]’, reg_mf=0, verbose=1</p><p>#user=6040, #item=3706, #train=994169, #test=6040</p><p><strong>评估 leave-one-out</strong></p><ol><li>命中率（HR）</li><li>归一化折扣累积增益（NDCG）</li></ol><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">GMF = pd.read_table(<span class="hljs-string">'GMF.txt'</span>,header=<span class="hljs-literal">None</span>, encoding=<span class="hljs-string">'gb2312'</span>, sep=<span class="hljs-string">','</span>)</span><br><span class="line">MLP = pd.read_table(<span class="hljs-string">'MLP.txt'</span>,header=<span class="hljs-literal">None</span>, encoding=<span class="hljs-string">'gb2312'</span>, sep=<span class="hljs-string">','</span>)</span><br><span class="line">NeuMF = pd.read_table(<span class="hljs-string">'NEUMF.txt'</span>,header=<span class="hljs-literal">None</span>, encoding=<span class="hljs-string">'gb2312'</span>, sep=<span class="hljs-string">','</span>)</span><br></pre></td></tr></table></figure><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><img src="https://s2.ax1x.com/2019/08/03/eskaTI.png" alt border="0"><img src="https://s2.ax1x.com/2019/08/03/eskU0A.png" alt border="0"><img src="https://s2.ax1x.com/2019/08/03/eskBff.png" alt border="0"><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><h3 id="获取HR数据"><a href="#获取HR数据" class="headerlink" title="获取HR数据"></a>获取HR数据</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GMF_HR = []</span><br><span class="line">MLP_HR = []</span><br><span class="line">NeuMF_HR = []</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> GMF[<span class="hljs-number">0</span>]:</span><br><span class="line">    GMF_HR.append(eval(i[<span class="hljs-number">-6</span>:]))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  MLP[<span class="hljs-number">0</span>]:</span><br><span class="line">    MLP_HR.append(eval(i[<span class="hljs-number">-6</span>:]))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> NeuMF[<span class="hljs-number">0</span>]:</span><br><span class="line">    NeuMF_HR.append(eval(i[<span class="hljs-number">-6</span>:]))</span><br></pre></td></tr></table></figure><h3 id="获取NDGC"><a href="#获取NDGC" class="headerlink" title="获取NDGC"></a>获取NDGC</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GMF_NDGC= []</span><br><span class="line">MLP_NDGC = []</span><br><span class="line">NeuMF_NDGC = []</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> GMF[<span class="hljs-number">1</span>]:</span><br><span class="line">    GMF_NDGC.append(eval(i[<span class="hljs-number">-6</span>:]))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  MLP[<span class="hljs-number">1</span>]:</span><br><span class="line">    MLP_NDGC.append(eval(i[<span class="hljs-number">-6</span>:]))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> NeuMF[<span class="hljs-number">1</span>]:</span><br><span class="line">    NeuMF_NDGC.append(eval(i[<span class="hljs-number">-6</span>:]))</span><br></pre></td></tr></table></figure><h3 id="获取loss"><a href="#获取loss" class="headerlink" title="获取loss"></a>获取loss</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GMF_loss= []</span><br><span class="line">MLP_loss = []</span><br><span class="line">NeuMF_loss = []</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> GMF[<span class="hljs-number">2</span>]:</span><br><span class="line">    GMF_loss.append(eval(i[<span class="hljs-number">-14</span>:<span class="hljs-number">-8</span>]))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  MLP[<span class="hljs-number">2</span>]:</span><br><span class="line">    MLP_loss.append(eval(i[<span class="hljs-number">-14</span>:<span class="hljs-number">-8</span>]))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> NeuMF[<span class="hljs-number">2</span>]:</span><br><span class="line">    NeuMF_loss.append(eval(i[<span class="hljs-number">-14</span>:<span class="hljs-number">-8</span>]))</span><br></pre></td></tr></table></figure><h2 id="图表表示"><a href="#图表表示" class="headerlink" title="图表表示"></a>图表表示</h2><h3 id="HR对比"><a href="#HR对比" class="headerlink" title="HR对比"></a>HR对比</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f=plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">10</span>))</span><br><span class="line">plt.rcParams[<span class="hljs-string">'font.sans-serif'</span>] = [<span class="hljs-string">'SimHei'</span>]</span><br><span class="line">plt.title(<span class="hljs-string">"GMF-MLP-NeuMF  HR 对比图"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.xlabel(<span class="hljs-string">"Iteration"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.ylabel(<span class="hljs-string">"HR"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),GMF_HR,label = <span class="hljs-string">"GMF"</span>)<span class="hljs-comment">#,linestyle='--')</span></span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),MLP_HR,label = <span class="hljs-string">"MLP"</span>)<span class="hljs-comment">#,linestyle='-.')</span></span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),NeuMF_HR,label =<span class="hljs-string">"NeuMF"</span>)</span><br><span class="line">plt.scatter(<span class="hljs-number">98</span>,<span class="hljs-number">0.6437</span>,marker=<span class="hljs-string">'^'</span>,color = <span class="hljs-string">'black'</span>)</span><br><span class="line">plt.scatter(<span class="hljs-number">29</span>,<span class="hljs-number">0.6763</span>,marker=<span class="hljs-string">'^'</span>,color = <span class="hljs-string">'black'</span>)</span><br><span class="line">plt.scatter(<span class="hljs-number">35</span>,<span class="hljs-number">0.6848</span>,marker=<span class="hljs-string">'^'</span>,color = <span class="hljs-string">'black'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.grid(c=<span class="hljs-string">"w"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/03/eskwkt.png" alt border="0"><h3 id="NDGC-对比"><a href="#NDGC-对比" class="headerlink" title="NDGC 对比"></a>NDGC 对比</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f=plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">10</span>))</span><br><span class="line">plt.rcParams[<span class="hljs-string">'font.sans-serif'</span>] = [<span class="hljs-string">'SimHei'</span>]</span><br><span class="line">plt.title(<span class="hljs-string">"GMF-MLP-NeuMF NDGC 对比图"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.xlabel(<span class="hljs-string">"Iteration"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.ylabel(<span class="hljs-string">"NDGC"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),GMF_NDGC,label = <span class="hljs-string">"GMF"</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),MLP_NDGC,label = <span class="hljs-string">"MLP"</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),NeuMF_NDGC,label =<span class="hljs-string">"NeuMF"</span>)</span><br><span class="line">plt.scatter(<span class="hljs-number">98</span>,<span class="hljs-number">0.3749</span>,marker=<span class="hljs-string">'^'</span>,color = <span class="hljs-string">'black'</span>)</span><br><span class="line">plt.scatter(<span class="hljs-number">29</span>,<span class="hljs-number">0.3988</span>,marker=<span class="hljs-string">'^'</span>,color = <span class="hljs-string">'black'</span>)</span><br><span class="line">plt.scatter(<span class="hljs-number">35</span>,<span class="hljs-number">0.4095</span>,marker=<span class="hljs-string">'^'</span>,color = <span class="hljs-string">'black'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(c=<span class="hljs-string">"w"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/03/eskNmd.png" alt border="0"></p><h3 id="LOSS-对比"><a href="#LOSS-对比" class="headerlink" title="LOSS 对比"></a>LOSS 对比</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f=plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">10</span>))</span><br><span class="line">plt.rcParams[<span class="hljs-string">'font.sans-serif'</span>] = [<span class="hljs-string">'SimHei'</span>]</span><br><span class="line">plt.title(<span class="hljs-string">"GMF-MLP-NeuMF  loss 对比图"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.xlabel(<span class="hljs-string">"Iteration"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.ylabel(<span class="hljs-string">"Loss"</span>,fontsize = <span class="hljs-number">20</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),GMF_loss,label = <span class="hljs-string">"GMF"</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),MLP_loss,label = <span class="hljs-string">"MLP"</span>)</span><br><span class="line">plt.plot(range(<span class="hljs-number">100</span>),NeuMF_loss,label =<span class="hljs-string">"NeuMF"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(c =<span class="hljs-string">"w"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/08/03/esk0tP.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradient Descent</title>
      <link href="/AngelNI.github.io/Gradient-Descent/"/>
      <url>/AngelNI.github.io/Gradient-Descent/</url>
      
        <content type="html"><![CDATA[<p>  最美的等待是，我们——未来可期。<a id="more"></a></p><h1 id="场景引入"><a href="#场景引入" class="headerlink" title="场景引入"></a>场景引入</h1><p>梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。</p><img src="https://s2.ax1x.com/2019/08/14/mk4Ilq.png" alt="mk4Ilq.png" border="0"><p>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p><h1 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>1.步长或学习效率(learning rare)：步长决定在梯度下降过程中，每一步沿梯度负方向前进的距离。</p><p>2.假设函数(hppothesis function)：也就是我们的模型学习到的函数 记为 h_θ(x) = θ<em>0x</em>0+θ<em>1+x</em>1+θ<em>2x</em>2+…=θTX</p><p>3.损失函数(loss function): 损失函数是用来评估模型h_θ(x)的好坏，通常用损失函数来度量拟合的程度，线性回归中损失函数通常为label和假设函数输出的差的平方。自己理解为（实际值-真实值）的平方。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>梯度下降的基本过程就和下山的场景很类似。</p><p>首先，我们有一个可微分的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的梯度 ，然后朝着梯度相反的方向，就能让函数值下降的最快！因为梯度的方向就是函数之变化最快的方向(在后面会详细解释) 所以，我们重复利用这个方法，反复求取梯度，最后就能到达局部的最小值，这就类似于我们下山的过程。而求取梯度就确定了最陡峭的方向，也就是场景中测量方向的手段。那么为什么梯度的方向就是最陡峭的方向呢？接下来，我们从微分开始讲起</p><h3 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h3><p>看待微分的意义，可以有不同的角度，最常用的两种是：</p><ul><li>函数图像中，某点的切线的斜率</li><li>函数的变化率</li><li>几个微分的例子：</li></ul><img src="https://s2.ax1x.com/2019/08/03/es9i0x.png" alt border="0"><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>梯度实际上就是多变量微分的一般化。 下面这个例子：</p><img src="https://s2.ax1x.com/2019/08/03/espvhF.png" alt border="0"><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h3><p>1.先决条件：确认优化模型的假设函数h_θ(x)和损失函数J_(θ)</p><img src="https://s2.ax1x.com/2019/08/03/es99XR.png" alt border="0"><p>2.参数的初始化: 初始化假设函数的参数θ(注：θ是一个向量），算法中止距离ϵ以及步长α</p><p>3.确定当前位置的损失函数的梯度，对于θ_j,梯度如下</p><img src="https://s2.ax1x.com/2019/08/03/es9S1J.png" alt border="0"><p>4.确定是否所有的θ_j,梯度下降的距离都小于ϵ，如果小于则算法中止，当前为最后结果，否则，则重复步骤（3）</p><p>5.更新所有的θ，对于θ_j（其更新的表达式如下</p><img src="https://s2.ax1x.com/2019/08/03/espjtU.png" alt border="0"><h2 id="梯度下降的形式BGD、SGD、以及MBGD"><a href="#梯度下降的形式BGD、SGD、以及MBGD" class="headerlink" title="梯度下降的形式BGD、SGD、以及MBGD"></a>梯度下降的形式BGD、SGD、以及MBGD</h2><p>三种算法中文名分别为</p><ul><li>批量梯度下降（Batch gradient descent）</li></ul><p>批量梯度下降法（Batch Gradient Descent，简称BGD）是梯度下降法最原始的形式，它的具体思路是在更新每一参数时都使用所有的样本来进行更新 优点：全局最优解；易于并行实现； 缺点：当样本数目很多时，训练过程会很慢。</p><ul><li>随机梯度下降（Stochastic gradient descent）</li></ul><p>随机梯度下降是通过每个样本来迭代更新一次， 如果样本量很大的情况（例如几十万），那么可能只用其中几万条或者几千条的样本，就已经将theta迭代到最优解了，对比上面的批量梯度下降，迭代一次需要用到十几万训练样本，一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。但是，SGD伴随的一个问题是噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。 优点：训练速度快； 缺点：准确度下降，并不是全局最优；不易于并行实现。</p><ul><li>小批量梯度下降（Mini-batch gradient descent）</li></ul><p>有上述的两种梯度下降法可以看出，其各自均有优缺点，那么能不能在两种方法的性能之间取得一个折衷呢？即，算法的训练过程比较快，而且也要保证最终参数训练的准确率，而这正是小批量梯度下降法（Mini-batch Gradient Descent，简称MBGD）的初衷。MBGD在每次更新参数时使用b个样本（b一般为10） 不过都叫梯度下降算法，可见他们的核心是没有变的，变化的只是取训练集的方式，而梯度下降最核心的就是对函数求偏导，这个是在高等数学里有的。</p><h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-comment">#构造训练数据 h（x）</span></span><br><span class="line">x = np.arange(<span class="hljs-number">0.</span>,<span class="hljs-number">10.</span>,<span class="hljs-number">0.2</span>)</span><br><span class="line">m = len(x)</span><br><span class="line">x0=np.full(m,<span class="hljs-number">1.0</span>)</span><br><span class="line">train_data = np.vstack([x0,x]).T  <span class="hljs-comment">#通过矩阵变化得到测试集【x0，x1】</span></span><br><span class="line">y = <span class="hljs-number">4</span>*x+<span class="hljs-number">1</span>+np.random.randn(m)<span class="hljs-comment">#构造“标准”答案</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">BGD</span><span class="hljs-params">(alpha,loops,epsilon)</span>:</span></span><br><span class="line">    <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">    alpha:步长</span></span><br><span class="line"><span class="hljs-string">    loops:循环次数</span></span><br><span class="line"><span class="hljs-string">    epsilon:收敛精度</span></span><br><span class="line"><span class="hljs-string">    '''</span></span><br><span class="line">    count=<span class="hljs-number">0</span><span class="hljs-comment">#loop次数</span></span><br><span class="line">    thata = np.random.randn(<span class="hljs-number">2</span>)<span class="hljs-comment">#随机thata向量初始的值也就是起点位置</span></span><br><span class="line">    err = np.zeros(<span class="hljs-number">2</span>)<span class="hljs-comment">#上次thata的值，初始化为0的向量</span></span><br><span class="line">    finish=<span class="hljs-number">0</span><span class="hljs-comment">#完成标志位</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="hljs-keyword">while</span> count&lt;loops:</span><br><span class="line">        count+=<span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-comment">#所有训练数据的期望更新一次thata</span></span><br><span class="line">        sum = np.zeros(<span class="hljs-number">2</span>)<span class="hljs-comment">#初始化thata更次年总和</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):</span><br><span class="line">            cost = (np.dot(thata,train_data[i])-y[i])*train_data[i]</span><br><span class="line">            sum+=cost</span><br><span class="line">        thata = thata-alpha*sum</span><br><span class="line">        result.append(np.linalg.norm(thata-err))</span><br><span class="line">        <span class="hljs-keyword">if</span> np.linalg.norm(thata-err)&lt;epsilon:<span class="hljs-comment">#判断是否收敛</span></span><br><span class="line">            finish = <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            err=thata<span class="hljs-comment">#没有则将当前thata向量赋值给err，作为下次判断参数</span></span><br><span class="line">    <span class="hljs-keyword">print</span> (<span class="hljs-string">f'SGD结果:\tloop——counts： [%d]\tthata[%f,%f]'</span>%(count,thata[<span class="hljs-number">0</span>],thata[<span class="hljs-number">1</span>]))</span><br><span class="line">    <span class="hljs-keyword">return</span> thata,result</span><br><span class="line"><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">'__main__'</span>:</span><br><span class="line">    result=[]</span><br><span class="line">    thata,result=BGD(<span class="hljs-number">0.00009</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">1e-4</span>)</span><br><span class="line">    slope,intercept,r_value,p_value,slope_std_error=stats.linregress(x,y)</span><br><span class="line">    print(<span class="hljs-string">f'Stata结果:\tintercept(截距)：[%s]\tslope(斜率)：[%s]'</span>%(intercept,slope))</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(result)):</span><br><span class="line">        plt.scatter(i,result[i])</span><br><span class="line">    <span class="hljs-comment">#plt.plot(x,y,'k+')</span></span><br><span class="line">    <span class="hljs-comment">#plt.plot(x,thata[1]*x+thata[0],'r')</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>  <strong>结果如下</strong></p><img src="https://s2.ax1x.com/2019/08/03/esCm5T.png" alt border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradient Descent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-means</title>
      <link href="/AngelNI.github.io/K-means/"/>
      <url>/AngelNI.github.io/K-means/</url>
      
        <content type="html"><![CDATA[<p> 天空在高又怎样，抬起脚尖就可以离太阳就更近一点。<a id="more"></a></p><h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><p>对于”监督学习”(supervised learning)，其训练样本是带有标记信息的，并且监督学习的目的是：对带有标记的数据集进行模型学习，从而便于对新的样本进行分类。而在“无监督学习”(unsupervised learning)中，训练样本的标记信息是未知的，目标是通过对无标记训练样本的学习来揭示数据的内在性质及规律，为进一步的数据分析提供基础。对于无监督学习，应用最广的便是”聚类”(clustering)。</p><p>聚类是一种无监督的学习，它将相似的对象归到同一簇中。聚类的方法几乎可以应用所有对象，簇内的对象越相似，聚类的效果就越好。K-means算法中的k表示的是聚类为k个簇，means代表取每一个聚类中数据值的均值作为该簇的中心，或者称为质心，即用每一个的类的质心对该簇进行描述。</p><p>　　聚类和分类最大的不同在于，分类的目标是事先已知的，而聚类则不一样，聚类事先不知道目标变量是什么，类别没有像分类那样被预先定义出来，所以，聚类有时也叫无监督学习。</p><p>　　聚类分析试图将相似的对象归入同一簇，将不相似的对象归为不同簇，那么，显然需要一种合适的相似度计算方法，我们已知的有很多相似度的计算方法，比如欧氏距离，余弦距离，汉明距离等。事实上，我们应该根据具体的应用来选取合适的相似度计算方法。</p><p>“聚类算法”试图将数据集中的样本划分为若干个通常是不相交的子集，每个子集称为一个“簇”(cluster)，通过这样的划分，每个簇可能对应于一些潜在的概念或类别。</p><p>图解</p><p><a href="https://imgchr.com/i/e8BKPI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/29/e8BKPI.png" alt="e8BKPI.png" border="0"></a></p><p>上图是未做标记的样本集，通过他们的分布，我们很容易对上图中的样本做出以下几种划分。</p><p>当需要将其划分为两个簇时，即 k=2 时：</p><img src="https://s2.ax1x.com/2019/07/29/e8Btaj.png" alt="e8Btaj.png" border="0"><p>当需要将其划分为四个簇时，即 k=4 时：</p><img src="https://s2.ax1x.com/2019/07/29/e8Bain.png" alt="e8Bain.png" border="0"><p>聚类方法</p><p>1.K-means</p><p>2.DBSCAN聚类</p><p>3.DBSCAN笑脸聚类</p><h1 id="k-means-无监督"><a href="#k-means-无监督" class="headerlink" title="k-means (无监督)"></a>k-means (无监督)</h1><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p>kmeans算法又名k均值算法。其算法思想大致为：先从样本集中随机选取 k 个样本作为簇中心，并计算所有样本与这 k 个“簇中心”的距离，对于每一个样本，将其划分到与其距离最近的“簇中心”所在的簇中，对于新的簇计算各个簇的新的“簇中心”。</p><p>根据以上描述，我们大致可以猜测到实现kmeans算法的主要三点：   </p><p>（1）簇个数 k 的选择   </p><p>（2）各个样本点到“簇中心”的距离   </p><p>（3）根据新划分的簇，更新“簇中心”</p><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>（1）K值的选择</p><p>k 的选择一般是按照实际需求进行决定，或在实现算法时直接给定 k 值。</p><p>（2）距离的度量</p><img src="https://s2.ax1x.com/2019/07/29/e8BMGt.png" alt="e8BMGt.png" border="0"><p>距离的度量的方法有以下几种</p><p>1.有序性距离度量</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）闵科夫斯基距离</span><br><span class="line">（2）欧式距离</span><br><span class="line">（3）曼哈顿距离</span><br><span class="line">（4）皮尔逊系数</span><br></pre></td></tr></table></figure><p>2.无序属性距离度量</p><p>3.混合属性距离度量</p><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>1、为中心向量c1, c2, …, ck初始化k个种子</p><p>2、分组:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）将样本分配给距离其最近的中心向量</span><br><span class="line">（2）由这些样本构造不相交（ non-overlapping ）的聚类</span><br></pre></td></tr></table></figure><p>3、确定中心:</p><p>用各个聚类的中心向量作为新的中心</p><p>4、重复分组和确定中心的步骤，直至算法收敛。</p><p>3、算法 k-means算法</p><p>输入：簇的数目k和包含n个对象的数据库。</p><p>输出：k个簇，使平方误差准则最小。</p><p>算法步骤：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.为每个聚类确定一个初始聚类中心，这样就有K 个初始聚类中心。</span><br><span class="line">2.将样本集中的样本按照最小距离原则分配到最邻近聚类</span><br><span class="line">3.使用每个聚类中的样本均值作为新的聚类中心。</span><br><span class="line">4.重复步骤2.3直到聚类中心不再变化。</span><br><span class="line">5.结束，得到K个聚类</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/07/29/e8BNIs.png" alt="e8BNIs.png" border="0"><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><img src="https://s2.ax1x.com/2019/07/29/e8B3M8.png" alt="e8B3M8.png" border="0"><p>为避免运行时间过长，通常设置一个最大运行轮数或最小调整幅度阈值，若达到最大轮数或调整幅度小于阈值，则停止运行。</p><h3 id="K-means算法分析"><a href="#K-means算法分析" class="headerlink" title="K-means算法分析"></a>K-means算法分析</h3><p><strong>1、k-means算法的性能分析</strong></p><p>主要优点：</p><p>是解决聚类问题的一种经典算法，简单、快速。</p><p>对处理大数据集，该算法是相对可伸缩和高效率的。因为它的复杂度是0 (n k t ) , 其中, n 是所有对象的数目, k 是簇的数目, t 是迭代的次数。通常k &lt; &lt;n 且t &lt; &lt;n 。</p><p>当结果簇是密集的，而簇与簇之间区别明显时, 它的效果较好。</p><p><strong>主要缺点</strong></p><p>(1)、在簇的平均值可被定义的情况下才能使用，这对于处理符号属性的数据不适用。</p><p>(2)、在 K-means 算法中 K 是事先给定的，这个 K 值的选定是非常难以估计的。很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适；</p><p>(3)、在 K-means 算法中，首先需要根据初始聚类中心来确定一个初始划分，然后对初始划分进行优化。这个初始聚类中心的选择对聚类结果有较大的影响，一旦初始值选择的不好，可能无法得到有效的聚类结果；</p><p>(4)、该算法需要不断地进行样本分类调整，不断地计算调整后的新的聚类中心，因此当数据量非常大时，算法的时间开销是非常大的；</p><p>(5)、若簇中含有异常点，将导致均值偏离严重（即:对噪声和孤立点数据敏感）；</p><p>(6)、不适用于发现非凸形状的簇或者大小差别很大的簇。</p><p><strong>K-Means算法对于不同的初始值，可能会导致不同结果。解决方法：</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.多设置一些不同的初值，对比最后的运算结果）一直到结果趋于稳定结束，比较耗时和浪费资源</span><br><span class="line">2.很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适。这也是 K-means 算法的一个不足。有的算法是通过类的自动合并和分裂，得到较为合理的类型数目 K.</span><br></pre></td></tr></table></figure><p><strong>2、k-means算法的改进方法——k-prototype算法</strong></p><p>k-Prototype算法：可以对离散与数值属性两种混合的数据进行聚类，在k-prototype中定义了一个对数值与离散属性都计算的相异性度量标准。</p><p>K-Prototype算法是结合K-Means与K-modes算法，针对混合属性的，解决2个核心问题如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.度量具有混合属性的方法是，数值属性采用K-means方法得到P1，分类属性采用K-modes方法P2，那么D=P1+a*P2，a是权重，如果觉得分类属性重要，则增加a，否则减少a，a=0时即只有数值属性</span><br><span class="line"></span><br><span class="line">2.更新一个簇的中心的方法，方法是结合K-Means与K-modes的更新方法。</span><br><span class="line"></span><br><span class="line">3、k-means算法的改进方法——k-中心点算法</span><br></pre></td></tr></table></figure><p>k-中心点算法：k -means算法对于孤立点是敏感的。为了解决这个问题，不采用簇中的平均值作为参照点，可以选用簇中位置最中心的对象，即中心点作为参照点。这样划分方法仍然是基于最小化所有对象与其参照点之间的相异度之和的原则来执行的。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://s2.ax1x.com/2019/07/29/e8BdGq.jpg" alt="e8BdGq.jpg" border="0"><img src="https://s2.ax1x.com/2019/07/29/e8BYZQ.jpg" alt border="0"></p><img src="https://s2.ax1x.com/2019/07/29/e8BQRP.jpg" alt="e8BQRP.jpg" border="0"><p>由上可以看出，第一次迭代后，总体平均误差值52.25~25.65，显著减小。由于在两次迭代中，簇中心不变，所以停止迭代过程，算法停止。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">5</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]</span><br><span class="line">]</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(data)):</span><br><span class="line">    plt.scatter(data[i][<span class="hljs-number">0</span>],data[i][<span class="hljs-number">1</span>],color=<span class="hljs-string">'r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/07/29/e8B8sS.png" alt="e8B8sS.png" border="0"><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">data_n= np.mat(data)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">center</span><span class="hljs-params">(data ,k)</span>:</span></span><br><span class="line">    dim = np.shape(data)[<span class="hljs-number">1</span>]</span><br><span class="line">    cen_M = np.mat(np.zeros((k,dim)))</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(dim):</span><br><span class="line">        minJ = min(data[:,i])</span><br><span class="line">        rangeJ = float(max(data[:,i])-minJ)</span><br><span class="line">        <span class="hljs-comment">#print()</span></span><br><span class="line">        <span class="hljs-comment">#print('\n')</span></span><br><span class="line">        <span class="hljs-comment">#print(minJ)</span></span><br><span class="line">        cen_M[:,i] = np.mat(minJ + rangeJ * np.random.rand(k,<span class="hljs-number">1</span>))</span><br><span class="line">    <span class="hljs-comment">#print(data)   </span></span><br><span class="line">    <span class="hljs-keyword">return</span> cen_M</span><br><span class="line"><span class="hljs-comment">#center(data_n,k)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kmeans</span><span class="hljs-params">(data,k)</span>:</span></span><br><span class="line">    m = np.shape(data)[<span class="hljs-number">0</span>]<span class="hljs-comment">#列的大小</span></span><br><span class="line">    classassment = np.mat(np.zeros((m,<span class="hljs-number">2</span>)))</span><br><span class="line">    centerpoint = center(data,k)</span><br><span class="line">    Flag = <span class="hljs-literal">True</span></span><br><span class="line">    conut = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> Flag:</span><br><span class="line">        Flag = <span class="hljs-literal">False</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):</span><br><span class="line">            mindis=np.inf ; minindex=<span class="hljs-number">-1</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">                disJ = np.linalg.norm(np.array(centerpoint[j,:])-np.array(data[i,:]))</span><br><span class="line">                </span><br><span class="line">                <span class="hljs-keyword">if</span> disJ &lt; mindis:</span><br><span class="line">                    mindis = disJ; minindex = j;</span><br><span class="line">            <span class="hljs-keyword">if</span> classassment[i,<span class="hljs-number">0</span>] !=minindex:</span><br><span class="line">                Flag = <span class="hljs-literal">True</span></span><br><span class="line">            classassment[i,:] = minindex,mindis**<span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-comment">#print(classassment)</span></span><br><span class="line">            <span class="hljs-keyword">for</span> cent <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">                ptsInClust = data[np.nonzero(classassment[:,<span class="hljs-number">0</span>].A==cent)[<span class="hljs-number">0</span>]]<span class="hljs-comment">#get all the point in this cluster</span></span><br><span class="line">                centerpoint[cent,:] = np.mean(ptsInClust, axis=<span class="hljs-number">0</span>)<span class="hljs-comment">#get all the point in this cluster</span></span><br><span class="line">                  </span><br><span class="line">             </span><br><span class="line">    <span class="hljs-keyword">return</span> centerpoint,classassment</span><br><span class="line">            </span><br><span class="line">centerpoint,classassment=kmeans(data_n,k)            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showCluster</span><span class="hljs-params">(dataSet, k, centroids, clusterAssment)</span>:</span></span><br><span class="line">    <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">    数据可视化,只能画二维的图（若是三维的坐标图则直接返回1）</span></span><br><span class="line"><span class="hljs-string">    '''</span></span><br><span class="line">    numSamples, dim = dataSet.shape</span><br><span class="line">    mark = [<span class="hljs-string">'or'</span>, <span class="hljs-string">'ob'</span>, <span class="hljs-string">'og'</span>, <span class="hljs-string">'ok'</span>,<span class="hljs-string">'oy'</span>,<span class="hljs-string">'om'</span>,<span class="hljs-string">'oc'</span>, <span class="hljs-string">'^r'</span>, <span class="hljs-string">'+r'</span>, <span class="hljs-string">'sr'</span>, <span class="hljs-string">'dr'</span>, <span class="hljs-string">'&lt;r'</span>, <span class="hljs-string">'pr'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># draw all samples</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(numSamples):</span><br><span class="line">        markIndex = int(clusterAssment[i, <span class="hljs-number">0</span>])</span><br><span class="line">        plt.plot(dataSet[i, <span class="hljs-number">0</span>], dataSet[i, <span class="hljs-number">1</span>], mark[markIndex])</span><br><span class="line"></span><br><span class="line">    mark = [<span class="hljs-string">'Pr'</span>, <span class="hljs-string">'Pb'</span>, <span class="hljs-string">'Pg'</span>, <span class="hljs-string">'Pk'</span>,<span class="hljs-string">'Py'</span>,<span class="hljs-string">'Pm'</span>,<span class="hljs-string">'Pc'</span>,<span class="hljs-string">'^b'</span>, <span class="hljs-string">'+b'</span>, <span class="hljs-string">'sb'</span>, <span class="hljs-string">'db'</span>, <span class="hljs-string">'&lt;b'</span>, <span class="hljs-string">'pb'</span>]</span><br><span class="line">    <span class="hljs-comment"># draw the centroids</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">        plt.plot(centroids[i, <span class="hljs-number">0</span>], centroids[i, <span class="hljs-number">1</span>], mark[i], markersize = <span class="hljs-number">12</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">showCluster(data_n,<span class="hljs-number">2</span>,centerpoint,classassment)</span><br><span class="line">print(data_n)</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/07/29/e8BnIA.png" alt="e8BnIA.png" border="0"><h3 id="knn-k-means-对比"><a href="#knn-k-means-对比" class="headerlink" title="knn k-means 对比"></a>knn k-means 对比</h3><img src="https://s2.ax1x.com/2019/07/29/e8BGqg.png" alt="e8BGqg.png" border="0">]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K-means </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matrix Factorization For Recommendation System</title>
      <link href="/AngelNI.github.io/MF/"/>
      <url>/AngelNI.github.io/MF/</url>
      
        <content type="html"><![CDATA[<p> 云是雨的梦，雨是云的前生。<a id="more"></a></p><h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><p>矩阵分解是将矩阵分解为数个矩阵的乘积，用矩阵分解做协同过滤是广泛使用的方法</p><p>常见的有三种：</p><p>1.三角分解法</p><p>2.QR分解法</p><p>3.奇异值分解法</p><h1 id="Matrix-Decomposition-Method"><a href="#Matrix-Decomposition-Method" class="headerlink" title="Matrix Decomposition Method"></a>Matrix Decomposition Method</h1><h2 id="奇异值分解SVD"><a href="#奇异值分解SVD" class="headerlink" title="奇异值分解SVD"></a>奇异值分解SVD</h2><p>原始的SVD又名奇异值分解，如果是用户评分矩阵，首先需要对缺失值进行简单的不全，比如用全局平均，然后用SVD进行分解</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6eQP.png" alt></p><p>其中，R为原始的评分矩阵，维度是mn，U和V分贝是一个km和kn的正交矩阵，S为kk的对角矩阵，对角线上的每一个元素都是矩阵的奇异值。这种纯数学的方法计算量特别大，实际应用中的数据根本处理不了。Simon Funk的Funk-SVD方法解决了这个问题，思想很简单：直接通过训练集的观察值利用最小化RMSE学习P、Q矩阵，这就是机器学习的思想了。</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6msf.png" alt></p><h2 id="SVD"><a href="#SVD" class="headerlink" title="SVD++"></a>SVD++</h2><p>SVD矩阵分解非常成功，有很多的迭代的方法，最有名的就是SVD++了。提SVD++之前，我们先看一个简单的BiasSVD：</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6Mdg.png" alt></p><ul><li>u 为训练集中所有记录的平均全局数</li><li>b_u 为用户的偏置项，表示用户的评分偏好</li><li>b_i 为物品的偏置项，表示物品的本身质量</li></ul><p>如果将用户历史行为对用户评分预测影响考虑进来就是SVD++算法：</p><p><img src="https://s2.ax1x.com/2019/08/28/mH61ij.png" alt></p><p>SVD++的核心思想是把基于领域的itemCF算法用矩阵分解的方法实现，转换的方法是这样的：</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6Gzq.png" alt></p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>1.FM</p><p>2.隐式反馈矩阵分解</p><p>3.基于特征的矩阵分解</p><h1 id="MF-For-Recommendation-System"><a href="#MF-For-Recommendation-System" class="headerlink" title="MF For Recommendation System"></a>MF For Recommendation System</h1><p>对于推荐系统来说存在两大场景即评分预测（rating prediction）与Top-N推荐（item recommendation，item ranking）。评分预测场景主要用于评价网站，比如用户给自己看过的电影评多少分（MovieLens），或者用户给自己看过的书籍评价多少分（Douban）。其中矩阵分解技术主要应用于该场景。Top-N推荐场景主要用于购物网站或者一般拿不到显式评分信息的网站，即通过用户的隐式反馈信息来给用户推荐一个可能感兴趣的列表以供其参考。</p><p>有如下R（5，4）的打分矩阵：（“-”表示用户没有打分），其中打分矩阵R（n，m）是n行和m列，n表示user个数，m表示iten个数</p><p>  <img src="https://s2.ax1x.com/2019/08/28/mH6NLT.png" alt></p><p>那么，如何根据目前的矩阵R（5,4）如何对未打分的商品进行评分的预测（如何得到分值为0的用户的打分值）？</p><p>——矩阵分解的思想可以解决这个问题，其实这种思想可以看作是有监督的机器学习问题（回归问题）。</p><p>矩阵R可以近似表示为P与Q的乘积：R（n,m）≈ P(n,K)*Q(K,m)</p><p>矩阵分解的过程中，将原始的评分矩阵分解成两个矩阵和的乘积：</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6dwF.jpg" alt></p><p>矩阵P(n,K)表示n个user和K个特征之间的关系矩阵，这K个特征是一个中间变量，矩阵Q(K,m)的转置是矩阵Q(m,K)，矩阵Q(m,K)表示m个item和K个特征之间的关系矩阵，这里的K值是自己控制的，可以使用交叉验证的方法获得最佳的K值。为了得到近似的R(n,m)，必须求出矩阵P和Q，如何求它们呢？</p><p><strong>步骤</strong></p><p>1.首先令</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6aeU.jpg" alt></p><p>2.损失函数： 使用原始的评分矩阵与重新构建的评分矩阵之间的误差的平方作为损失函数。</p><p>如果R（i，j）已知，则R（i，j）的误差平方和为</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6wo4.jpg" alt></p><p>最终，需要求解所有的非“-”项的损失之和最小值：</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6DY9.jpg" alt></p><p>3.使用梯度下降法获得修正的p和q分量：</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6rWR.jpg" alt></p><p>根据梯度方向更新变量</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6yS1.jpg" alt></p><p>4.不停迭代直至算法最终收敛（直到sum（e^2）&lt;=阈值</p><p><strong>加入正则项</strong></p><p>1.第一步同上</p><p>2.在通常求解过程中，为了能够有较好的泛化能力，会在损失函数中加入正则项对参数进行约束</p><p><img src="https://s2.ax1x.com/2019/08/28/mH66Qx.png" alt></p><p>也就是</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6cy6.png" alt></p><p>3.使用梯度下降法获得修正的p和q</p><p><img src="https://s2.ax1x.com/2019/08/28/mH6WwD.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mH6fTe.png" alt></p><p>4.不停迭代直至算法最终收敛（直到sum（e^2）&lt;=阈值</p><p>【预测】利用上述的过程，我们可以得到矩阵，这样便可以为用户 i 对商品 j 进行打分</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#导包</span></span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-comment">#参数设置</span></span><br><span class="line">alph = <span class="hljs-number">0.00049</span></span><br><span class="line">step = <span class="hljs-number">9000</span></span><br><span class="line">beta = <span class="hljs-number">0.05</span></span><br><span class="line">K = <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-comment">#   MF</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">MF</span><span class="hljs-params">(r,p,q,alph,step,beta)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    count = <span class="hljs-number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span>(count&lt;step):</span><br><span class="line">        count+=<span class="hljs-number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">                <span class="hljs-comment">#构建损失函数</span></span><br><span class="line">                <span class="hljs-keyword">if</span> r[i][j]&gt;<span class="hljs-number">0</span>:</span><br><span class="line">                    eij = r[i][j] - np.dot(p[i,:],q[:,j])</span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(K):</span><br><span class="line">                        pd_p = <span class="hljs-number">-2</span>*eij*q[k][j]+beta * p[i][k]</span><br><span class="line">                        pd_q = <span class="hljs-number">-2</span>*eij*p[i][k]+beta * q[k][j]</span><br><span class="line">                        p[i][k] -=  alph*pd_p</span><br><span class="line">                        q[k][j] -=  alph*pd_q</span><br><span class="line">       </span><br><span class="line">        e  = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(r)):</span><br><span class="line">                 <span class="hljs-keyword">if</span> r[i][j]&gt;<span class="hljs-number">0</span> :</span><br><span class="line">                    eij = r[i][j] - np.dot(p[i,:],q[:,j])</span><br><span class="line">                    e += eij**<span class="hljs-number">2</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(K):</span><br><span class="line">                        e += (beta/<span class="hljs-number">2</span>)*(p[i][k]**<span class="hljs-number">2</span>+q[k][j]**<span class="hljs-number">2</span>)</span><br><span class="line">        result.append(e)</span><br><span class="line">       <span class="hljs-comment"># print(e)</span></span><br><span class="line">        </span><br><span class="line">    <span class="hljs-keyword">return</span> p , q , result</span><br><span class="line">   <span class="hljs-comment">#原始矩阵</span></span><br><span class="line">r = [</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],</span><br><span class="line">    [<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]</span><br><span class="line">]</span><br><span class="line">r = np.array(r)</span><br><span class="line">print(<span class="hljs-string">f"输入矩阵为\n<span class="hljs-subst">&#123;r&#125;</span>"</span>)</span><br><span class="line">p = np.random.rand(<span class="hljs-number">5</span>,K)</span><br><span class="line">q = np.random.rand(K,<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">new_p,new_q,result = MF(r,p,q,alph,step,beta)</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">f'输出矩阵为\n<span class="hljs-subst">&#123;np.dot(new_p,new_q)&#125;</span>'</span> )</span><br><span class="line">plt.plot(range(len(result)),result)</span><br></pre></td></tr></table></figure><p>最后结果如图</p><p><img src="/AngelNI.github.io/MF/17.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gobang？</title>
      <link href="/AngelNI.github.io/Gobang%EF%BC%9F/"/>
      <url>/AngelNI.github.io/Gobang%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p> 时间带着明显的恶意，缓缓在我的身上流逝</p><a id="more"></a><p>向大家介绍一款游戏，就是五子棋。</p><p>什么，五子棋？？？</p><p>没错，就是高大上的五子棋，这是一个基于神经网络用Python写的小游戏五子棋，经过大量的训练，已经很优秀了呢！！！不知道你敢不敢与他战斗啊.</p><p>Introduce to you a game, that is gobang.<br>What, Gobang???<br>Yes, it’s Gobang in Gaoda. It’s a small game written by Python based on neural network. After a lot of training, it’s already excellent!!! I wonder if you dare to fight him.</p><p><a href="https://github.com/AngelNI/AlphaZero_Gomoku" target="_blank" rel="noopener">Github项目地址</a></p><p><img src="https://s2.ax1x.com/2019/08/28/mH5eQH.gif" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mH5nOA.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gobang？</title>
      <link href="/AngelNI.github.io/%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%9F/"/>
      <url>/AngelNI.github.io/%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p> 时间带着明显的恶意，缓缓在我的身上流逝</p><a id="more"></a><p>向大家介绍一款游戏，就是五子棋。</p><p>什么，五子棋？？？</p><p>没错，就是高大上的五子棋，这是一个基于神经网络用Python写的小游戏五子棋，经过大量的训练，已经很优秀了呢！！！不知道你敢不敢与他战斗啊.</p><p>Introduce to you a game, that is gobang.<br>What, Gobang???<br>Yes, it’s Gobang in Gaoda. It’s a small game written by Python based on neural network. After a lot of training, it’s already excellent!!! I wonder if you dare to fight him.</p><p><a href="https://github.com/AngelNI/AlphaZero_Gomoku" target="_blank" rel="noopener">Github项目地址</a></p><p><img src="https://s2.ax1x.com/2019/08/28/mHf6ld.gif" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHfc6A.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN--tensorflow--code-learning</title>
      <link href="/AngelNI.github.io/CNN--tensorflow-code-learn/"/>
      <url>/AngelNI.github.io/CNN--tensorflow-code-learn/</url>
      
        <content type="html"><![CDATA[<p> 不知道未来如何变化，总有人相信童话。</p><a id="more"></a><p>这是以tensorflow为框架，写的关于MNIST数据识别的卷积神经网络的python代码，这个代码是自己一点一点把别人的代码打印到Calab，修改，运行，再修改，再运行，我是代码的生产者，也是代码的搬运工，哈哈~</p><p>发到博客上，也很方便看，啊哈哈哈。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf </span><br><span class="line"><span class="hljs-keyword">import</span> tensorflow.examples.tutorials.mnist.input_data <span class="hljs-keyword">as</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="hljs-string">"MNIST_data/"</span>, one_hot=<span class="hljs-literal">True</span>)     <span class="hljs-comment">#下载并加载mnist数据</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, <span class="hljs-number">784</span>])                        <span class="hljs-comment">#输入的数据占位符</span></span><br><span class="line">y_actual = tf.placeholder(tf.float32, shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">10</span>])            <span class="hljs-comment">#输入的标签占位符</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的权值 W</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weight_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.truncated_normal(shape, stddev=<span class="hljs-number">0.1</span>)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的偏置项 b</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bias_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.constant(<span class="hljs-number">0.1</span>, shape=shape)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建卷积层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span><span class="hljs-params">(x, W)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建池化层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_pool</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],strides=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的权值 W</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weight_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.truncated_normal(shape, stddev=<span class="hljs-number">0.1</span>)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于初始化所有的偏置项 b</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bias_variable</span><span class="hljs-params">(shape)</span>:</span></span><br><span class="line">  initial = tf.constant(<span class="hljs-number">0.1</span>, shape=shape)</span><br><span class="line">  <span class="hljs-keyword">return</span> tf.Variable(initial)</span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建卷积层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span><span class="hljs-params">(x, W)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义一个函数，用于构建池化层</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_pool</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],strides=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#构建网络</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="hljs-number">-1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">1</span>])         <span class="hljs-comment">#转换输入数据shape,以便于用于网络中</span></span><br><span class="line">W_conv1 = weight_variable([<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>])      </span><br><span class="line">b_conv1 = bias_variable([<span class="hljs-number">32</span>])       </span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)     <span class="hljs-comment">#第一个卷积层</span></span><br><span class="line">h_pool1 = max_pool(h_conv1)                                  <span class="hljs-comment">#第一个池化层</span></span><br><span class="line"></span><br><span class="line">W_conv2 = weight_variable([<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="hljs-number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)      <span class="hljs-comment">#第二个卷积层</span></span><br><span class="line">h_pool2 = max_pool(h_conv2)                                   <span class="hljs-comment">#第二个池化层</span></span><br><span class="line"></span><br><span class="line">W_fc1 = weight_variable([<span class="hljs-number">7</span> * <span class="hljs-number">7</span> * <span class="hljs-number">64</span>, <span class="hljs-number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="hljs-number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="hljs-number">-1</span>, <span class="hljs-number">7</span>*<span class="hljs-number">7</span>*<span class="hljs-number">64</span>])              <span class="hljs-comment">#reshape成向量</span></span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)    <span class="hljs-comment">#第一个全连接层</span></span><br><span class="line"></span><br><span class="line">keep_prob = tf.placeholder(<span class="hljs-string">"float"</span>) </span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)                  <span class="hljs-comment">#dropout层</span></span><br><span class="line"></span><br><span class="line">W_fc2 = weight_variable([<span class="hljs-number">1024</span>, <span class="hljs-number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="hljs-number">10</span>])</span><br><span class="line">y_predict=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)   <span class="hljs-comment">#softmax层</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_actual*tf.log(y_predict))     <span class="hljs-comment">#交叉熵</span></span><br><span class="line"></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="hljs-number">1e-3</span>).minimize(cross_entropy)    <span class="hljs-comment">#梯度下降法</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_predict,<span class="hljs-number">1</span>), tf.argmax(y_actual,<span class="hljs-number">1</span>))    </span><br><span class="line"></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="hljs-string">"float"</span>))                 <span class="hljs-comment">#精确度计算</span></span><br><span class="line">sess=tf.InteractiveSession()                          </span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20000</span>):</span><br><span class="line">  batch = mnist.train.next_batch(<span class="hljs-number">50</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> i%<span class="hljs-number">100</span> == <span class="hljs-number">0</span>:                  <span class="hljs-comment">#训练100次，验证一次</span></span><br><span class="line">    train_acc = accuracy.eval(feed_dict=&#123;x:batch[<span class="hljs-number">0</span>], y_actual: batch[<span class="hljs-number">1</span>], keep_prob: <span class="hljs-number">1.0</span>&#125;)</span><br><span class="line">    print(<span class="hljs-string">'step %d, training accuracy %g'</span>%(i,train_acc))</span><br><span class="line">    train_step.run(feed_dict=&#123;x: batch[<span class="hljs-number">0</span>], y_actual: batch[<span class="hljs-number">1</span>], keep_prob: <span class="hljs-number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line">test_acc=accuracy.eval(feed_dict=&#123;x: mnist.test.images, y_actual: mnist.test.labels, keep_prob: <span class="hljs-number">1.0</span>&#125;)</span><br><span class="line">print(<span class="hljs-string">"test accuracy %g"</span>%test_acc)</span><br></pre></td></tr></table></figure><p><img src="http://pwxyaiwx0.bkt.clouddn.com/tensorflow.png" alt></p><p>博文参考：<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/5-03-CNN1/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/5-03-CNN1/</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN-Self-practice</title>
      <link href="/AngelNI.github.io/KNN-Practice/"/>
      <url>/AngelNI.github.io/KNN-Practice/</url>
      
        <content type="html"><![CDATA[<p> 有一天我结婚了，你一定要来哦，因为没有新娘，那该有多尴尬.</p><a id="more"></a><p>  这是我的自己写的第一个KNN比较简单的练习案例，有关于KNN的介绍请参考我的上篇博文</p><p>This is my first simple exercise case of KNN written by myself. For an introduction to KNN, please refer to my last blog post.</p><p> <a href="https://skr-king.github.io/Skr-king.github.io/KNN%E2%80%94%E2%80%94K%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95.html/#more" target="_blank" rel="noopener">我在这里</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#导包</span></span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">import</span> operator</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-comment">#自我创建数据集</span></span><br><span class="line">data=[</span><br><span class="line">    [<span class="hljs-number">0.8</span>,<span class="hljs-number">1.8</span>],</span><br><span class="line">    [<span class="hljs-number">0.9</span>,<span class="hljs-number">2.1</span>],</span><br><span class="line">    [<span class="hljs-number">1.0</span>,<span class="hljs-number">1.5</span>],</span><br><span class="line">    [<span class="hljs-number">1.2</span>,<span class="hljs-number">1.9</span>],</span><br><span class="line">    [<span class="hljs-number">1.3</span>,<span class="hljs-number">2.0</span>],</span><br><span class="line">    [<span class="hljs-number">2.5</span>,<span class="hljs-number">1.7</span>],</span><br><span class="line">    [<span class="hljs-number">2.8</span>,<span class="hljs-number">1.5</span>],</span><br><span class="line">    [<span class="hljs-number">2.5</span>,<span class="hljs-number">1.4</span>],</span><br><span class="line">    [<span class="hljs-number">2.7</span>,<span class="hljs-number">1.9</span>],</span><br><span class="line">    [<span class="hljs-number">2.6</span>,<span class="hljs-number">1.8</span>],</span><br><span class="line">    [<span class="hljs-number">1.9</span>,<span class="hljs-number">3.3</span>],</span><br><span class="line">    [<span class="hljs-number">2.0</span>,<span class="hljs-number">2.9</span>],</span><br><span class="line">    [<span class="hljs-number">2.2</span>,<span class="hljs-number">2.8</span>],</span><br><span class="line">    [<span class="hljs-number">2.1</span>,<span class="hljs-number">2.9</span>],</span><br><span class="line">    [<span class="hljs-number">1.8</span>,<span class="hljs-number">3.0</span>],</span><br><span class="line">]</span><br><span class="line">label=[<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>]</span><br><span class="line">print(label)</span><br><span class="line">train_data = np.array(data)</span><br><span class="line">print(train_data)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/28/mH0VxO.png" alt></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">x_1=[]</span><br><span class="line">y_1=[]</span><br><span class="line">x_2=[]</span><br><span class="line">y_2=[]</span><br><span class="line">x_3=[]</span><br><span class="line">y_3=[]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):</span><br><span class="line">        x_1.append(data[i][<span class="hljs-number">0</span>])</span><br><span class="line">        y_1.append(data[i][<span class="hljs-number">1</span>])</span><br><span class="line">        x_2.append(data[i+<span class="hljs-number">5</span>][<span class="hljs-number">0</span>])</span><br><span class="line">        y_2.append(data[i+<span class="hljs-number">5</span>][<span class="hljs-number">1</span>])</span><br><span class="line">        x_3.append(data[i+<span class="hljs-number">10</span>][<span class="hljs-number">0</span>])</span><br><span class="line">        y_3.append(data[i+<span class="hljs-number">10</span>][<span class="hljs-number">1</span>])</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">15</span>):</span><br><span class="line">    x.append(data[j][<span class="hljs-number">0</span>])</span><br><span class="line">    y.append(data[j][<span class="hljs-number">1</span>])</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">print(<span class="hljs-string">f'<span class="hljs-subst">&#123;x_1&#125;</span> \n <span class="hljs-subst">&#123;y_1&#125;</span>\n<span class="hljs-subst">&#123;x_2&#125;</span> \n  <span class="hljs-subst">&#123;y_2&#125;</span>\n<span class="hljs-subst">&#123;x_3&#125;</span>\n <span class="hljs-subst">&#123;y_3&#125;</span> '</span>)</span><br><span class="line">f,ax=plt.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range (<span class="hljs-number">5</span>):</span><br><span class="line">        ax.scatter(x_1[i],y_1[i],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'r'</span>,marker=<span class="hljs-string">'o'</span>)</span><br><span class="line">        ax.scatter(x_2[i],y_2[i],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'b'</span>,marker=<span class="hljs-string">'o'</span>)</span><br><span class="line">        ax.scatter(x_3[i],y_3[i],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'g'</span>,marker=<span class="hljs-string">'o'</span>)</span><br><span class="line">test = [[<span class="hljs-number">1.5</span>,<span class="hljs-number">2.85</span>]]<span class="hljs-comment">##自定义点，从图中可以看出，很明显属于第三类</span></span><br><span class="line">x_test=<span class="hljs-number">1.5</span></span><br><span class="line">y_test=<span class="hljs-number">2.85</span></span><br><span class="line">ax.scatter(test[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],test[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],label=<span class="hljs-string">'skitcat'</span>,color=<span class="hljs-string">'m'</span>,marker = <span class="hljs-string">'x'</span>)</span><br><span class="line">test = np.array(test)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/28/mH0mse.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mH0MdA.png" alt></p><p><strong>从图中可以看出，很明显属于第三类</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#定义距离公式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">d_euc</span><span class="hljs-params">(x, y)</span>:</span><span class="hljs-comment">#欧式距离</span></span><br><span class="line">    d = np.sqrt(np.sum(np.square(x- y)))</span><br><span class="line">    <span class="hljs-keyword">return</span> d</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">KNN</span><span class="hljs-params">(train_data,test,label,k)</span>:</span></span><br><span class="line">    distance=[]</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> train_data:</span><br><span class="line">        distance.append(d_euc(i,train_data))</span><br><span class="line">    distance = np.array(distance)</span><br><span class="line">    index = distance.argsort()  <span class="hljs-comment"># 获取按距离大小排序后的索引</span></span><br><span class="line">    <span class="hljs-comment">#print(index)</span></span><br><span class="line">    sort_dis = np.sort(distance)</span><br><span class="line">    count=&#123;&#125;</span><br><span class="line">o=<span class="hljs-number">0</span></span><br><span class="line">print(label)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index:</span><br><span class="line">   o=o+<span class="hljs-number">1</span></span><br><span class="line">    label_vote=label[i]</span><br><span class="line">    count[label_vote] = count.get(label_vote,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>   <span class="hljs-comment">##返回特定的键值，否则返回 0</span></span><br><span class="line">    <span class="hljs-keyword">if</span> o&gt;k:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line">    print(label_vote)</span><br><span class="line">print(count)</span><br><span class="line">final_outcome=majory_vote(count)</span><br><span class="line"><span class="hljs-keyword">return</span> final_outcome</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#定义决策方案——多数表决法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">majory_vote</span><span class="hljs-params">(count)</span>:</span></span><br><span class="line">    sorted_class_count = sorted(</span><br><span class="line">        count.items(), key=operator.itemgetter(<span class="hljs-number">1</span>), reverse=<span class="hljs-literal">True</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> sorted_class_count</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label=[<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>]</span><br><span class="line">test=[<span class="hljs-number">3.0</span>,<span class="hljs-number">2.0</span>]</span><br><span class="line">test = np.array(test)</span><br><span class="line">final_label = KNN(train_data,test,label, <span class="hljs-number">6</span>)</span><br><span class="line">final_label</span><br></pre></td></tr></table></figure><p>最后结果</p><p><img src="https://s2.ax1x.com/2019/08/28/mH0xYt.png" alt>))</p><p>可以发现最初我们看到的真实结果一样属于c类。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN——k-Nearest Neighbor</title>
      <link href="/AngelNI.github.io/KNN%E2%80%94%E2%80%94k-Nearest-Neighbor/"/>
      <url>/AngelNI.github.io/KNN%E2%80%94%E2%80%94k-Nearest-Neighbor/</url>
      
        <content type="html"><![CDATA[<p> 海绵宝宝：“派大星，你为什么叫派大星”</p><p>派大星：“因为我是上帝拍下来保护你的大星星” </p><a id="more"></a><h1 id="一、Concept"><a href="#一、Concept" class="headerlink" title="一、Concept"></a>一、Concept</h1><h2 id="1-1Language-Description"><a href="#1-1Language-Description" class="headerlink" title="1.1Language Description"></a>1.1Language Description</h2><p>K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。即是给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例（也就是所说的K个邻居）， 这K个实例的多数属于某个类，就把该输入实例分类到这个类中。</p><p>KNN 算法的核心思想和最近邻算法思想相似，都是通过寻找和未知样本相似的类别进行分类。但 NN 算法中只依赖 1 个样本进行决策，在分类时过于绝对，会造成分类效果差的情况，为解决 NN 算法的缺陷，KNN 算法采用 K 个相邻样本的方式共同决策未知样本的类别,这样在决策中容错率相对于 NN 算法就要高很多，分类效果也会更好。</p><h2 id="1-2-graphic"><a href="#1-2-graphic" class="headerlink" title="1.2 graphic"></a>1.2 graphic</h2><p>例子：要区分“猫”和“狗”，通过“claws”和“sound”两个feature来判断的话，圆形和三角形是已知分类的了，那么这个“star”代表的是哪一类呢？</p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn1.png" alt></p><p>k＝3时，这三条线链接的点就是最近的三个点，那么圆形多一些，所以这个star就是属于猫。</p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn2.png" alt></p><h1 id="二、Algorithmic-Description"><a href="#二、Algorithmic-Description" class="headerlink" title="二、Algorithmic Description"></a>二、Algorithmic Description</h1><h2 id="1-pseudo-code"><a href="#1-pseudo-code" class="headerlink" title="1.pseudo code"></a>1.pseudo code</h2><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn3.png" alt></p><h2 id="2-steps"><a href="#2-steps" class="headerlink" title="2.steps"></a>2.steps</h2><ol><li><p>初始化距离为最大值</p></li><li><p>计算未知样本和每个训练样本的距离dist</p></li><li><p>得到目前K个最邻近样本中的最大距离maxdist</p></li><li><p>如果dist小于maxdist，则将该训练样本作为K-最近邻样本</p></li><li><p>重复步骤2,3,4，直到未知样本和所有训练样本的距离都算完</p></li><li><p>统计K个最近邻样本中每个类别出现的次数</p></li><li><p>选择出现频率最大的类别作为未知样本的类别</p></li></ol><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn5.png" alt></p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn4.png" alt></p><h1 id="三、KNN‘s-three-elements-of-model"><a href="#三、KNN‘s-three-elements-of-model" class="headerlink" title="三、KNN‘s three elements of model"></a>三、KNN‘s three elements of model</h1><h2 id="1-Distance-measure"><a href="#1-Distance-measure" class="headerlink" title="1.Distance measure"></a>1.Distance measure</h2><p>距离度量，说白了就是距离计算公式。</p><p>常见的距离计算公式有如下：</p><pre><code>1.欧氏距离2.曼哈顿距离3.余弦距离4.皮尔逊系数5.杰卡德距离6.闵可夫斯基距离7.切比雪夫距离8.汉明距离9.莱文斯坦距离</code></pre><h3 id="1-1Euclidean-distance"><a href="#1-1Euclidean-distance" class="headerlink" title="1.1Euclidean distance"></a>1.1Euclidean distance</h3><p>欧氏距离是最常见的两点之间或多点之间的距离表示法，又称之为欧几里得度量，它定义于欧几里得空间中，是闵可夫斯基距离=2特殊情形.</p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn6.png" alt></p><pre><code>def d_euc(x, y):    d = np.sqrt(np.sum(square(x - y)))    return d</code></pre><h3 id="1-2Manhattan-Distance"><a href="#1-2Manhattan-Distance" class="headerlink" title="1.2Manhattan Distance"></a>1.2Manhattan Distance</h3><p><img src="http://pwxyaiwx0.bkt.clouddn.com/knn7.png" alt></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def d_man(x, y):</span><br><span class="line">    </span><br><span class="line">    d = np.sum(abs(x - y))</span><br><span class="line">    </span><br><span class="line">    return d</span><br></pre></td></tr></table></figure><h2 id="2-Selection-of-K-Value"><a href="#2-Selection-of-K-Value" class="headerlink" title="2.Selection of K Value"></a>2.Selection of K Value</h2><p>不要小看了这个K值选择问题，因为它对K近邻算法的结果会产生重大影响。</p><p>1.</p><p>如果选择较小的K值，就相当于用较小的领域中的训练实例进行预测，“学习”近似误差会减小，只有与输入实例较近或相似的训练实例才会对预测结果起作用，与此同时带来的问题是“学习”的估计误差会增大，换句话说，K值的减小就意味着整体模型变得复杂，容易发生过拟合；</p><p>2.</p><p>如果选择较大的K值，就相当于用较大领域中的训练实例进行预测，其优点是可以减少学习的估计误差，但缺点是学习的近似误差会增大。这时候，与输入实例较远（不相似的）训练实例也会对预测器作用，使预测发生错误，且K值的增大就意味着整体的模型变得简单。</p><p>3.</p><p>K=N，则完全不足取，因为此时无论输入实例是什么，都只是简单的预测它属于在训练实例中最多的累，模型过于简单，忽略了训练实例中大量有用信息。</p><h2 id="3-Classification-Decision-Rules"><a href="#3-Classification-Decision-Rules" class="headerlink" title="3.Classification Decision Rules"></a>3.Classification Decision Rules</h2><p>1.多数表决法</p><p>多数表决法类似于投票的过程，也就是在 K 个邻居中选择类别最多的种类作为测试样本的类别。</p><p>2.加权表决法</p><p>根据距离的远近，对近邻的投票进行加权，距离越近则权重越大，通过权重计算结果最大值的类为测试样本的类别。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map函数的简单用法</title>
      <link href="/AngelNI.github.io/map%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>/AngelNI.github.io/map%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p> 你要开心，你要快乐，因为你是大哥，不可以难过。<a id="more"></a></p><script src="//lib.baomitu.com/jquery/3.3.1/jquery.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Neural Network Construction</title>
      <link href="/AngelNI.github.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/"/>
      <url>/AngelNI.github.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p> 啊啊啊Ｏ(≧口≦)Ｏ！！！我的第一个神经网络竟然是算出来的。<a id="more"></a></p><p>学习了简单的神经网络模型，今天出于兴趣，自己搭个神经网络的巨简单的模型，不不不，是算出来的。</p><p>这篇代码是根据我的上一篇博客<a href="https://skr-king.github.io/Skr-king.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%AE%80%E5%8D%95%E6%8E%A8%E5%AF%BC.html/#more" target="_blank" rel="noopener">点我吧</a>根据推导公式写的，小白技能有限，大佬不要嘲笑啊。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#激活函数及导数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">d_sigmoid</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">1</span> - x)</span><br><span class="line">    </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> np.tanh(x)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">d_tanh</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> - np.tanh(x) * np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">##参数设置</span></span><br><span class="line">alph = <span class="hljs-number">0.5</span></span><br><span class="line">esp = <span class="hljs-number">0.01</span></span><br><span class="line">step = <span class="hljs-number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#前向传播</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">qianxiangchuanbo</span><span class="hljs-params">(init,weight,b)</span>:</span></span><br><span class="line">    <span class="hljs-comment">#输入层——&gt;隐含层</span></span><br><span class="line">    neth=[]<span class="hljs-comment">#神经元输入加权和</span></span><br><span class="line">    outh=[]<span class="hljs-comment">#神经元输出</span></span><br><span class="line">    <span class="hljs-comment">#隐含层---&gt;输出层</span></span><br><span class="line">    neto=[]<span class="hljs-comment">#输出神经元</span></span><br><span class="line">    outo=[]<span class="hljs-comment">#神经元输出</span></span><br><span class="line">    neth.append(weight[<span class="hljs-number">0</span>]*init[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">1</span>]*init[<span class="hljs-number">1</span>]+b[<span class="hljs-number">0</span>])</span><br><span class="line">    neth.append(weight[<span class="hljs-number">2</span>]*init[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">3</span>]*init[<span class="hljs-number">1</span>]+b[<span class="hljs-number">0</span>])</span><br><span class="line">    outh.append(sigmoid(neth[<span class="hljs-number">0</span>]))</span><br><span class="line">    outh.append(sigmoid(neth[<span class="hljs-number">1</span>]))</span><br><span class="line">    neto.append(weight[<span class="hljs-number">4</span>]*outh[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">5</span>]*outh[<span class="hljs-number">1</span>]+b[<span class="hljs-number">1</span>])</span><br><span class="line">    neto.append(weight[<span class="hljs-number">6</span>]*outh[<span class="hljs-number">0</span>]+weight[<span class="hljs-number">7</span>]*outh[<span class="hljs-number">1</span>]+b[<span class="hljs-number">1</span>])</span><br><span class="line">    outo.append(sigmoid(neto[<span class="hljs-number">0</span>]))</span><br><span class="line">    outo.append(sigmoid(neto[<span class="hljs-number">1</span>]))</span><br><span class="line">    <span class="hljs-keyword">return</span> neth,outh,neto,outo</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fanxiangchuanbo</span><span class="hljs-params">(out,outo,outh)</span>:</span></span><br><span class="line">    </span><br><span class="line">    new_weight=[]</span><br><span class="line">    q=[]</span><br><span class="line">    <span class="hljs-comment">#输如层——&gt;隐藏层</span></span><br><span class="line">    a1=(-(init[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])*outo[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">0</span>]))</span><br><span class="line">    a2=(-(init[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>])*outo[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">1</span>]))</span><br><span class="line">    q.append(a1)</span><br><span class="line">    q.append(a2)</span><br><span class="line">    w1 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">4</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">6</span>]*outh[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">0</span>])*init[<span class="hljs-number">0</span>]</span><br><span class="line">    w2 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">4</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">6</span>]*outh[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">0</span>])*init[<span class="hljs-number">1</span>]</span><br><span class="line">    w3 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">5</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">7</span>]*outh[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">1</span>])*init[<span class="hljs-number">0</span>]</span><br><span class="line">    w4 = q[<span class="hljs-number">0</span>]*weight[<span class="hljs-number">5</span>]+q[<span class="hljs-number">1</span>]*weight[<span class="hljs-number">7</span>]*outh[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outh[<span class="hljs-number">1</span>])*init[<span class="hljs-number">1</span>]</span><br><span class="line">    new_weight.append(w1)</span><br><span class="line">    new_weight.append(w2)</span><br><span class="line">    new_weight.append(w3)</span><br><span class="line">    new_weight.append(w4)</span><br><span class="line">    <span class="hljs-comment">#输出层——&gt;隐藏层</span></span><br><span class="line">    w5 = -(out[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])*outo[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">0</span>])*outh[<span class="hljs-number">0</span>]</span><br><span class="line">    w6 = -(out[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])*outo[<span class="hljs-number">0</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">0</span>])*outh[<span class="hljs-number">1</span>]</span><br><span class="line">    w7 = -(out[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>])*outo[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">1</span>])*outh[<span class="hljs-number">0</span>]</span><br><span class="line">    w8 = -(out[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>])*outo[<span class="hljs-number">1</span>]*(<span class="hljs-number">1</span>-outo[<span class="hljs-number">1</span>])*outh[<span class="hljs-number">1</span>]</span><br><span class="line">    new_weight.append(w5)</span><br><span class="line">    new_weight.append(w6)</span><br><span class="line">    new_weight.append(w7)</span><br><span class="line">    new_weight.append(w8)</span><br><span class="line">    <span class="hljs-keyword">return</span> new_weight</span><br><span class="line"><span class="hljs-comment">#输入集</span></span><br><span class="line">init = [<span class="hljs-number">0.05</span>,<span class="hljs-number">0.10</span>]</span><br><span class="line"><span class="hljs-comment">#真实输出集</span></span><br><span class="line">out = [<span class="hljs-number">0.01</span>,<span class="hljs-number">0.99</span>]</span><br><span class="line"><span class="hljs-comment">#权重</span></span><br><span class="line">weight = [<span class="hljs-number">0.15</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">0.40</span>,<span class="hljs-number">0.45</span>,<span class="hljs-number">0.50</span>,<span class="hljs-number">0.55</span>]</span><br><span class="line"><span class="hljs-comment">#偏置项</span></span><br><span class="line">b=[<span class="hljs-number">0.35</span>,<span class="hljs-number">0.60</span>]</span><br><span class="line"></span><br><span class="line">count=<span class="hljs-number">0</span></span><br><span class="line">result = []</span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">    count=count+<span class="hljs-number">1</span></span><br><span class="line">    </span><br><span class="line">    neth,outh,neto,outo = qianxiangchuanbo(init,weight,b)</span><br><span class="line">    e=(abs(out[<span class="hljs-number">0</span>]-outo[<span class="hljs-number">0</span>])+abs(out[<span class="hljs-number">1</span>]-outo[<span class="hljs-number">1</span>]))</span><br><span class="line">    result.append(e)</span><br><span class="line">    gd_weight = fanxiangchuanbo(out,outo,outh)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(weight)):</span><br><span class="line">        weight[i]=weight[i]-alph*gd_weight[i]</span><br><span class="line"></span><br><span class="line">   <span class="hljs-comment"># if e&lt;esp:</span></span><br><span class="line">    <span class="hljs-comment">#    break</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> count &gt; step:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(len(result)):</span><br><span class="line">  plt.scatter(k,result[k])</span><br><span class="line">plt.show()</span><br><span class="line">print(weight)</span><br><span class="line">print(out)</span><br><span class="line">print(outo)</span><br></pre></td></tr></table></figure><p>最后的运行结果如图</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfgOI.png" alt></p><p>由于此代码只运行了5000次，可以看出与实际的差距还是很大的，如果感兴趣，你可以试试增大迭代次数，或者控制精度。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial Neural Networks——Activation Funcation</title>
      <link href="/AngelNI.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
      <url>/AngelNI.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8B%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p> 有时候不敢去拥有，因为害怕失去，所以非常努力地去奋斗，让自己累，让自己不去想。<a id="more"></a></p><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><p><strong>定义</strong></p><p>所谓激活函数（Activation Function），就是在人工神经网络的神经元上运行的函数，负责将神经元的输入映射到输出端。</p><p>判定每个神经元的输出</p><p>通俗来说，激活函数一般是非线性函数，其作用是能够给神经网络加入一些非线性因素，使得神经网络可以更好地解决较为复杂的问题。</p><p><strong>常见的激活函数</strong></p><p>1.sigmoid</p><p>2.tanh</p><p>3.ReLu</p><p>4.ELU</p><p>5.PReLU</p><p>这里简单的对前三个进行介绍</p><h2 id="1-sigmoid"><a href="#1-sigmoid" class="headerlink" title="1.sigmoid"></a>1.sigmoid</h2><p><img src="https://s2.ax1x.com/2019/08/28/mHhk0x.png" alt></p><p>Sigmoid 函数的取值范围在 (0,1) 之间，单调连续，求导容易，一般用于二分类神经网络的输出层。</p><p>sigmoid函数图像如图</p><p><img src="https://s2.ax1x.com/2019/08/28/mHh1Bt.png" alt></p><p>sigmoid函数求导</p><p><img src="https://s2.ax1x.com/2019/08/28/mHhGAf.jpg" alt></p><p>缺点：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Sigmoid 函数饱和区范围广，容易造成梯度消失</span><br><span class="line"></span><br><span class="line">2.参数矩阵 W 的每个元素都会朝着同一个方向变化，同为正或同为负。这对于神经网络训练是不利的，所有的 W 都朝着同一符号方向变化会减小训练速度，增加模型训练时间。</span><br><span class="line"></span><br><span class="line">3.Sigmoid 函数包含 exp 指数运算，运算成本也比较大</span><br></pre></td></tr></table></figure><h2 id="2-tanh"><a href="#2-tanh" class="headerlink" title="2.tanh"></a>2.tanh</h2><p><img src="https://s2.ax1x.com/2019/08/28/mHhdjs.png" alt></p><p>图像如图</p><p><img src="https://s2.ax1x.com/2019/08/28/mHh0un.png" alt></p><p>tanh 函数的取值范围在 (-1,1) 之间，单调连续，求导容易。</p><p>相比于 Sigmoid 函数，tanh 函数的优点主要有两个：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.其一，收敛速度更快，如下图所示，tanh 函数线性区斜率较 Sigmoid 更大一些。在此区域内训练速度会更快。</span><br><span class="line">2.其二，tanh 函数输出均值为零，也就不存在 Sigmoid 函数中 dW 恒为正或者恒为负，从而影响训练速度的问题。</span><br></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tanh 函数与 Sigmoid 函数一样，也存在饱和区梯度消失问题。其饱和区甚至比 Sigmoid 还要大一些，但不明显。</span><br></pre></td></tr></table></figure><h2 id="3-ReLu"><a href="#3-ReLu" class="headerlink" title="3.ReLu"></a>3.ReLu</h2><p><img src="https://s2.ax1x.com/2019/08/28/mHhsEV.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHhyNT.png" alt></p><p>优点：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.没有饱和区，不存在梯度消失问题。</span><br><span class="line"></span><br><span class="line">2.没有复杂的指数运算，计算简单、效率提高。</span><br><span class="line"></span><br><span class="line">3.实际收敛速度较快，大约是 Sigmoid/tanh 的 6 倍。</span><br><span class="line"></span><br><span class="line">4.比 Sigmoid 更符合生物学神经激活机制。</span><br></pre></td></tr></table></figure><p>缺点： </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. ReLU 的输出仍然是非零对称的，可能出现 dW 恒为正或者恒为负，从而影响训练速度。</span><br><span class="line">2. 当 x&lt;0 时，ReLU 输出总为零。该神经元输出为零，则反向传播时，权重、参数的梯度横为零，造成权重、参数永远不会更新，即造成神经元失效，形成了“死神经元”。</span><br></pre></td></tr></table></figure><h2 id="如何选择激活函数"><a href="#如何选择激活函数" class="headerlink" title="如何选择激活函数"></a><strong>如何选择激活函数</strong></h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.首选 ReLU，速度快，但是要注意学习速率的调整，</span><br><span class="line"></span><br><span class="line">2.如果 ReLU 效果欠佳,尝试使用 Leaky ReLU、ELU 或 Maxout 等变种。</span><br><span class="line"></span><br><span class="line">3.可以尝试使用 tanh。</span><br><span class="line"></span><br><span class="line">4.Sigmoid 和 tanh 在 RNN（LSTM、注意力机制等）结构中有所应用，作为门控或者概率值。其它情况下，减少 Sigmoid 的使用。</span><br><span class="line"></span><br><span class="line">5.在浅层神经网络中，选择使用哪种激励函数影响不大。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial Neural Networks</title>
      <link href="/AngelNI.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%AE%80%E5%8D%95%E6%8E%A8%E5%AF%BC/"/>
      <url>/AngelNI.github.io/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%AE%80%E5%8D%95%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<p>   现在终于理解我们高中数学老师说的话了，计算不行，说明数学不行，数学不行能力不行，数学好才是真正的好！！！哈哈哈。</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/08/28/mHgbdS.png" alt></p><p>　这是典型的三层神经网络的基本构成，Layer L1是输入层，Layer L2是隐含层，Layer L3是隐含层，我们现在手里有一堆数据{x1,x2,x3,…,xn},输出也是一堆数据{y1,y2,y3,…,yn},现在要他们在隐含层做某种变换，让你把数据灌进去后得到你期望的输出。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHgXGj.png" alt></p><p>　　在这里，通过对上图简单的案例进行数学推导,激活函数默认为sigmoid函数（注：神经网络的基础知识可以参考Poll的笔记：<a href="http://www.cnblogs.com/maybe2030/p/5597716.html" target="_blank" rel="noopener">[Mechine Learning &amp; Algorithm] 神经网络基础</a>）</p><p><img src="https://s2.ax1x.com/2019/08/28/mHgjRs.png" alt></p><h1 id="一、前向传播"><a href="#一、前向传播" class="headerlink" title="一、前向传播"></a>一、前向传播</h1><h2 id="1-输入层—-gt-隐含层"><a href="#1-输入层—-gt-隐含层" class="headerlink" title="1.输入层—-&gt;隐含层"></a>1.输入层—-&gt;隐含层</h2><p><strong>计算神经元的输入加权和</strong></p><p><img src="https://s2.ax1x.com/2019/08/28/mHgvzn.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRYh4.png" alt></p><p><strong>计算神经元 h1、h2 的输出</strong></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRN9J.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRU39.png" alt></p><h2 id="2-隐含层—-gt-输出层"><a href="#2-隐含层—-gt-输出层" class="headerlink" title="2.隐含层—-&gt;输出层"></a>2.隐含层—-&gt;输出层</h2><p><strong>计算输出神经元o1、o2的值</strong></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRacR.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRdj1.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRBB6.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHRsAO.png" alt></p><p>至此，前向传导传播结束。</p><h1 id="二、反向传播"><a href="#二、反向传播" class="headerlink" title="二、反向传播"></a>二、反向传播</h1><h2 id="1-计算总误差"><a href="#1-计算总误差" class="headerlink" title="1.计算总误差"></a>1.计算总误差</h2><p><img src="https://s2.ax1x.com/2019/08/28/mHRWjI.jpg" alt></p><h2 id="2-隐藏层—–-gt-输出层权值更新"><a href="#2-隐藏层—–-gt-输出层权值更新" class="headerlink" title="2.隐藏层—–&gt;输出层权值更新"></a>2.隐藏层—–&gt;输出层权值更新</h2><p><img src="https://s2.ax1x.com/2019/08/28/mHfSsI.jpg" alt></p><p>同理可求</p><p><img src="https://s2.ax1x.com/2019/08/28/mHW4z9.jpg" alt></p><p>权值跟新</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfpLt.jpg" alt></p><h2 id="3-隐藏层—-gt-输出层权值更新"><a href="#3-隐藏层—-gt-输出层权值更新" class="headerlink" title="3.隐藏层—-&gt;输出层权值更新"></a>3.隐藏层—-&gt;输出层权值更新</h2><p><img src="https://s2.ax1x.com/2019/08/28/mHfCeP.jpg" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHfMwV.jpg" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHfdw6.jpg" alt></p><p>权值跟新</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfDYD.jpg" alt></p><p>权值更新后测试数据，会发现数据误差变小许多</p><h1 id="三、栗子"><a href="#三、栗子" class="headerlink" title="三、栗子"></a>三、栗子</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-comment">#激励函数与其偏导数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh_derivative</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> - np.tanh(x) * np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic_derivative</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> logistic(x) * (<span class="hljs-number">1</span> - logistic(x) )</span><br><span class="line"><span class="hljs-comment">#神经网络模型</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, layers, activation=<span class="hljs-string">'tanh'</span>)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> activation == <span class="hljs-string">'Logistic'</span>:</span><br><span class="line">            self.activation = logistic</span><br><span class="line">            self.activation_deriv = logistic_derivative</span><br><span class="line">        <span class="hljs-keyword">elif</span> activation == <span class="hljs-string">'tanh'</span>:</span><br><span class="line">            self.activation = tanh</span><br><span class="line">            self.activation_deriv = tanh_derivative</span><br><span class="line"></span><br><span class="line">        self.weights = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(layers)<span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-comment"># [0,1) * 2 - 1 =&gt; [-1,1) =&gt; * 0.25 =&gt; [-0.25,0.25)  随机权值</span></span><br><span class="line">            self.weights.append( (<span class="hljs-number">2</span>*np.random.random((layers[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>, layers[i] + <span class="hljs-number">1</span> ))<span class="hljs-number">-1</span> ) * <span class="hljs-number">0.25</span> )</span><br><span class="line">            self.weights.append( (<span class="hljs-number">2</span>*np.random.random((layers[i] + <span class="hljs-number">1</span>, layers[i+<span class="hljs-number">1</span>] ))<span class="hljs-number">-1</span> ) * <span class="hljs-number">0.25</span> )</span><br><span class="line">        <span class="hljs-comment"># for i in range(0, len(layers)-1):</span></span><br><span class="line">        <span class="hljs-comment">#     m = layers[i]  # 第i层节点数</span></span><br><span class="line">        <span class="hljs-comment">#     n = layers[i+1]  # 第i+1层节点数</span></span><br><span class="line">        <span class="hljs-comment">#     wm = m + 1</span></span><br><span class="line">        <span class="hljs-comment">#     wn = n + 1</span></span><br><span class="line">        <span class="hljs-comment">#     if i == len(layers)-2:</span></span><br><span class="line">        <span class="hljs-comment">#         wn = n</span></span><br><span class="line">        <span class="hljs-comment">#     weight = np.random.random((wm, wn)) * 2 - 1</span></span><br><span class="line">        <span class="hljs-comment">#     self.weights.append(0.25 * weight)</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#类比梯度下降</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(self, X, y, learning_rate=<span class="hljs-number">0.2</span>, epochs = <span class="hljs-number">10000</span>)</span>:</span></span><br><span class="line">        X = np.atleast_2d(X)</span><br><span class="line">        <span class="hljs-comment"># temp = np.ones([X.shape[0], X.shape[1]+1])</span></span><br><span class="line">        <span class="hljs-comment"># temp[:,0:-1] = X</span></span><br><span class="line">        <span class="hljs-comment"># X = temp</span></span><br><span class="line">        X = np.column_stack((X, np.ones(len(X))))</span><br><span class="line">        y = np.array(y)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(epochs):</span><br><span class="line">            i = np.random.randint(X.shape[<span class="hljs-number">0</span>])</span><br><span class="line">            a = [X[i]]</span><br><span class="line">            <span class="hljs-comment"># 正向计算</span></span><br><span class="line">            <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> range(len(self.weights)):</span><br><span class="line">                a.append(self.activation( np.dot(a[l], self.weights[l])) )</span><br><span class="line">            <span class="hljs-comment"># 反向传播</span></span><br><span class="line">            error = y[i] - a[<span class="hljs-number">-1</span>]</span><br><span class="line">            deltas = [error * self.activation_deriv(a[<span class="hljs-number">-1</span>])]</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># starting backprobagation</span></span><br><span class="line">            layerNum = len(a) - <span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(layerNum, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>): <span class="hljs-comment"># 倒数第二层开始</span></span><br><span class="line">                deltas.append(deltas[<span class="hljs-number">-1</span>].dot(self.weights[j].T) * self.activation_deriv(a[j]))</span><br><span class="line">                <span class="hljs-comment"># deltas.append(deltas[-(layerNum+1-j)].dot(self.weights[j].T) * self.activation_deriv(a[j]))</span></span><br><span class="line">            deltas.reverse()</span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(self.weights)):</span><br><span class="line">                layer = np.atleast_2d(a[i])</span><br><span class="line">                delta = np.atleast_2d(deltas[i])</span><br><span class="line">                self.weights[i] += learning_rate * layer.T.dot(delta)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        x = np.array(x)</span><br><span class="line">        temp = np.ones(x.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)</span><br><span class="line">        temp[<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>] = x</span><br><span class="line">        a = temp</span><br><span class="line">        <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(self.weights)):</span><br><span class="line">            a = self.activation(np.dot(a, self.weights[l]))</span><br><span class="line">        <span class="hljs-keyword">return</span> a</span><br><span class="line">nn = NeuralNetwork([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], <span class="hljs-string">'tanh'</span>)</span><br><span class="line">x = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]])</span><br><span class="line">y = np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])</span><br><span class="line">nn.fit(x, y)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]:</span><br><span class="line">    <span class="hljs-keyword">print</span> (i, nn.predict(i))</span><br></pre></td></tr></table></figure><p>这是我的运行结果</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfrfe.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordCloud——A Beautiful Cloud of Words</title>
      <link href="/AngelNI.github.io/WordCloud%E2%80%94%E2%80%94%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%AF%8D%E4%BA%91%E5%9B%BE/"/>
      <url>/AngelNI.github.io/WordCloud%E2%80%94%E2%80%94%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%AF%8D%E4%BA%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>I  miss  you。</p><a id="more"></a><h1 id="词云图-Word-nephogram"><a href="#词云图-Word-nephogram" class="headerlink" title="词云图 Word nephogram"></a>词云图 Word nephogram</h1><p>Wordcloud 是Python第三方库中用于制作简单分词云图的第三方库，可以根据自己喜欢的颜色，喜欢的形状制作出美丽的词云图。</p><p>所谓的词云图，也叫文字云，是对文本中出现频率较高的“关键词”予以视觉化的展现，词云图过滤掉大量的低频低质的文本信息，使得浏览者只要一眼扫过文本就可领略文本的主旨。可以在每次的报告中迅速的找到核心词汇，掌握接下来发展的目的，方向。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="快速生成词云图"><a href="#快速生成词云图" class="headerlink" title="快速生成词云图"></a>快速生成词云图</h2><p>建立一个file.txt的文本文件，把你要统计的文章保存的这个文件中，运行如下的代码就可以看到词云图啦</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path</span><br><span class="line"><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Read the whole text.</span></span><br><span class="line">text = open(<span class="hljs-string">'file.txt'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Generate a word cloud image</span></span><br><span class="line">wordcloud = WordCloud().generate(text)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Display the generated image:</span></span><br><span class="line"><span class="hljs-comment"># the matplotlib way:</span></span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="hljs-string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="hljs-string">"off"</span>)</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://s2.ax1x.com/2019/08/28/mHsdXT.png" alt></p><h2 id="自定义形状"><a href="#自定义形状" class="headerlink" title="自定义形状"></a>自定义形状</h2><p>上面的词云图又丑有难看对不对，不要着急，这里可以自定义词云图的形状，自定义颜色。</p><p>在这里我的图片是一张心形</p><p><img src="https://s2.ax1x.com/2019/08/28/mHsBBF.jpg" alt></p><figure class="highlight py hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path</span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> wordcloud <span class="hljs-keyword">import</span> WordCloud</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">d=path.dirname(<span class="hljs-string">'E:\\study\\jupyter notebook'</span>)</span><br><span class="line">text=open(path.join(d,<span class="hljs-string">"constitution.txt"</span>)).read()</span><br><span class="line">alice_mask = np.array(Image.open(path.join(d, <span class="hljs-string">"2.jpg"</span>)))</span><br><span class="line"></span><br><span class="line">wordcloud=WordCloud(background_color=<span class="hljs-string">"white"</span>,max_words=<span class="hljs-number">2000</span>,mask=alice_mask)</span><br><span class="line">wordcloud.generate(text)</span><br><span class="line"></span><br><span class="line">wordcloud.to_file(path.join(d,<span class="hljs-string">"3.jpg"</span>))</span><br><span class="line"><span class="hljs-comment"># 步骤4-1：创建一个图表画布</span></span><br><span class="line">plt.figure(<span class="hljs-number">10</span>)</span><br><span class="line"><span class="hljs-comment"># 步骤4-2：设置图片</span></span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="hljs-string">"bilinear"</span>)</span><br><span class="line"><span class="hljs-comment"># 步骤4-3：取消图表x、y轴</span></span><br><span class="line">plt.axis(<span class="hljs-string">"off"</span>)</span><br><span class="line"><span class="hljs-comment"># 显示图片</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/28/mHssAJ.jpg" alt></p><p>是不是很有趣呀！</p><p>还有很多有趣的东西等你发现呢</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Just do it!</title>
      <link href="/AngelNI.github.io/Just-do-it/"/>
      <url>/AngelNI.github.io/Just-do-it/</url>
      
        <content type="html"><![CDATA[<p>放假了哈，啊哈哈哈啊哈哈~🤣🤣</p><a id="more"></a><p>今天，7月11日，考完了最后一科大学物理，结束了大一一年的学习生活，话说匆匆，也来不及挥手。</p><p>大一这一年，自我感觉收获还是蛮多的，参加过青年志愿者志愿活动❤️，去支过教❤️，参加过社团学习，学过硬件的一些东西，在宿舍焊过电路板😱，做过变压器（这个是基础，没啥高大上的），只是，后来没坚持下来，自我解释到毕竟不是学电气专业的😑😑。作为一个计算机专业的，学好编程才对嘛，现在简单的掌握了C语言和Python，入门级别，还有许多要深入。其实，在这个学期，一直想进算法协会ACM，第一次选拔也没如愿，还好在第二次选拔靠运气进了。兴致冲冲的准备好好学习算法，好好打比赛，拿个奖还能炫耀一下（白日做梦中ing🙃🙃），临期末的突转，跑去学AI😵，还好有数据挖掘的基础，入门的机器学习的算法还是能理解，能简单用Python实现 （学习笔记在GitHub我的仓库中有😎）。希望在这个暑期培训中，能有收获🙏🙏，之后的一年中好好学习AI，希望能有个比较好的成果。当然，算法也要学的，AI的老师也是我们下学期的数据结构的老师😮😮，算法，灵魂啊，除了书本知识，会实际实践才是最重要的。大学，自我学习才是最重要的。比如博客我真是一点不懂，只是按照百度上的教程，查找教程，向同学问，开始搭建，一开始，折腾了三四天，才看起来比较像样。还是比较有感触的，从没有到有，今天，我才能在这里 b b😂😂。</p><p>大一的一年至此结束了，还有两个月就大二了，好慌好慌真的好慌。</p><p>没有暑假，有了第一次，还差第二次吗？</p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/just.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning makes me happy</title>
      <link href="/AngelNI.github.io/Learning-makes-me-happy/"/>
      <url>/AngelNI.github.io/Learning-makes-me-happy/</url>
      
        <content type="html"><![CDATA[<h2 id="Sharing"><a href="#Sharing" class="headerlink" title="Sharing"></a>Sharing</h2><p>There are many interesting things waiting to be discovered by us . It’s never too late to learn.</p><p>Don’t indulge yourself , don’t let yourself regret .</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/08/28/mHr4Fs.jpg" alt></p><h2 id="图灵机器人在线聊天"><a href="#图灵机器人在线聊天" class="headerlink" title="图灵机器人在线聊天"></a>图灵机器人在线聊天</h2><p>这是一个基于图灵机器人和微信公众号相结合推出的微信在线聊天系统。</p><p>如果你对这个感兴趣这里有实现的操作 –&gt;&gt; <a href="https://github.com/AngelNI/weChatRobot" target="_blank" rel="noopener">It’s me</a></p><p>百度云下载 <a href="https://pan.baidu.com/s/18w0yZiVdw1Comqx3pwt4yg" target="_blank" rel="noopener">It’s me</a></p><p>提取码: ejuh</p><p><img src="https://s2.ax1x.com/2019/08/28/mHrIWq.png" alt></p><h2 id="程序员的暖心话-to-who"><a href="#程序员的暖心话-to-who" class="headerlink" title="程序员的暖心话 to who?"></a>程序员的暖心话 to who?</h2><p>我们虽然不是浪漫的产生者，但我们可以做浪漫的搬运工。</p><p>项目：everywechat</p><p>功能：定时给朋友发送天气，提醒，每日一句，也可以智能自动回复好友，基于图灵机器人</p><p>项目地址：<a href="https://github.com/AngelNI/EverydayWechat" target="_blank" rel="noopener">who is me</a></p><p><img src="https://s2.ax1x.com/2019/08/28/mHrHyT.jpg" alt></p><h2 id="QQ木马的简单实现，核心编程"><a href="#QQ木马的简单实现，核心编程" class="headerlink" title="QQ木马的简单实现，核心编程"></a>QQ木马的简单实现，核心编程</h2><p>Finding from <a href="https://88250.b3log.org/articles/2006/12/02/1165071600000.html" target="_blank" rel="noopener">D的个人博客</a></p><p>QQ总是被盗怎么办？ 作为一个程序猿，对底层的代码还是了解一下子。只供参考，技术交流，后果自负。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHrbOU.png" alt></p><h2 id="百度云不限速下载器"><a href="#百度云不限速下载器" class="headerlink" title="百度云不限速下载器"></a>百度云不限速下载器</h2><p>Baidu Netdisk Downloader是一款图形界面的百度网盘不限速下载器，支持 Windows、Linux、Mac。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHs9l6.jpg" alt></p><h2 id="在线工具，程序员的工具箱"><a href="#在线工具，程序员的工具箱" class="headerlink" title="在线工具，程序员的工具箱"></a>在线工具，程序员的工具箱</h2><p>光说不能表达，附图一张</p><p><a href="https://tool.lu/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">我在这呢！</a></p><p><img src="https://s2.ax1x.com/2019/08/28/mHsPOO.png" alt></p><h2 id="python3-教程"><a href="#python3-教程" class="headerlink" title="python3 教程"></a>python3 教程</h2><p>这个是最近发现的，里面有很多有关python的教程，还有一些实战项目。</p><p><a href="https://www.w3cschool.cn/python3/?" target="_blank" rel="noopener">没错又是我</a></p><p><img src="https://s2.ax1x.com/2019/08/28/mHsATH.png" alt></p><h2 id="经典技术书籍分享"><a href="#经典技术书籍分享" class="headerlink" title="经典技术书籍分享"></a>经典技术书籍分享</h2><p><a href="https://github.com/AngelNI/awesome-programming-books" target="_blank" rel="noopener">我又来喽</a></p><p><img src="https://s2.ax1x.com/2019/08/28/mHsefI.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CET4</title>
      <link href="/AngelNI.github.io/CET4/"/>
      <url>/AngelNI.github.io/CET4/</url>
      
        <content type="html"><![CDATA[<p>COME ON !!!</p><a id="more"></a><p>很高兴有这次机会提前考四级，希望要过呀，好好学英语，下学期六级要过啊。</p><p>在这里简单介绍一下四级。</p><h2 id="一-、四级题型"><a href="#一-、四级题型" class="headerlink" title="一 、四级题型"></a>一 、四级题型</h2><p>1.作文（15%）</p><p>2.听力（35%）</p><p>（1）听力对话（15%）</p><p>（2）听力短文（20%）</p><p>3.阅读理解（35%）</p><p>（1）词汇理解（5%）</p><p>（2）长篇阅读（10%）</p><p>（3）仔细阅读（20%）</p><p>4.汉译英（15%）</p><p>总分 ：710，及格线：425</p><h2 id="二、考前准备"><a href="#二、考前准备" class="headerlink" title="二、考前准备"></a>二、考前准备</h2><h3 id="1-词汇"><a href="#1-词汇" class="headerlink" title="1.词汇"></a>1.词汇</h3><p>英语单词是学习英语的基础，基础不牢，地动山摇，好好买一本英语四级的词汇书很重要（我买的是新东方的），要背单词哦。现在有很多背单词的APP，比如百词斩，有道词典，我认为不靠谱，看着看着，就看别的了（都懂的吧），还有个人认为纸质的书拿起来有感觉。</p><h3 id="2-听力"><a href="#2-听力" class="headerlink" title="2.听力"></a>2.听力</h3><p>最头疼的就是听力了，占了很大的分值，听力就多听吧。还有就是要知道他可能会考什么，猜。</p><h3 id="3-阅读理解"><a href="#3-阅读理解" class="headerlink" title="3.阅读理解"></a>3.阅读理解</h3><p>做阅读理解，一定要多做题，买一本近几年的四级考试卷子每周一套（整个上半年我们老师是这样要求的），找到自己的做题感觉和方法很重要。</p><h3 id="4-翻译"><a href="#4-翻译" class="headerlink" title="4.翻译"></a>4.翻译</h3><p>多背一些固定搭配，多背一些词组，还有就是单词~</p><h2 id="三、考试时间安排"><a href="#三、考试时间安排" class="headerlink" title="三、考试时间安排"></a>三、考试时间安排</h2><p><img src="http://pwxyaiwx0.bkt.clouddn.com/1.png" alt></p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/2.png" alt></p><p>注意：答题卡分为两张1和2，先写作文，听力，听力结束后开始收答题卡1。</p><p>最后要预祝考四级的小伙伴，考的全会，蒙的全对。</p><p><a href="https://imgchr.com/i/ZRBC8K" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/11/ZRBC8K.jpg" alt border="0" height="250" width="250"></a><a href="https://imgchr.com/i/ZRBivD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/11/ZRBivD.jpg" alt border="0" height="250" width="250"></a><img src="https://s2.ax1x.com/2019/07/11/ZRBPgO.jpg" alt border="0" height="250" width="250"><img src="https://s2.ax1x.com/2019/07/11/ZRBwxU.jpg" alt border="0" height="250" width="250/"></p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俄罗斯方块</title>
      <link href="/AngelNI.github.io/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
      <url>/AngelNI.github.io/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>嘿！小伙伴们，还记得俄罗斯方块吗？想必每个人都玩过这个简单刺激的小游戏吧！</p><p>在这里分享给大家一个在线的俄罗斯方块——&gt;&gt; <a href="https://chvin.github.io/react-tetris/" target="_blank" rel="noopener">大爷！来玩呦</a></p><p>github项目地址 <a href="https://github.com/AngelNI/react-tetris" target="_blank" rel="noopener">点我呦</a></p><p>百度云源代码下载 <a href="https://pan.baidu.com/s/1plTawhpPEVEIpvOvfNBS2A" target="_blank" rel="noopener">点我呦</a></p><p>提取码：wb6q</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/08/28/mHsb9I.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数取模</title>
      <link href="/AngelNI.github.io/%E5%A4%A7%E6%95%B0%E5%8F%96%E6%A8%A1/"/>
      <url>/AngelNI.github.io/%E5%A4%A7%E6%95%B0%E5%8F%96%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<p>THIS A SAD STORY…… 頑張って</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/08/28/mHsg91.png" alt></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>取模想必大家都知道，比如7%5=2，10%3=1，当然了，这还只是简单的取模，适用于不超过计算机整数范围。如果超过了该怎么办呢？</p><p>今天，这里介绍的就是大数取模。</p><h2 id="一般取模"><a href="#一般取模" class="headerlink" title="一般取模"></a>一般取模</h2><h3 id="大数储存"><a href="#大数储存" class="headerlink" title="大数储存"></a>大数储存</h3><p>对一个相当大的数，C语言里的整形是无法储存的，在这里，我们用字符串储存。</p><h3 id="取模方法"><a href="#取模方法" class="headerlink" title="取模方法"></a>取模方法</h3><p>模仿我们曾学过的竖式乘除法。</p><p>对于一个大数 A ，他从高到低的每一位乘以10再对mod取余，最后的结果就是取模的结果。</p><p>`</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 100000007</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">divmod</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *ch,<span class="hljs-keyword">int</span> a)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> s = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;ch[i]!=<span class="hljs-string">'\0'</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">s=(s*<span class="hljs-number">10</span>+ch[i]-<span class="hljs-string">'0'</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> a,b;</span><br><span class="line"><span class="hljs-keyword">char</span> num[<span class="hljs-number">100000</span>];</span><br><span class="line">gets(num);</span><br><span class="line">a = <span class="hljs-built_in">strlen</span>(num);</span><br><span class="line">b = divmod(num,a);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%ld"</span>,b);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>`</p><h2 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h2><p>对于一般的大数取模，时间复杂度太大，可能会TE了。对于指数型的大数取模问题，，快速幂取模就简单方便多了，在空间和时间上相对于一般取模都做了优化。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>快速幂取模的方法基于离散数学或数论的一条公式推导引理。</p><p><strong>积的取余等于取余的积的取余</strong></p><p>在这个定义的基础上对指数型数据进行拆分以及合并，从而实现快速幂取模。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>求（3^40）mod 6。</p><p>(3^40)–&gt;(9^20)–&gt;(18^10) ……这样依次类推</p><p>这里指数幂是偶数，如果是奇数先乘在重复上述工作。</p><p>再这里有一个简单判断奇偶数的方法。附上代码</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"奇数"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"偶数"</span>);&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单的运用了位运算。这比一般奇偶的判断高大上多了。活到老学到老。。。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">powermode</span><span class="hljs-params">(<span class="hljs-keyword">long</span> a, <span class="hljs-keyword">long</span> b, <span class="hljs-keyword">long</span> mod)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">long</span> ans = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;</span><br><span class="line">            ans = (ans * a) % mod;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        b /= <span class="hljs-number">2</span>;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>对于大数取模还有欧拉函数（费马小定理），技巧去摸，这里不多介绍，后续会补上</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约数个数定理</title>
      <link href="/AngelNI.github.io/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86/"/>
      <url>/AngelNI.github.io/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>自从那时起，它就有了特别的含义，既是与她的一种约定，也是自己出海航行的方向。one piece 是我的，我可是要成为海贼王的男人哈哈哈。</p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>今天遇到了一个有意思的题，让你求一个范围内的约数的个数的最大值，求约数个，哈哈，这真是简单，1,2,3,4从头数不就行了吗，你看我说的对不对哈哈。</p><p>还有一种办法是通过约数个数定理，好，废话说得不少，那就进入正题~</p><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p><a href="https://baike.baidu.com/item/约数个数定理" target="_blank" rel="noopener">百度百科</a></p><p>对于一个大于1正整数n可以分解质因数</p><p>：</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D231/sign=e19b382db04543a9f11bfdcf2f168a7b/a8ec8a13632762d0a5814266a7ec08fa503dc6a8.jpg" alt="img"></p><p><a href="https://baike.baidu.com/item/约数个数定理" target="_blank" rel="noopener">约数个数定理</a>——来自百度百科</p><h6 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h6><p>对于一个大于1正整数n可以分解质因数：</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D231/sign=e19b382db04543a9f11bfdcf2f168a7b/a8ec8a13632762d0a5814266a7ec08fa503dc6a8.jpg" alt="img"></p><p>则n的正约数的个数就是</p><p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D316/sign=ca4b36d4d243ad4ba22e40c1b4035a89/8ad4b31c8701a18b94aed93e9d2f07082838fe7e.jpg" alt="img">。</p><p>其中a1、a2、a3…ak是p1、p2、p3，…pk的指数。</p><h6 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h6><p>首先同上，n可以<a href="https://baike.baidu.com/item/分解质因数/2253749" target="_blank" rel="noopener">分解质因数</a>：n=p1^a1×p2^a2×p3^a3<em>…</em>pk^ak,</p><p>由约数定义可知p1^a1的约数有:p1^0, p1^1, p1^2……p1^a1 ，共（a1+1）个;同理p2^a2的<a href="https://baike.baidu.com/item/约数/8417882" target="_blank" rel="noopener">约数</a>有（a2+1）个……pk^ak的约数有（ak+1）个。</p><p>故根据<a href="https://baike.baidu.com/item/乘法原理/7538447" target="_blank" rel="noopener">乘法原理</a>：n的约数的个数就是(a1+1)(a2+1)(a3+1)…(ak+1)。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS_Practice</title>
      <link href="/AngelNI.github.io/DFS-%E8%87%AA%E6%88%91%E7%BB%83%E4%B9%A0/"/>
      <url>/AngelNI.github.io/DFS-%E8%87%AA%E6%88%91%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="DFS——exercise"><a href="#DFS——exercise" class="headerlink" title="DFS——exercise."></a>DFS——exercise.</h1><p>I learned DFS last month,I almost forgot how to use it,so that I can’t solve a problem in a practice competition. So I require to review it,and review carefully!</p><a id="more"></a><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>在这里你有一个 6*3 的一个数组，每行有1 ， 2 ， 3 三个数，并且每行按照六种顺序分别排列。当每一行都取一个数时，求出6个数之和最大的值。</p><p>这里有一个非常笨的方法，就是用六重For循环，是不是很惊讶。没错，当我的小伙伴告诉我时,我的内心是WTF的。</p><p>这不是重点，重点是想通过这个简单的题练习一下DFS的思想。</p><p>这仅仅是个简单的开始，</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>][<span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> res;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//printf("%d",res);</span></span><br><span class="line">        res = max(res,sum);</span><br><span class="line">        <span class="hljs-keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    dfs(x+<span class="hljs-number">1</span>,sum+a[x][<span class="hljs-number">0</span>]);</span><br><span class="line">    <span class="hljs-comment">//dfs(x+1,sum+a[x][1]);</span></span><br><span class="line">    <span class="hljs-comment">//dfs(x+1,sum+a[x][2]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> main（）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)</span><br><span class="line">            <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">    dfs(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h6><p>第一次我控制只输入第一列，输出结果为六。</p><p>仔细想想，这个跟递归求n的阶乘有异曲同工之妙，不断的调用自己递归，直到满足条件回归。</p><h6 id="SECOND"><a href="#SECOND" class="headerlink" title="SECOND"></a>SECOND</h6><p>这次我输入了6*2的数据，并将每次的相加求和的结果打印出来，算了算一共64种，也就是说一共有64种组合方法。</p><h6 id="THIRD"><a href="#THIRD" class="headerlink" title="THIRD"></a>THIRD</h6><p>最后我将所有的数据输入得到了正确的结果18。</p><h6 id="LAST"><a href="#LAST" class="headerlink" title="LAST"></a>LAST</h6><p>仔细想想还是挺有趣的，想想那个yong FOR循环写的，一共729种可能，想想就可怕. TE,TE,TE,TE…….</p><h2 id="DFS模板介绍"><a href="#DFS模板介绍" class="headerlink" title="DFS模板介绍"></a>DFS模板介绍</h2><p>DFS问题的解决有一个dfs的套用模板，自我感觉挺有用的，如果你有更好的办法，留评论呦！！！</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void dfs(step)`</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num==end)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="hljs-comment">/*do something*/</span></span><br><span class="line">        <span class="hljs-keyword">return</span> ;&#125;</span><br><span class="line">      <span class="hljs-comment">/*尝试每一种可能，和遍历数组差不多*/</span></span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;end;i++)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="hljs-keyword">do</span> something;</span><br><span class="line">dfs(step+<span class="hljs-number">1</span>);</span><br><span class="line">undo something;</span><br><span class="line">&#125;</span><br><span class="line">rerun <span class="hljs-number">0</span>;</span><br><span class="line">`&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯问题"><a href="#回溯问题" class="headerlink" title="回溯问题"></a>回溯问题</h2><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p>这里拿棋盘问题举个栗子。</p><p>POJ1321 <a href="http://poj.org/problem?id=1321" target="_blank" rel="noopener">请点击这里</a></p><p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。</p><p><strong>INPUT</strong></p><p>输入含有多组测试数据。<br>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n<br>当为-1 -1时表示输入结束。<br>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。</p><p><strong>OUTPUT</strong></p><p>对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。</p><h4 id="SOLVE"><a href="#SOLVE" class="headerlink" title="SOLVE"></a>SOLVE</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(y&gt;=k）</span><br><span class="line">    &#123;</span><br><span class="line">         ans++;</span><br><span class="line">       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=x;i&lt;n;i++)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(!visit[j]&amp;&amp;mp[i][j]==<span class="hljs-string">'#'</span>)<span class="hljs-comment">//回溯</span></span><br><span class="line">             &#123;</span><br><span class="line">                 visit[j]=<span class="hljs-number">1</span>;</span><br><span class="line">                 DFS(i+<span class="hljs-number">1</span>,y+<span class="hljs-number">1</span>);</span><br><span class="line">                visit[j]=<span class="hljs-number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">在这里menset（visit，<span class="hljs-number">0</span>，<span class="hljs-keyword">sizeof</span>（visit））；</span><br></pre></td></tr></table></figure><p>DFS过程中，你要退一步，就必然需要保存你走过每个点的所有信息，而在退一步的过程中，你需要从当前状态回到之前的状态，那么这步操作就是回溯，回溯是递归的时候一定会产生的很自然的操作，只不过大部分情况下不需要回溯。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fleury 算法</title>
      <link href="/AngelNI.github.io/Fleury-%E7%AE%97%E6%B3%95/"/>
      <url>/AngelNI.github.io/Fleury-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Fleury-算法"><a href="#Fleury-算法" class="headerlink" title="Fleury 算法"></a>Fleury 算法</h1><p>Fleury算法是从离散书上看到的，书上详细的写了算法的操作。在这里用主要用C语言实现。在这里隆重感谢曹老板的鼎力支持。膜拜~</p><p><img src="/AngelNI.github.io/Fleury-算法/1.jpg" alt></p><a id="more"></a><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>输入 ：欧拉图</p><ol><li><code>任取 v0∈V(G),令P0 = v0 ，i = 0.</code></li><li><code>设 Pi = v0e0v1e1……eivi,</code></li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果E（G） - &#123;e1,e2……ei&#125;中没有与vi关联的边则计算停止；否则按下述条件从E（G） -&#123;e1，e2，……ei&#125;中任取一条边ei+1：</span><br></pre></td></tr></table></figure><p> <code>（a） ei+1与vi相关联；</code></p><p> <code>（b） 除非无别的边可提供，否则ei+1不应该为Gi = G-{e1，e2，……ei}中的桥。</code></p><p> <code>设ei+1=（vi,vi+1）,把ei+1,vi+1加入pi得到pi+1.</code></p><ol><li><code>令i=i+1，返回2.</code></li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fleury</span> <span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Bridge</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="hljs-keyword">int</span> eulertu[<span class="hljs-number">10000</span>][<span class="hljs-number">10000</span>] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> V,E;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“顶点数：”);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(“%d”,&amp;V);</span><br><span class="line"><span class="hljs-built_in">printf</span>(“边数：”);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(“%d”,&amp;E); <span class="hljs-comment">//输入几个点，几条边</span></span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">int</span> m,n;</span><br><span class="line"><span class="hljs-keyword">int</span> count;</span><br><span class="line"><span class="hljs-keyword">int</span> o=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“输入有边的俩个点:\n”);</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; E; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;m,&amp;n);       <span class="hljs-comment">//输入有边的俩个点 </span></span><br><span class="line">    eulertu[m][n] = eulertu[n][m] = <span class="hljs-number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; V; i++)         <span class="hljs-comment">//判断是否为欧拉图 </span></span><br><span class="line">&#123;</span><br><span class="line">    count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; V; j++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (eulertu[i][j]==<span class="hljs-number">1</span>) </span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (count%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"不是欧拉图"</span>);</span><br><span class="line">        o=<span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(o==<span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">break</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(o==<span class="hljs-number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line">    fleury();</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"end"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fleury</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>] =&#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> bridge = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“%d—&gt;”,a[<span class="hljs-number">0</span>]);</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; E; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; V; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(eulertu[a[k]][j]==<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">eulertu[a[k]][j] = eulertu[j][a[k]] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(Bridge(a[k],j))</span><br><span class="line">&#123;</span><br><span class="line">t = j;</span><br><span class="line">eulertu[a[k]][j] = eulertu[j][a[k]] = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">a[k] = j;</span><br><span class="line"><span class="hljs-built_in">printf</span>(“%d—&gt;”,j);</span><br><span class="line">bridge = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (bridge) </span><br><span class="line">    &#123;</span><br><span class="line">        eulertu[a[k]][t] = eulertu[t][a[k]] = <span class="hljs-number">0</span>;</span><br><span class="line">        k++;</span><br><span class="line">        a[k] = t;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d---&gt;"</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    bridge = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Bridge</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> k)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">10000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)</span><br><span class="line">a[i]=<span class="hljs-number">-1</span>;</span><br><span class="line">a[t] = m;</span><br><span class="line"><span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; a[t] != <span class="hljs-number">-1</span>; t++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; V; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (eulertu[a[t]][i] == <span class="hljs-number">1</span> &amp;&amp; i == k)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (eulertu[a[t]][i] == <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">            p=<span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span>(a[p]==<span class="hljs-number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p++;</span><br><span class="line">                n++;</span><br><span class="line">                a[n] = i;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fermat&#39;s Last Theorem</title>
      <link href="/AngelNI.github.io/Fermat-s-Last-Theorem/"/>
      <url>/AngelNI.github.io/Fermat-s-Last-Theorem/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Description</p><p>对于输入的<em>n</em>,判断这个一个三元方程xn+yn=znx^n+y^n=z^n<em>x**n</em>+<em>y**n</em>=<em>z*</em>n*是否有整数解</p><p>Input</p><p>单组输入</p><p>第一行一个整数TT<em>T</em>,代表输入的数据个数</p><p>接下来<em>T</em>行，每行一个正整数<em>n</em>。</p><p>1≤T≤100</p><p>1≤n≤100000</p><p>Output</p><p>输出<em>T</em>行，对于每个输入的<em>n</em>,如果有整数解输出”YES”,否则输出”NO”.</p><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>费马大定理，又被称为“费马最后的定理”，由17世纪法国数学家<a href="https://baike.baidu.com/item/皮耶·德·费玛/1444615" target="_blank" rel="noopener">皮耶·德·费玛</a>提出。</p><p>他断言当整数n &gt;2时，关于x, y, z的方程 x^n + y^n = z^n 没有正整数解。</p><p>费马达定理的证明有一个非常巧妙的方法证明，自己去领悟精髓吧。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">100</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,t;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Operation on Excel</title>
      <link href="/AngelNI.github.io/Python-Operation-on-Excel/"/>
      <url>/AngelNI.github.io/Python-Operation-on-Excel/</url>
      
        <content type="html"><![CDATA[<p>====This my mood now====</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/08/28/mHs10g.jpg" alt></p><p>I recently solve the problem of Excel ‘ data , it is hard to process Excel data because of huge amount of it.However, there is a better tool to process–Python.I simply write 34 lines to operation on Excel’s data to count th number of the key word.</p><p>Just for recording.</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> xlrd</span><br><span class="line"><span class="hljs-keyword">import</span> xlwt</span><br><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#import openpyxl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = xlrd.open_workbook(<span class="hljs-string">'C:\\Users\\hp\\Desktop\\数据信息3.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">table = data.sheets()[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line">ncols = table.col_values(<span class="hljs-number">12</span>)</span><br><span class="line">a = len(ncols)</span><br><span class="line">pattern = re.compile(<span class="hljs-string">r'\d+'</span>)</span><br><span class="line">d=[]</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,a):</span><br><span class="line">    <span class="hljs-comment">#print(pattern.findall(ncols[i]))</span></span><br><span class="line">   <span class="hljs-comment"># print("\n")</span></span><br><span class="line">    b = len(pattern.findall(ncols[i]))</span><br><span class="line">    c=[]</span><br><span class="line">    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,b):</span><br><span class="line">        <span class="hljs-keyword">if</span> eval(pattern.findall(ncols[i])[j] )&lt; <span class="hljs-number">10</span> :</span><br><span class="line">            c.append(pattern.findall(ncols[i])[j])</span><br><span class="line">    <span class="hljs-comment">#print(c)</span></span><br><span class="line">    d.append(len(c))</span><br><span class="line">    <span class="hljs-comment">#print(d)</span></span><br><span class="line">    f = xlwt.Workbook()               <span class="hljs-comment">#创建工作簿</span></span><br><span class="line">sheet1 = f.add_sheet(<span class="hljs-string">u'sheet1'</span>,cell_overwrite_ok=<span class="hljs-literal">True</span>) <span class="hljs-comment">#创建sheet</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(d)):</span><br><span class="line">    sheet1.write(i+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,d[i])</span><br><span class="line">f.save(<span class="hljs-string">"C:\\Users\\hp\\Desktop\\2.xls"</span>)</span><br><span class="line">print(<span class="hljs-string">"结束"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A New Start</title>
      <link href="/AngelNI.github.io/A-New-Start/"/>
      <url>/AngelNI.github.io/A-New-Start/</url>
      
        <content type="html"><![CDATA[<p>This is a nice day!!!</p><a id="more"></a><p><img src="http://pwxyaiwx0.bkt.clouddn.com/1.jpg" alt></p><p>After half a day’s hard work, my blog is successfully included by baidu and google,and I add some new features to my blog for attracting more people to visit.</p><p>As we all know,photo is a good way to look back our experience,so I specially add Photo to my blog.I change the background of my blog,making it not monotonous.The big change is that my blog language is changed to Engelish and I begin to write blog in English ,thanks to my classmate Uncle_drew’s idea,and thanks for his blog ,I learn a lot from it. Thank you @ <a href="https://cndrew.cn/" target="_blank" rel="noopener">https://cndrew.cn/</a></p><p>Lastly,I sincerely hope that I can insist writing blog .</p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Poetry Appreciation</title>
      <link href="/AngelNI.github.io/Poetry-Appreciation/"/>
      <url>/AngelNI.github.io/Poetry-Appreciation/</url>
      
        <content type="html"><![CDATA[<p>I think poetry is a kind of life experience,a kind of inner sublimation.Cultivate sentiment and enrich oneself.</p><p><img src="https://s2.ax1x.com/2019/08/28/mHsu1P.png" alt></p><a id="more"></a><h3 id="木兰花令"><a href="#木兰花令" class="headerlink" title="木兰花令"></a>木兰花令</h3><p>——纳兰性德</p><p>人生若只如初见，何事秋风悲画扇?等闲变却故人心，却道故人心易变。</p><p>骊山语罢清宵半，泪雨零铃终不怨。何如薄幸锦衣郎，比翼连枝当日愿。</p><h3 id="仓央嘉措《四》"><a href="#仓央嘉措《四》" class="headerlink" title="仓央嘉措《四》"></a>仓央嘉措《四》</h3><p>好多年了</p><p>你一直在我的伤口中幽居</p><p>我放下过天地</p><p>却从未放下过你</p><p>我生命中的千山万水</p><p>任你一一告别</p><p>世间事</p><p>除了生死</p><p>哪一件不是闲事</p><p>谁的隐私不被回光返照</p><p>殉葬的花朵开合有度</p><p>菩提的果实奏响了空山</p><p>告诉我</p><p>你藏在落叶下的那些脚印</p><p>暗示着多少祭日</p><p>专供我在法外逍遥</p><h3 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h3><p>——舒婷</p><p>我如果爱你——绝不像攀援的凌霄花，借你的高枝炫耀自己；</p><p>我如果爱你——绝不学痴情的鸟儿，为绿荫重复单调的歌曲；</p><p>也不止像泉源，常年送来清凉的慰藉；</p><p>也不止像险峰，增加你的高度，衬托你的威仪。甚至日光，甚至春雨。</p><p>不，这些都还不够！</p><p>我必须是你近旁的一株木棉，作为树的形象和你站在一起。</p><p>根，紧握在地下；叶，相触在云里。</p><p>每一阵风过，我们都互相致意，但没有人，听懂我们的言语。</p><p>你有你的铜枝铁干，像刀，像剑，也像戟；我有我红硕的花朵，像沉重的叹息，又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳；我们共享雾霭、流岚、虹霓。</p><p>仿佛永远分离，却又终身相依。</p><p>这才是伟大的爱情，坚贞就在这里：</p><p>爱——不仅爱你伟岸的身躯，也爱你坚持的位置，足下的土地。</p><h3 id="一棵开花的树"><a href="#一棵开花的树" class="headerlink" title="一棵开花的树"></a>一棵开花的树</h3><p>——席慕蓉</p><p>如何让你遇见我</p><p>在我最美丽的时刻</p><p>为这</p><p>我已在佛前求了五百年</p><p>求佛让我们结一段尘缘</p><p>佛於是把我化做一棵树</p><p>长在你必经的路旁</p><p>阳光下</p><p>慎重地开满了花</p><p>朵朵都是我前世的盼望</p><p>当你走近</p><p>请你细听</p><p>那颤抖的叶</p><p>是我等待的热情</p><p>而当你终於无视地走过</p><p>在你身後落了一地的</p><p>朋友啊</p><p>那不是花瓣</p><p>那是我凋零的心</p><h3 id="热爱生命"><a href="#热爱生命" class="headerlink" title="热爱生命"></a>热爱生命</h3><p>——汪国真</p><p>我不去想是否能够成功</p><p>既然选择了远方</p><p>便只顾风雨兼程</p><p>我不去想能否赢得爱情</p><p>既然钟情于玫瑰</p><p>就勇敢地吐露真诚</p><p>我不去想身后会不会袭来寒风冷雨</p><p>既然目标是地平线</p><p>留给世界的只能是背影</p><p>我不去想未来是平坦还是泥泞</p><p>只要热爱生命</p><p>一切，都在意料之中</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/AngelNI.github.io/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/AngelNI.github.io/HTML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="HTNL——Begin"><a href="#HTNL——Begin" class="headerlink" title="HTNL——Begin"></a>HTNL——Begin</h4><p>Hyper Text Markup Language ，short for HTML ,is a standard markup language for creating web pages.The web pages which we usually scan are written by it.I want to learn a fewer about it because of writing blog and modifying my blog’s framework.</p><p>I need it.</p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/html.jpg" alt></p><a id="more"></a><h3 id="The-simply-example"><a href="#The-simply-example" class="headerlink" title="The simply example"></a>The simply example</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this is a title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>First level title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>explanation</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>  声明HTML5文档</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>元素是HTML页面的根元素</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>元素包含了文档的元数据</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文档的标题</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>可见的页面内容</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">"utf-8"</span>&gt;</span>声明编码utf-8</span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><h5 id="1-HTML-link"><a href="#1-HTML-link" class="headerlink" title="1.HTML link"></a>1.HTML link</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://baidu.com"</span>&gt;</span>This is baidu link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-picture"><a href="#2-picture" class="headerlink" title="2.picture"></a>2.picture</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">imag</span> <span class="hljs-attr">scr</span>=<span class="hljs-string">"(url)"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"258"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"39"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-lind-feed"><a href="#3-lind-feed" class="headerlink" title="3.lind feed"></a>3.lind feed</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-level"><a href="#4-level" class="headerlink" title="4.level"></a>4.level</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-notes"><a href="#5-notes" class="headerlink" title="5.notes"></a>5.notes</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!--notes--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-bold"><a href="#6-bold" class="headerlink" title="6.bold"></a>6.bold</h5><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span> bold <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I simply learned basics of HTML.Maybe it is very simply ,but it’s a new stduy.Come on !!!</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天生棋局(指针)</title>
      <link href="/AngelNI.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80-%E6%8C%87%E9%92%88/"/>
      <url>/AngelNI.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>上次用数组写的天生棋局题，这里补上指针版的。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHfTpQ.jpg" alt></p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：**</strong></p><p><strong>1）棋盘的大小根据用户的指令确定；</strong></p><p><strong>2）棋盘中棋子的数量也由用户设定；</strong></p><p><strong>3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="#注释"></a>#注释</h2><p>天生棋局指针类型的和上次数组类型的大体思路是一样的，在这里主要不同的，在于用calloc（）函数申请一个动态的存储空间，因为calloc（）函数成功生成动态存储空间会返回储存空间的首地址，所以在这里用指针类型的变量来实现对动态存储空间的操作。</p><p>这里主要用二维指针，二维指针储存一维指针的地址，二维指针可以看做二维数组，而二维数组可以看做由一维数组组生成，这样理解起来比较简单些</p><p>附上关键自定义生成动态存储函数</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">int</span> ** <span class="hljs-title">board</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ** p = (<span class="hljs-keyword">int</span> **)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>*), n);<span class="hljs-comment">//calloc在内存中分配n*size大小的动态存储空间，返回一个起始地址的一个指针 </span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> ** <span class="hljs-title">board</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;      <span class="hljs-comment">//申请动态存储空间 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inkey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>;<span class="hljs-comment">//用随机数下棋 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printboard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//打印棋格 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//检查好/坏棋 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">freespace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-comment">//释放动态空间 </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,con;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋盘大小:\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋子数量:\n"</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="hljs-keyword">int</span> **p=board(n);</span><br><span class="line">inkey( p ,n, m );</span><br><span class="line">printboard(p,n);</span><br><span class="line">con=check(p,n);</span><br><span class="line">freespace(p,n);</span><br><span class="line"><span class="hljs-keyword">if</span>(con)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"好棋！"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"不是好棋！"</span>); </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">int</span> ** <span class="hljs-title">board</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ** p = (<span class="hljs-keyword">int</span> **)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>*), n);<span class="hljs-comment">//calloc在内存中分配n*size大小的动态存储空间，返回一个起始地址的一个指针 </span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inkey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));  <span class="hljs-comment">//随机数种子   生成伪随机数，每次的随机数都不一样 </span></span><br><span class="line"><span class="hljs-keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a=rand()%n,b=rand()%n;</span><br><span class="line">p[a][b]=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printboard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//  生  成  棋  盘 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)        <span class="hljs-comment">//   ┏ ┓┗ ┛┠ ┷ ┨ ┯ ┼ ●</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(p[i][j]==<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"●"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)    </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┏"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┓"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┗"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┛"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┠"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┷"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┨"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┯"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┼"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-comment">//   默认不是好棋。 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">// 判断 好棋 坏棋 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (p[i][j] == <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (j&gt;<span class="hljs-number">0</span> &amp;&amp; p[i][j<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一行有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt;<span class="hljs-number">0</span> &amp;&amp; p[i<span class="hljs-number">-1</span>][j] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一列有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">freespace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **p,<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">free</span>(p[i]);<span class="hljs-comment">//释放一级指针指向的空间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//释放二级指针指向的空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sort() function</title>
      <link href="/AngelNI.github.io/sort-%E5%87%BD%E6%95%B0/"/>
      <url>/AngelNI.github.io/sort-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="C-中的sort（）函数"><a href="#C-中的sort（）函数" class="headerlink" title="C++中的sort（）函数"></a>C++中的sort（）函数</h4><p>我在之前的博客中提到，解决排序问题的一个好用的函数就是C++的sort（）函数啦。sort（）函数是C++内置的函数，只需要加入头文件，掌握正确的使用方法，你就可以在排序中驰骋疆场了（自吹自擂<del>）。好啦，下面就请主角登场吧</del></p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/08/28/mHsJts.jpg" alt></p><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>c++语言中 STL 库中的sort函数可以用来对数组进行排序。对于c++语言来说由于其自带的sort()函数更容易被编译器编译，其排序速度比基于快速排序的qsort要快上不少，且用法简单。(百度知道)</p><h4 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h4><p>sort（）函数的使用需要添加头文件</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">或者万能头文件</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h4><p><strong>sort（star,end,cmp）*</strong></p><p>sort函数有三个参数：</p><p>1.第一个是要排序的数组的起始地址</p><p>2.第二个是结束地址（最后一位的地址的下一地址）</p><p>3.第三个参数是排序的方法。sort函数默认是按从小到大排序。可以修改cmp实现从大到小排序</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort（begin，end，less&lt;data-type&gt;)——升序</span><br><span class="line"></span><br><span class="line">sort（begin，end，greater&lt;data-type&gt;)——降序</span><br></pre></td></tr></table></figure><p>以上是比较简单常用的对数组的排序方法，sort（）类函数中还有其他的排序功能。</p><h4 id="4-sort-类函数"><a href="#4-sort-类函数" class="headerlink" title="4.sort()类函数"></a>4.sort()类函数</h4><table><thead><tr><th align="center">函数名</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">sort</td><td align="center">对给定区间所有元素进行排序</td></tr><tr><td align="center">stable_sort</td><td align="center">对给定区间所有元素进行稳定排序</td></tr><tr><td align="center">partial_sort</td><td align="center">对给定区间所有元素进行稳定排序</td></tr><tr><td align="center">partial_sort</td><td align="center">对给定区间所有元素部分排序</td></tr><tr><td align="center">partial_sort_copy</td><td align="center">对给定区间复制并排序</td></tr><tr><td align="center">nth_element</td><td align="center">找出给定区间的某个位置对应的元素</td></tr><tr><td align="center">is_sorted</td><td align="center">判断一个区间是否已经排好序</td></tr><tr><td align="center">partition</td><td align="center">使得符合某个条件的元素放在前面</td></tr><tr><td align="center">stable_partition</td><td align="center">相对稳定的使得符合某个条件的元素放在前面</td></tr></tbody></table><h4 id="5-sort（）函数练习"><a href="#5-sort（）函数练习" class="headerlink" title="5.sort（）函数练习"></a>5.sort（）函数练习</h4><h6 id="1-有序序列合并"><a href="#1-有序序列合并" class="headerlink" title="1.有序序列合并"></a>1.有序序列合并</h6><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/827/J" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/827/J</a></p><p>来源：牛客网</p><p>题目描述</p><p>输入两个升序排列的序列，将两个序列合并为一个有序序列并输出。</p><p>输入描述:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入包含三行，</span><br><span class="line"></span><br><span class="line">第一行包含两个正整数n, m（1 ≤ n,m ≤ 100），用空格分隔。n表示第二行第一个升序序列中数字的个数，m表示第三行第二个升序序列中数字的个数。</span><br><span class="line"></span><br><span class="line">第二行包含n个整数（范围1~5000），用空格分隔。</span><br><span class="line"></span><br><span class="line">第三行包含m个整数（范围1~5000），用空格分隔。</span><br></pre></td></tr></table></figure><p>输出描述:</p><p>输出为一行，输出长度为n+m的升序序列，即长度为n的升序序列和长度为m的升序序列中的元素重新进行升序序列排列合并。</p><p><strong>示例1</strong></p><p>输入<br>5 6<br>1 3 7 9 22<br>2 8 10 17 33 44<br>输出<br>1 2 3 7 8 9 10 17 22 33 44</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,t;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>],b[<span class="hljs-number">100</span>],c[<span class="hljs-number">200</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    t=n;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        c[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">        c[t++]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(c,c+m+n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m+n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);</span><br><span class="line">    &#125;          </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="2-最高最低分差"><a href="#2-最高最低分差" class="headerlink" title="2.最高最低分差"></a>2.最高最低分差</h6><p>链接：</p><p><a href="https://ac.nowcoder.com/acm/contest/827/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/827/E</a></p><p>来源：牛客网</p><p>题目描述</p><p>输入n个成绩，换行输出n个成绩中最高分数和最低分数的差。</p><p>输入描述:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两行，第一行为n，表示n个成绩，不会大于10000。</span><br><span class="line"></span><br><span class="line">第二行为n个成绩（整数表示，范围0~100），以空格隔开。</span><br></pre></td></tr></table></figure><p>输出描述:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一行，输出n个成绩中最高分数和最低分数的差。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">98 100 99 97 95 99 98 97 96 100</span><br></pre></td></tr></table></figure><p>输出</p><p>5</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n,a[<span class="hljs-number">10000</span>],sum=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    sum=a[n<span class="hljs-number">-1</span>]-a[<span class="hljs-number">0</span>];</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,sum);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS</title>
      <link href="/AngelNI.github.io/DFS/"/>
      <url>/AngelNI.github.io/DFS/</url>
      
        <content type="html"><![CDATA[<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>深度优先搜索算法（Depth-First-Search），是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止（属于盲目搜索）。</p><p><img src="https://s2.ax1x.com/2019/08/28/mHg94H.jpg" alt></p><a id="more"></a><p>“一路走到头，不撞墙不回头”</p><p> 深度优先搜索属于图算法的一种，是一个针对图和树的遍历算法，英文缩写为DFS即Depth First Search。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p><h2 id="树状图图解"><a href="#树状图图解" class="headerlink" title="树状图图解"></a>树状图图解</h2><p>例如，想要从1到9，每到一个岔路口你有两种选择，你可以选择左枝，或者右枝，共两种可能，但是当你走到死胡同时，你只能原路返回，走到这个死胡同的上一个路口，走另一条路，依次类推，直到走到终点，也就是九。你可能会问，这不明摆着呢吗，直接从1经过8到9不就行了。没错，这是最直接的办法，但计算机傻啊，没有你聪明啊，它只会，一次一次的尝试，直到最终结果。</p><p>下面是图解</p><p><img src="https://s2.ax1x.com/2019/08/28/mHgFgI.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHgVDf.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHgMCj.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHgQ8s.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHg8K0.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHgU54.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHgwG9.jpg" alt></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>给定整数a1、a2、…….an，判断是否可以从中选出若干数，使它们的和恰好为K。</p><p>输入</p><p>首先，n和k，n表示数的个数，k表示数的和。<br>接着一行n个数。<br>（1&lt;=n&lt;=20,保证不超int范围）</p><p>输出</p><p>如果和恰好可以为k，输出“YES”，否则“NO”</p><p>样例输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 13</span><br><span class="line"></span><br><span class="line">1 2 4 7</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>每一个数有加与不加两种可能，从树的一枝不加到尾，然后，再从叶末返回上一层叶节点，走另一个分支，也就是加上最后一个，与所求的和比较，不符再重复上述操作。直到找到与所求和相等返回Yes</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,k,a[<span class="hljs-number">50</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> sum)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==n) </span><br><span class="line"><span class="hljs-keyword">return</span> sum==k;</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>,sum))</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>,sum+=a[i]))</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"No!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天生棋局</title>
      <link href="/AngelNI.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80/"/>
      <url>/AngelNI.github.io/%E5%A4%A9%E7%94%9F%E6%A3%8B%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>天生棋局问题，是C语言老师留的一个课外练习题。要求有用指针来写，因为指针学的不扎实，也因为第一次看到这道题时，第一个想法就是要用数组来写，所以以下是用数组对天生棋局代码。(指针的会后续补上)</p><a id="more"></a><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>中国传统文化源远流长，博大精深，包含着华夏先哲的无穷智慧，也是历朝历代炎黄子孙生活的缩影。围棋作为中华民族流传已久的一种策略性棋牌游戏，蕴含着丰富的汉民族文化内涵，是中国文明与中华文化的体现。本案例要求创建一个棋盘，在棋盘生成的同时初始化棋盘，根据初始化后棋盘中棋子的位置来判断此时的棋局是否是一局好棋。具体要求如下：**</strong></p><p><strong>1）棋盘的大小根据用户的指令确定；</strong></p><p><strong>2）棋盘中棋子的数量也由用户设定；</strong></p><p><strong>3）棋子的位置由随机数函数随机确定，若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong></p><h3 id="题前注释"><a href="#题前注释" class="headerlink" title="题前注释"></a>题前注释</h3><h5 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1.随机数"></a>1.随机数</h5><p><strong>头文件</strong>：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt; And #include&lt;time.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>函数</strong>：</p><p>1.<strong>rand()</strong>函数生成伪随机数。</p><p>2.随机发生器的初始化函数`<strong>srand(unsigned seed)</strong></p><p><strong>目的</strong>：</p><p> <strong>rand（）</strong>函数是按指定的顺序来产生整数，但可能两次的随机数相同并不是真正的随机，叫做伪随机数。而随机发生器的初始化函数`<strong>srand(unsigned seed)（也位于stdlib.h）</strong>进行伪随机数列初始化，通过用时间函数<strong>time（NULL）</strong>作为<strong>seed</strong>，使每一次产生的随机数都不一样。</p><h5 id="2-棋盘，棋子"><a href="#2-棋盘，棋子" class="headerlink" title="2.棋盘，棋子"></a>2.棋盘，棋子</h5><p>这是一个下棋的游戏，如果把随机的产生的棋子赤果果地展现在棋盘上，效果会很明显，并且题目说要生成棋盘，所以首先要打印一个棋盘</p><p>打印棋盘，首先要有边框和棋子，这些是从word上copy来的,然后用双层循环就可以了。</p><h5 id="3-判断好-坏棋"><a href="#3-判断好-坏棋" class="headerlink" title="3.判断好/坏棋"></a>3.判断好/坏棋</h5><p>根据题意即可</p><h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><p>根据题意，他说<strong>若生成的棋盘中有两颗棋子落在同一行或同一列，则判定为“好棋”，否则判定为“不是好棋”。</strong>但与查的资料不同，说是两颗棋子相邻是好棋。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt; </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">srand((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)time(<span class="hljs-literal">NULL</span>));    <span class="hljs-comment">//   生成伪随机数，每次的随机数都不一样 </span></span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> kb[<span class="hljs-number">700</span>][<span class="hljs-number">700</span>];         <span class="hljs-comment">//默认最大棋盘大小 </span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋盘大小： "</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入棋子数量： "</span>);</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="hljs-keyword">while</span>(m--)<span class="hljs-comment">//生成  0 ~ n-1  的随机数  并赋值为 1 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a=rand()%n,b=rand()%n;      </span><br><span class="line">kb[a][b]=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//  生  成  棋  盘 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)        <span class="hljs-comment">//   ┏┓┗┛┠┷┨┯┼●</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(kb[i][j]==<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"●"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)    </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┏ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┓ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┗ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┛ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┠ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┷ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == n - <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┨ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┯ "</span>);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"┼ "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-comment">//   默认不是好棋。 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">// 判断 好棋 坏棋 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (kb[i][j] == <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (j&gt;<span class="hljs-number">0</span> &amp;&amp; kb[i][j<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一行有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"好棋！\n"</span>);</span><br><span class="line">flag = <span class="hljs-number">1</span>; </span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (i &gt;<span class="hljs-number">0</span> &amp;&amp; kb[i<span class="hljs-number">-1</span>][j] == <span class="hljs-number">1</span>)<span class="hljs-comment">//判断同一列有无相邻棋子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"好棋！\n"</span>);</span><br><span class="line">flag = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"不是好棋"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/28/mHh91J.png" alt></p><p><img src="https://s2.ax1x.com/2019/08/28/mHhCc9.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++初学</title>
      <link href="/AngelNI.github.io/C-%E5%88%9D%E5%AD%A6/"/>
      <url>/AngelNI.github.io/C-%E5%88%9D%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="C-初学（一）"><a href="#C-初学（一）" class="headerlink" title="C++ 初学（一）"></a>C++ 初学（一）</h4><p>在一次解决排序问题时，初步接触C++中的sort（）函数，在问题解决上非常好用，不用自己再写排序的代码，就像python中 import 函数库一样，因为懒嘛，所以更懒，嘿嘿！！所以想接触一下C++，简单学习一下子。</p><p><img src="http://pwxyaiwx0.bkt.clouddn.com/C.jpg" alt></p><a id="more"></a><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。</p><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p><p>C++ 被认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p><p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p><p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><p>好了废话不多说，开始！</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// main() 是程序开始执行的地方</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello World"</span>; <span class="hljs-comment">// 输出 Hello World</span></span><br><span class="line">   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们讲解一下上面这段程序：</p><ul><li>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 。</li><li>下一行 <strong>using namespace std;</strong> 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</li><li>下一行 <strong>// main() 是程序开始执行的地方</strong> 是一个单行注释。单行注释以 // 开头，在行末结束。</li><li>下一行 <strong>int main()</strong> 是主函数，程序从这里开始执行。</li><li>下一行 <strong>cout &lt;&lt; “Hello World”;</strong> 会在屏幕上显示消息 “Hello World”。</li><li>下一行 <strong>return 0;</strong> 终止 main( )函数，并向调用进程返回值 0。</li></ul><h4 id="输入、输出"><a href="#输入、输出" class="headerlink" title="输入、输出"></a>输入、输出</h4><p>C++的输出和输入是用“流”(stream)的方式实现的｡有关流对象cin､cout和流运算符的定义等信息是存放在C++的输入输出流库中的,因此如果在程序中使用cin､cout和流运算符,就必须使用预处理命令把头文件stream包含到本文件中:<br><code>#include &lt;iostream&gt;</code><br>尽管cin和cout不是C++本身提供的语句,但是在不致混淆的情况下,为了叙述方便,常常把由cin和流提取运算符“&gt;&gt;”实现输入的语句称为输入语句或cin语句,把由cout和流插入运算符“&lt;&lt;”实现输出的语句称为输出语句或cout语句｡根据C++的语法,凡是能实现某种操作而且最后以分号结束的都是语句｡</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt; </span></span></span><br><span class="line"><span class="hljs-comment">//格式化输出的头文件，注意这里不要加.h</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a,b,c;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;a&lt;&lt;setw(<span class="hljs-number">2</span>)&lt;&lt;b&lt;&lt;setw(<span class="hljs-number">2</span>)&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">float</span> num1 = <span class="hljs-number">123.456f</span>,num2 = <span class="hljs-number">563.1f</span>,num3 = <span class="hljs-number">1.30f</span>;</span><br><span class="line">    <span class="hljs-keyword">float</span> num4 = <span class="hljs-number">123456.4444f</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; setprecision(<span class="hljs-number">4</span>);</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第一个数："</span> &lt;&lt; num1 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第二个数："</span> &lt;&lt; num2 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第三个数："</span> &lt;&lt; num3 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第四个数："</span> &lt;&lt; num4 &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//endl 英语意思是end of line,即一行输出结束，然后输出下一行。</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>头文件<code>#include&lt;iomanip&gt;</code>是格式化输出的头文件，注意后面不加 <strong>.h</strong>，</p><h6 id="使用setw-来控制占位宽度。"><a href="#使用setw-来控制占位宽度。" class="headerlink" title="使用setw()来控制占位宽度。"></a>使用setw()来控制占位宽度。</h6><p>注意事项</p><ol><li>setw() 虽然带有括号，但是其实是一个操作符，并不是函数。</li><li>setw() 主要引用头文件 iomanip 才能使用。</li><li>如果setw() 所约束的输出超过了限制，不会被截断。是多少位就输出多少位。</li><li>如果输出是浮点数，小数点也会占一个位。</li><li>如果输出是字符串，空格有段有效字符，占一个位。从上面的输出结果也可以看出来。</li><li>setw() 只能约束住跟自己相邻的一个输出。也就是说</li></ol><h6 id="使用setprecision-控制浮点数有效位"><a href="#使用setprecision-控制浮点数有效位" class="headerlink" title="使用setprecision()控制浮点数有效位"></a>使用setprecision()控制浮点数有效位</h6><p>注意事项：</p><ol><li>setprecision() 同样是一个操作符，需要包含头文件 iomanip。</li><li>如果输出浮点数不足位，不会在其后面补0。</li><li>如果末尾有0，默认是不输出的。后面我们有其他方法可以输出末尾的0。</li><li>setprecision() 不同于setw()，setprecision() 设置之后，在下次设置之前都是有效的。从程序结果中可以看出来。</li><li>如果要输出的位数过多，则用科学计数法表示，10为基数。</li></ol><h6 id="setfioflags-控制定点输出"><a href="#setfioflags-控制定点输出" class="headerlink" title="setfioflags() 控制定点输出"></a>setfioflags() 控制定点输出</h6><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">float</span> num1 = <span class="hljs-number">13.000f</span>,num2 = <span class="hljs-number">14.568f</span>,num3 = <span class="hljs-number">1.2f</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; setiosflags(ios::fixed|ios::showpoint);</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; setprecision(<span class="hljs-number">4</span>);</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第一个数："</span> &lt;&lt; num1 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第三个数："</span> &lt;&lt; num2 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">     <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"第二个数："</span> &lt;&lt; num3 &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>setiosflags() 是通过状态标志来实现对输出的控制的。状态标志功能如下表</p><table><thead><tr><th align="left">状态标志</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">ios::left</td><td align="left">左对齐，右边填空格</td></tr><tr><td align="left">ios::dec</td><td align="left">所有整数以十进制输出</td></tr><tr><td align="left">ios::right</td><td align="left">右对齐，左边填空格</td></tr><tr><td align="left">ios::scientific</td><td align="left">以科学计数法形式输出浮点数</td></tr><tr><td align="left">ios::hex</td><td align="left">所有整数以十六进制输出</td></tr><tr><td align="left">ios::fixed</td><td align="left">以定点形式输出浮点数</td></tr><tr><td align="left">ios::oct</td><td align="left">所有整数以八进制输出</td></tr><tr><td align="left">ios::showpoint</td><td align="left">显示小数点和尾部的零</td></tr><tr><td align="left">ios::showpos</td><td align="left">在正数前面输出+</td></tr><tr><td align="left">ios::uppercase</td><td align="left">对于十六进制输出，使用大写字母表示</td></tr></tbody></table><p>setiosflags() 需要与 setprecision() 一起使用。如果状态标志设为 ios::fixed，那么setprecision()设置的数字，就表示小数位的个数，不足补零。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appreciation of Novels(1)</title>
      <link href="/AngelNI.github.io/Appreciation%20of%20Novels/"/>
      <url>/AngelNI.github.io/Appreciation%20of%20Novels/</url>
      
        <content type="html"><![CDATA[<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>我因车祸而失明，所以我从不知女友长什么样。那年，她得了胃癌，临终前她将眼角膜移植给了我。我恢复光明后的第一件事就是找她的照片，然而我只找到她留给我的一封信，信里有一张空白照片，照片上写有一句话：“别再想我长什么样，下一个你爱上的人，就是我的模样。”　<a id="more"></a>　　</p><p><img src="https://s2.ax1x.com/2019/08/28/mHf4k8.jpg" alt></p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>外婆离开人世的那个黄昏，外公在病房里陪伴着她走完了她生命的最后一段旅程。外婆临去前对外公说‘放学了’。一直假装平静的外公听完这句话后像个孩子似的大哭起来。葬礼结束后我问起外公这三个字的含义，外公告诉我说这是从前他和外婆还在上小学时外婆常说的一句话：放学了，我们一起回家吧。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>她车祸去世后，他思念万分，利用时光机回到过去，阻止惨剧发生。机器出了差错，比预定时间早了几分钟。他拿出钥匙开门，听见卧室传出她的娇喘和男人的声音。她手机响了，他记得这是他打来的。“我得走了，我男人催我呢。”。他听着，惹羞成怒，出门偷了一辆车，看着急匆匆的她，一脚踩下油门。</p><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>妈妈你看！”小女孩开心地递过来一张写满字的纸。“我听见一个哥哥问姐姐怎么才会爱他，姐姐说只要每天在纸上写1000遍她的名字…”“傻孩子！”女人抱住小女孩：那宝贝是怎么知道爸爸名字的？“这里！”小女孩打开抽屉：上次爸爸把名字签在上面了！女人顺眼望去，里面躺着一张离婚协议书　</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p>他看着桌子上忙碌的蚂蚁，伸出手指，一下捏死一只。蚂蚁们大惊，四下乱窜。稍停，又排成一字继续工作。他又伸出手，再捏死一只。蚂蚁大乱，稍顷还是排一字。等到第10次时，蚂蚁们已经熟视无睹。当他向第11只下手时，轰隆一声，巨大的天花板砸了下来。他最后一眼，只看到推倒他房子的那只怪手。　</p><h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p>他和她青梅竹马，相约为百姓杀贪官，仗剑天涯。一次刺杀失败被俘，他竟被招安，无数同仁被杀。她含泪发誓要刃叛徒，遂色诱贪官纳她为妾。十年后，他成平反大将。酒宴上，她起身献舞，刺中他手臂。他深情说，你之后，我再无爱过。她心软刃落，他抽刀刺死她，心想，真好骗。</p><h4 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h4><p>他大她快二十岁，他对她很好，百般呵护，他们认识不到一年，他就执意要娶她。朋友都很羡慕她，她却犹豫不决，因为小时候一场手术意外造成她不孕，他是独子，庞大的家族事业等他继承，她不想耽误他。终於她鼓起勇气向他坦诚不孕的事实，他说我知道，当年那刀是我开的，这些年来我一直在找你！</p><h4 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h4><p>5岁“妈妈，烧红烧肉吧”“行，烧”15岁“妈妈，别烧红烧肉了，换换味道” “行，买别的菜” 35岁“儿子，啥时候回家吃一顿啊？妈给做红烧肉” “不行，最近忙” 50岁“妈妈今天路过你家，给你带红烧肉” “不行，今不在家” 70岁“妈，我想吃红烧肉” 那边，已经没有了妈妈的声音</p><h4 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h4><p>就要做心脏移植手术了，他深情地望着躺在床上的妻子，拿签字表的手有点抖。“快签吧，你个窝囊废、穷鬼！”妻骂。手术很成功，她没有一点排异反应。“我那没心肝的丈夫哪？”她问护士。护士递过一张纸，上面画一颗鲜红的心和一行小字：“这是我最后能给你的了，我爱你。”</p><h4 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h4><p>他与爸爸相依至大。他常问：为什么不给他找个后妈？爸爸总是笑说：此生只爱妈妈一个！后来他长大成家，爸爸说要结婚，他愤怒地打了那女人一耳光，骂爸爸是个骗子。从此，爸爸再未提及此事。多年后爸爸去世，他整理遗物时发现了一张自己婴儿时的照片，背面是沧桑的字迹：战友之子，当如吾儿！</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法查找</title>
      <link href="/AngelNI.github.io/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE/"/>
      <url>/AngelNI.github.io/%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><p>二分法查找，二分搜所，也称折半搜索，每次查找区间减半，适用于数据量较大，对一个有序的数组中查找某一元素。</p><a id="more"></a><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><p>给一有序的数组a[9]={1,2,3,4,5,6,7,8,9,}，想要确定 3 的位置。</p><h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a[0]+a[8])/2=5   大于  3则只需要查找a[0]~a[4]就可以</span><br><span class="line">(a[0]+a[4])/2=3   此时刚好等于3，则此时3的位置就是（0+4）/2=2</span><br><span class="line">则可知 a[2]=3    至此查找结束</span><br></pre></td></tr></table></figure><p>下面通过一个例子来具体体验下二分法的妙处</p><h2 id="Trailing-Zeroes"><a href="#Trailing-Zeroes" class="headerlink" title="Trailing Zeroes"></a>Trailing Zeroes</h2><p>n的阶乘尾部有q个连续的0，现在给你q，请你算出满足条件的n，如果有多个n满足条件，输出最小的那个即可。</p><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入一个T(T &lt;= 10000),表示样例数量。</span><br><span class="line"></span><br><span class="line">每个样例输入一个q。(1 &lt;= q &lt;= 100,000,000)</span><br></pre></td></tr></table></figure><h5 id="output"><a href="#output" class="headerlink" title="output"></a><strong>output</strong></h5><p>对于每个样例，输出满足条件的最小的n，如果没有满足条件的则输出”impossible”。.</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Case 1: 5</span><br><span class="line"></span><br><span class="line">Case 2: 10</span><br><span class="line"></span><br><span class="line">Case 3: impossible</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这是一个判断阶乘后面有多少个零，输出满足条件下的最小解。</p><p>首先判断0的个数，我们可以通过判断5的个数来判断0`的个数（10可以分成2*5）</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：5！=1*2*3*4*5=120</span><br></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">fn</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n)</span>   <span class="hljs-comment">//求n阶乘的末尾0个数 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">a += n/<span class="hljs-number">5</span>;</span><br><span class="line">n = n/<span class="hljs-number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：判断25！末尾有几个0</p><p>a=25/5 –&gt; a=5</p><p>a+=5/5 –&gt; a=6</p><p>由此可以判断25的阶乘末尾有6个零（拿计算器验证）</p><h3 id="整个题解"><a href="#整个题解" class="headerlink" title="整个题解"></a>整个题解</h3><p>（这是大佬写的，我偷偷拿来哈~）</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">##### <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;  //cin，cout数据流输入输出的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;  <span class="hljs-comment">//声明定义long long 的别名 ll</span></span><br><span class="line"><span class="hljs-keyword">const</span> ll maxn = <span class="hljs-number">1e17</span>;  <span class="hljs-comment">//题目中0的个数  1~1e9</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">fn</span><span class="hljs-params">(ll n)</span><span class="hljs-comment">//求n阶乘的末尾0个数 </span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll a = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">a += n/<span class="hljs-number">5</span>;</span><br><span class="line">n = n/<span class="hljs-number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n, q;</span><br><span class="line">ll ans;<span class="hljs-comment">//定义所要求的答案</span></span><br><span class="line"><span class="hljs-keyword">int</span> Case = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;n; <span class="hljs-comment">//输入测试组数</span></span><br><span class="line"><span class="hljs-keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">Case++;<span class="hljs-comment">//判断测试第几个</span></span><br><span class="line"><span class="hljs-built_in">cin</span>&gt;&gt;q;<span class="hljs-comment">//输入0的个数</span></span><br><span class="line"><span class="hljs-keyword">int</span> l, r;<span class="hljs-comment">//定义左值，和右值</span></span><br><span class="line">l =<span class="hljs-number">1</span>;</span><br><span class="line">r = maxn;</span><br><span class="line">ans = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(r&gt;=l)</span><br><span class="line">&#123;</span><br><span class="line">ll mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">//直接平均可能溢出，所以用这个  注： &gt;&gt; 值的二进制形式右移一位，相当于十进制除2</span></span><br><span class="line"><span class="hljs-keyword">if</span>(fn(mid)==q)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;<span class="hljs-comment">//如果中间的那个数零的个数恰好等于q，则为答案</span></span><br><span class="line">r = mid<span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fn(mid)&lt;q) l = mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//如果中间的值0的个数小于q，则左值++</span></span><br><span class="line"><span class="hljs-keyword">else</span> r = mid<span class="hljs-number">-1</span>;<span class="hljs-comment">//  否则 右值——</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d: %lld"</span>, Case, ans);<span class="hljs-comment">//如果结果不为零，按输出格式打印</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case %d: impossible"</span>, Case);<span class="hljs-comment">//否则，则输出impossile</span></span><br><span class="line"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makedown</title>
      <link href="/AngelNI.github.io/Makedown/"/>
      <url>/AngelNI.github.io/Makedown/</url>
      
        <content type="html"><![CDATA[<p>最近经过几天的奋斗，自己的博客基本框架终于搭建成功，接下来就是开始写文章了，不过上来就碰上个头疼的问题，就是怎么写的问题，我就想度娘请教（度娘，真帅），说是用Markdown语法写，最近在Notebook上写Python的学习笔记，老师说过要自学Markdown语法，说是非常简单（没错，就是很简单），下面就是Markdown的语法介绍啦，要好好学哟。</p><a id="more"></a><p>在编写 Markdown 时，强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora</p><p>按照官方的说法就是 简单而强大，它不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以 实时预览</p><p>这里附上 Typora 的下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">点击这里</a> , 有兴趣的朋友可以下载来试试</p><p>好，下面开始进入正题，介绍一些常用的 Markdown 语法</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="(1) 标题"></a>(1) 标题</h3><h4 id="Markdown语法："><a href="#Markdown语法：" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#一级标题`</span><br><span class="line"></span><br><span class="line">`##二级标题`</span><br><span class="line"></span><br><span class="line">`###三级标题`</span><br><span class="line"></span><br><span class="line">`####四级标题`</span><br><span class="line"></span><br><span class="line">`#####五级标题`</span><br><span class="line"></span><br><span class="line">`######六级标题</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键："><a href="#Typora快捷键：" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + 1：一级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 2：二级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 3：三级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 4：四级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 5：五级标题</span><br><span class="line"></span><br><span class="line">Ctrl + 6：六级标题</span><br></pre></td></tr></table></figure><h3 id="2-粗体、斜体、删除线"><a href="#2-粗体、斜体、删除线" class="headerlink" title="(2)粗体、斜体、删除线"></a>(2)粗体、斜体、删除线</h3><h4 id="Markdown语法：-1"><a href="#Markdown语法：-1" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体*`</span><br><span class="line"></span><br><span class="line">`**粗体**`</span><br><span class="line"></span><br><span class="line">`***加粗斜线***`</span><br><span class="line"></span><br><span class="line">`~~删除线~~</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-1"><a href="#Typora快捷键：-1" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+l ：斜体</span><br><span class="line"></span><br><span class="line">Ctrl+B：粗体</span><br><span class="line"></span><br><span class="line">Ctrl+U：下划线</span><br><span class="line"></span><br><span class="line">Alt + Shift + 5 ：删除线</span><br></pre></td></tr></table></figure><h3 id="3-引用块"><a href="#3-引用块" class="headerlink" title="(3) 引用块"></a>(3) 引用块</h3><h4 id="Markdown语法：-2"><a href="#Markdown语法：-2" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 文字引用</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-2"><a href="#Typora快捷键：-2" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + Q</span><br></pre></td></tr></table></figure><h3 id="4-代码块"><a href="#4-代码块" class="headerlink" title="(4)代码块"></a>(4)代码块</h3><h4 id="Markdown语法：-3"><a href="#Markdown语法：-3" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos; 行内代码&apos;</span><br><span class="line">&apos;&apos;&apos; 多行代码&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-3"><a href="#Typora快捷键：-3" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码： Ctrl + Shift + `</span><br><span class="line"></span><br><span class="line">多行代码：Ctrl + Shift +K</span><br></pre></td></tr></table></figure><h3 id="5-公式块"><a href="#5-公式块" class="headerlink" title="(5)公式块"></a>(5)公式块</h3><h4 id="Markdown语法：-4"><a href="#Markdown语法：-4" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$数学公式$$</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-4"><a href="#Typora快捷键：-4" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + M</span><br></pre></td></tr></table></figure><h3 id="6-分割线"><a href="#6-分割线" class="headerlink" title="(6)分割线"></a>(6)分割线</h3><h4 id="Markdown-语法："><a href="#Markdown-语法：" class="headerlink" title="Markdown 语法："></a>Markdown 语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法1：---`</span><br><span class="line"></span><br><span class="line">`方法2：+++`</span><br><span class="line"></span><br><span class="line">`方法3：***</span><br></pre></td></tr></table></figure><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="(7)列表"></a>(7)列表</h3><h4 id="Markdown语法：-5"><a href="#Markdown语法：-5" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.有序列表项</span><br><span class="line">2. * 无序列表项</span><br><span class="line">3. + 无序列表项</span><br><span class="line">4. - 无序列表项</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-5"><a href="#Typora快捷键：-5" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>有序列表项：Ctrl+Shift+[</p><p>有序列表项：Ctrl+Shift+]</p><h3 id="8-表格"><a href="#8-表格" class="headerlink" title="(8) 表格"></a>(8) 表格</h3><h4 id="Markdown语法：-6"><a href="#Markdown语法：-6" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 表头1|表头2</span><br><span class="line">-|-|-</span><br><span class="line">内容11|内容12</span><br><span class="line">内容21|内容22</span><br></pre></td></tr></table></figure><h4 id="Typora-快捷键："><a href="#Typora-快捷键：" class="headerlink" title="Typora 快捷键："></a><strong>Typora 快捷键：</strong></h4><p>Ctrl+T</p><h3 id="9-超链接"><a href="#9-超链接" class="headerlink" title="(9)超链接"></a>(9)超链接</h3><h4 id="Markdown语法：-7"><a href="#Markdown语法：-7" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法一：[链接文字](链接地址 &quot;链接描述&quot;)</span><br><span class="line">例如：[示例链接](https://www.example.com/ &quot;示例链接&quot;)</span><br><span class="line">方法二：&lt;链接地址&gt;</span><br><span class="line">例如：&lt;https://www.example.com/&gt;</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-6"><a href="#Typora快捷键：-6" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>Ctrl+K</p><h3 id="10-图片"><a href="#10-图片" class="headerlink" title="(10)图片"></a>(10)图片</h3><h4 id="Markdown语法：-8"><a href="#Markdown语法：-8" class="headerlink" title="Markdown语法："></a>Markdown语法：</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![图片文字](图片地址 &quot;图片描述&quot;)</span><br><span class="line">例如：![示例图片](https://www.example.com/example.PNG &quot;示例图片&quot;)</span><br></pre></td></tr></table></figure><h4 id="Typora快捷键：-7"><a href="#Typora快捷键：-7" class="headerlink" title="Typora快捷键："></a>Typora快捷键：</h4><p>Ctrl+Shift+I</p>]]></content>
      
      
      <categories>
          
          <category> Makedown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makedown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github</title>
      <link href="/AngelNI.github.io/hexo-github/"/>
      <url>/AngelNI.github.io/hexo-github/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建-自己总结"><a href="#博客搭建-自己总结" class="headerlink" title="博客搭建(自己总结)"></a>博客搭建(自己总结)</h2><p>之前自己搭建博客，可以说废了很大的劲，这里总结了一下各位大佬们搭建博客的方法，供大家借鉴。</p><a id="more"></a><h3 id="1-安装所需软件"><a href="#1-安装所需软件" class="headerlink" title="1.安装所需软件"></a>1.安装所需软件</h3><h4 id="1-git安装"><a href="#1-git安装" class="headerlink" title="1.git安装"></a>1.git安装</h4><p>Windows系统下安装git</p><p>可以直接到官网下载安装<a href="https://git-scm.com/" target="_blank" rel="noopener">点击这里</a></p><p>由于访问的是外网，下载速度可能会慢（也可能非常慢）</p><p>下面提供百度云的下载地址</p><p>64-bit Git for Windows Setup : <a href="https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/v2.21.0.windows.1/Git-2.21.0-64-bit.exe</a></p><h4 id="2-Node-js安装"><a href="#2-Node-js安装" class="headerlink" title="2.Node.js安装"></a>2.Node.js安装</h4><p>可以直接到官网下载安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击这里</a></p><p>百度网盘资源： <a href="https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA" target="_blank" rel="noopener">https://pan.baidu.com/s/1hKVcYfPorRX89hl7D4R1eA</a></p><p>提取码：wsti</p><p>下载完成后，安装时一定要点击 Add to PATH</p><p>安装完成后，打开cmd，<code>输入 node -v</code> 测试安装是否成功</p><p>下面来解决npm卡顿问题</p><p>1.打开cmd，换成阿里源</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>2.验证命令</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.npm config get registry    //返回https://registry.npm.taobao.org，说明镜像配置成功</span><br></pre></td></tr></table></figure><p>3.安装cnpm</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="3-hexo安装"><a href="#3-hexo安装" class="headerlink" title="3.hexo安装"></a>3.hexo安装</h4><p>打开git目录下的git-bash.exe，输入下面代码</p><p>npm install -g hexo-cli</p><p>安装hexo完成后执行下列命令</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;文件夹名&gt; </span><br><span class="line">cd &lt;文件夹名&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>hexo 理论上安装在git文件夹下</p><h4 id="4-在github上注册账号并同时建立仓库"><a href="#4-在github上注册账号并同时建立仓库" class="headerlink" title="4.在github上注册账号并同时建立仓库"></a>4.在github上注册账号并同时建立仓库</h4><p>gitHub是一个面向<a href="https://baike.baidu.com/item/开源/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。（来源百度百科）</p><p>github官网<a href="https://github.com/" target="_blank" rel="noopener">点击这里</a></p><p>这个是github基础设置和使用详解<a href="https://www.jianshu.com/p/f51062941573" target="_blank" rel="noopener">点击这里</a></p><h4 id="5-ssh授权获取私钥"><a href="#5-ssh授权获取私钥" class="headerlink" title="5.ssh授权获取私钥"></a>5.ssh授权获取私钥</h4><p>先配置SSH,在git-bash下输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github注册名&quot;</span><br><span class="line">git config --global user.email &quot;github注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>打开git bash，输入ssh-kengen -t rsa，停顿时，敲击回车</p><p>最后会在C盘目录下生成id_ras和id_rsa.pub两个文件夹，用记事本打开id_rsa.pub，复制打开的文件内容到 github-&gt;setting-&gt;SSH and GPG key 下</p><p>添加后，在git-bash进行测试，输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 如果返回Hi username ！You’ve successfully ……，说明配置成功</p><h4 id="6-配置-config-yml"><a href="#6-配置-config-yml" class="headerlink" title="6.配置_config.yml"></a>6.配置_config.yml</h4><p>打开你的hexo目录下的_config.yml文档（我用的是notepad++打开的）</p><p>修改最下面的deploy下的内容</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repository :  //这里是你的仓库下，点击Clone ordownload（绿色的）点击Use SSH复制框框内的内容到这里。</span><br><span class="line"></span><br><span class="line">branch：//这里是你的bransh名称，默认为master</span><br></pre></td></tr></table></figure><p>下面来修改 url和 root</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url ：// 是你的github 分配的地址</span><br><span class="line"></span><br><span class="line">root：// 是你的仓库的名字</span><br></pre></td></tr></table></figure><p>一定要注意每一项冒号后有一个英文空格</p><h4 id="7-本地测试"><a href="#7-本地测试" class="headerlink" title="7.本地测试"></a>7.本地测试</h4><p>打开git bash进入博客的根目录（cd + 文件夹名）</p><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>hexo s是开启本地预览服务，打开浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener"> http://localhost:4000</a> 即可看到内容。</p><p>显示的主题是 hexo 默认的</p><p>hexo 操作指令<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">点击这里</a></p><h4 id="8-上传到github仓库"><a href="#8-上传到github仓库" class="headerlink" title="8.上传到github仓库"></a>8.上传到github仓库</h4><p>首先先安装hexo拓展库，打开git bash输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean//清除缓存</span><br><span class="line">hexo g//生成静态文件</span><br><span class="line">hexo d/上传</span><br><span class="line">打开github分配的网站，就可以看到你的blog了</span><br></pre></td></tr></table></figure><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>自己搭建博客可能不是一帆风顺的，可能遇到各种不同的错误，一定要耐得住性子，一步一步来搭建。</p><p>记得，一定要善用搜索，遇到不懂得问题去百度上搜索。</p><p>最后，度娘，可真帅哪！！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo+github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo+github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="/AngelNI.github.io/Hello-world-0/"/>
      <url>/AngelNI.github.io/Hello-world-0/</url>
      
        <content type="html"><![CDATA[<h5 id="记一次过程经历"><a href="#记一次过程经历" class="headerlink" title="记一次过程经历"></a>记一次过程经历</h5><p> 最近，自己在搭一个博客，用 hexo+github，一开始按照网上的教程下载相应的软件，cmd安装，git bash 安装hexo，最开始可是在自己的本地可以预览，效果不错，直接就上传到github上的我的repo，结果cmd出错，由于对hexo 文件的位置不清，和出现的错误，我直接就删除了hexo，但是不是直接的卸载，有些文件还在（找不到啊 呜呜~），我用重新npm安装，发现还是不行，当时头大到想要格式化电脑了（还好没有，要不然就要重新慢慢下载了），然后我去找baidu，简书，发现自己的许多错误操作。好吧，我又从新开始。还是有error，我就按个所错误，发现自己有许多的本地配置没有设置，我就一条一条的修改（可气人了，一步踩一个坑，一步填一个坑），花了两天才把本地配置好（上课没时间啊）。</p><a id="more"></a><p> 又因为，默认的主题很low（只是个人而言），不怎么喜欢，想换个主题，hexo上面有好多的主题，一个一个翻看，也没有喜欢的，现在比较流行的是NEXT主题（没错我找了度娘），就在网上下载NEXT主题包，一开始的主题内容，没设计的，所以我又找了度娘，还在CSDN上搜搜，发现许多大佬掉了许多的坑，也有填坑的方法(坑和经验，傻傻分不清），就开始一步一步自己搭，终于，经过一天多的自己的骚操作，在清明节的下午本地可以看到比较好的主题设置（还有点不满意，后续会修改）。</p><h5 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h5><p> （真是不作死不会死，谁TM知道我为什么突然想到建博客呢！）</p><p> 经过三天多自己的摸索，我这个小小白终于把自己的blog建成了（~~热烈欢迎大家访问）。在建博客的过程中，真是有点头大了，因为自己对命令行操作一点不了解，完全是两眼一模黑，在黑暗中摸索（哈哈，有点夸张），出现错误也不知道哪里的问题，真的很感谢度娘的帮助（说白了，多谢大佬们的坑啊）。</p><p> 这篇文章的标题是printf(“Hello,world”),学C语言的都知道这是入门的基础程序，我想用这个标题想说，当你去接触一个陌生不懂的东西时，不是一帆风顺的，总会有大波小浪，不过，经过自己的一步一步的摸索总会找到自己的___（你懂的哈），不管如何都不要放弃，既然已经迈开了重要的第一步，就要坚持走到终点。</p><p> 对了，还有还有，“生命在于运动，电脑在于折腾啊”，不管会不会，先折腾折腾吧（坏了我可不管~~)</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> .</p><p> 度娘，真帅！！！</p>]]></content>
      
      
      <categories>
          
          <category> Life essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life essay </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
